
iwdg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f00  08006f00  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f08  08006f08  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000081c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008ac  200008ac  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a621  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bba  00000000  00000000  0003a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd8  00000000  00000000  0003f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023de1  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a30  00000000  00000000  000641a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbca9  00000000  00000000  0007bbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014787a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004930  00000000  00000000  001478d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ecc 	.word	0x08006ecc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006ecc 	.word	0x08006ecc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc34 	bl	8000d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f818 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f930 	bl	8000730 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f880 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8ac 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f006 f93c 	bl	8006758 <MX_USB_HOST_Init>
  MX_IWDG_Init();
 80004e0:	f000 f8d6 	bl	8000690 <MX_IWDG_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004e4:	2064      	movs	r0, #100	; 0x64
 80004e6:	f000 fc95 	bl	8000e14 <HAL_Delay>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <main+0x38>)
 80004f2:	f000 ff61 	bl	80013b8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <main+0x36>
 80004f8:	40020c00 	.word	0x40020c00

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fc0e 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b29      	ldr	r3, [pc, #164]	; (80005cc <SystemClock_Config+0xd0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <SystemClock_Config+0xd0>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b26      	ldr	r3, [pc, #152]	; (80005cc <SystemClock_Config+0xd0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <SystemClock_Config+0xd4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <SystemClock_Config+0xd4>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <SystemClock_Config+0xd4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000558:	2309      	movs	r3, #9
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000562:	2301      	movs	r3, #1
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fad2 	bl	8003b30 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000592:	f000 f9d3 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fd33 	bl	8004020 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005c0:	f000 f9bc 	bl	800093c <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 fc57 	bl	8002ec4 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 f98e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000bc 	.word	0x200000bc
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f002 fd6c 	bl	800314c <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 f95f 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000174 	.word	0x20000174
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_IWDG_Init+0x2c>)
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <MX_IWDG_Init+0x30>)
 8000698:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_IWDG_Init+0x2c>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1000;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_IWDG_Init+0x2c>)
 80006a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_IWDG_Init+0x2c>)
 80006aa:	f003 f9ef 	bl	8003a8c <HAL_IWDG_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80006b4:	f000 f942 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000110 	.word	0x20000110
 80006c0:	40003000 	.word	0x40003000

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 ffab 	bl	8004670 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f90c 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000011c 	.word	0x2000011c
 800072c:	40013000 	.word	0x40013000

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
 800074a:	4b76      	ldr	r3, [pc, #472]	; (8000924 <MX_GPIO_Init+0x1f4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a75      	ldr	r2, [pc, #468]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b73      	ldr	r3, [pc, #460]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	61bb      	str	r3, [r7, #24]
 8000760:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a6e      	ldr	r2, [pc, #440]	; (8000924 <MX_GPIO_Init+0x1f4>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b6c      	ldr	r3, [pc, #432]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a67      	ldr	r2, [pc, #412]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b65      	ldr	r3, [pc, #404]	; (8000924 <MX_GPIO_Init+0x1f4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b61      	ldr	r3, [pc, #388]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a60      	ldr	r2, [pc, #384]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b5e      	ldr	r3, [pc, #376]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b5a      	ldr	r3, [pc, #360]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a59      	ldr	r2, [pc, #356]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b57      	ldr	r3, [pc, #348]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b53      	ldr	r3, [pc, #332]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a52      	ldr	r2, [pc, #328]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b50      	ldr	r3, [pc, #320]	; (8000924 <MX_GPIO_Init+0x1f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	484d      	ldr	r0, [pc, #308]	; (8000928 <MX_GPIO_Init+0x1f8>)
 80007f4:	f000 fde0 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2101      	movs	r1, #1
 80007fc:	484b      	ldr	r0, [pc, #300]	; (800092c <MX_GPIO_Init+0x1fc>)
 80007fe:	f000 fddb 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	2200      	movs	r2, #0
 8000804:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000808:	4849      	ldr	r0, [pc, #292]	; (8000930 <MX_GPIO_Init+0x200>)
 800080a:	f000 fdd5 	bl	80013b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800080e:	2308      	movs	r3, #8
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4840      	ldr	r0, [pc, #256]	; (8000928 <MX_GPIO_Init+0x1f8>)
 8000826:	f000 fc2b 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	483a      	ldr	r0, [pc, #232]	; (800092c <MX_GPIO_Init+0x1fc>)
 8000842:	f000 fc1d 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4832      	ldr	r0, [pc, #200]	; (800092c <MX_GPIO_Init+0x1fc>)
 8000862:	f000 fc0d 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <MX_GPIO_Init+0x204>)
 800087c:	f000 fc00 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000880:	2304      	movs	r3, #4
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4829      	ldr	r0, [pc, #164]	; (8000938 <MX_GPIO_Init+0x208>)
 8000894:	f000 fbf4 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008aa:	2305      	movs	r3, #5
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <MX_GPIO_Init+0x208>)
 80008b6:	f000 fbe3 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008be:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <MX_GPIO_Init+0x200>)
 80008d4:	f000 fbd4 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_GPIO_Init+0x200>)
 80008ec:	f000 fbc8 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <MX_GPIO_Init+0x1f8>)
 8000906:	f000 fbbb 	bl	8001080 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2006      	movs	r0, #6
 8000910:	f000 fb7f 	bl	8001012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000914:	2006      	movs	r0, #6
 8000916:	f000 fb98 	bl	800104a <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	; 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40021000 	.word	0x40021000
 800092c:	40020800 	.word	0x40020800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020000 	.word	0x40020000
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000986:	2007      	movs	r0, #7
 8000988:	f000 fb38 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_I2C_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009dc:	2312      	movs	r3, #18
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <HAL_I2C_MspInit+0x8c>)
 80009f4:	f000 fb44 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_I2C_MspInit+0x88>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	; 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <HAL_I2S_MspInit+0xf0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d15a      	bne.n	8000b0e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a5c:	23c0      	movs	r3, #192	; 0xc0
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fcc1 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a74:	f7ff ff62 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a18      	ldr	r2, [pc, #96]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000acc:	2310      	movs	r3, #16
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000adc:	2306      	movs	r3, #6
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480e      	ldr	r0, [pc, #56]	; (8000b20 <HAL_I2S_MspInit+0xf8>)
 8000ae8:	f000 faca 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afe:	2306      	movs	r3, #6
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_I2S_MspInit+0xfc>)
 8000b0a:	f000 fab9 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3738      	adds	r7, #56	; 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003c00 	.word	0x40003c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_SPI_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b82:	23e0      	movs	r3, #224	; 0xe0
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b92:	2305      	movs	r3, #5
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x8c>)
 8000b9e:	f000 fa6f 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8e6 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fbeb 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f000 fe65 	bl	80018f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000598 	.word	0x20000598

08000c30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
	HAL_IWDG_Refresh(&hiwdg);
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x18>)
 8000c3c:	f002 ff68 	bl	8003b10 <HAL_IWDG_Refresh>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000110 	.word	0x20000110

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f006 f81c 	bl	8006cb8 <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20020000 	.word	0x20020000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	200000ac 	.word	0x200000ac
 8000cb4:	200008b0 	.word	0x200008b0

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f005 ffdb 	bl	8006cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fbd7 	bl	80004c0 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d20:	08006f10 	.word	0x08006f10
  ldr r2, =_sbss
 8000d24:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d28:	200008ac 	.word	0x200008ac

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_Init+0x40>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_Init+0x40>)
 8000d46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x40>)
 8000d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f94f 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fdf0 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023c00 	.word	0x40023c00

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f967 	bl	8001066 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f92f 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200001bc 	.word	0x200001bc

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200001bc 	.word	0x200001bc

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	; (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff3e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffa2 	bl	8000fb8 <SysTick_Config>
 8001074:	4603      	mov	r3, r0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e16b      	b.n	8001374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f040 815a 	bne.w	800136e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d005      	beq.n	80010d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b03      	cmp	r3, #3
 800113e:	d017      	beq.n	8001170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d123      	bne.n	80011c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	220f      	movs	r2, #15
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	69b9      	ldr	r1, [r7, #24]
 80011c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0203 	and.w	r2, r3, #3
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 80b4 	beq.w	800136e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <HAL_GPIO_Init+0x30c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	4a5f      	ldr	r2, [pc, #380]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001214:	6453      	str	r3, [r2, #68]	; 0x44
 8001216:	4b5d      	ldr	r3, [pc, #372]	; (800138c <HAL_GPIO_Init+0x30c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001222:	4a5b      	ldr	r2, [pc, #364]	; (8001390 <HAL_GPIO_Init+0x310>)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	3302      	adds	r3, #2
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d02b      	beq.n	80012a6 <HAL_GPIO_Init+0x226>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a51      	ldr	r2, [pc, #324]	; (8001398 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d025      	beq.n	80012a2 <HAL_GPIO_Init+0x222>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01f      	beq.n	800129e <HAL_GPIO_Init+0x21e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0x21a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_GPIO_Init+0x324>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0x216>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_GPIO_Init+0x328>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d00d      	beq.n	8001292 <HAL_GPIO_Init+0x212>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d007      	beq.n	800128e <HAL_GPIO_Init+0x20e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_GPIO_Init+0x330>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d101      	bne.n	800128a <HAL_GPIO_Init+0x20a>
 8001286:	2307      	movs	r3, #7
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128a:	2308      	movs	r3, #8
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x228>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x310>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ea:	4a32      	ldr	r2, [pc, #200]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_GPIO_Init+0x334>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_GPIO_Init+0x334>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <HAL_GPIO_Init+0x334>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae90 	bls.w	800109c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013d4:	e003      	b.n	80013de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fc10 	bl	8000c30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b08f      	sub	sp, #60	; 0x3c
 8001420:	af0a      	add	r7, sp, #40	; 0x28
 8001422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e054      	b.n	80014d8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f005 f9d9 	bl	8006800 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 f9fa 	bl	8004866 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	687e      	ldr	r6, [r7, #4]
 800147a:	466d      	mov	r5, sp
 800147c:	f106 0410 	add.w	r4, r6, #16
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800148c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001490:	1d33      	adds	r3, r6, #4
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f003 f974 	bl	8004782 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f9f1 	bl	8004888 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	687e      	ldr	r6, [r7, #4]
 80014ae:	466d      	mov	r5, sp
 80014b0:	f106 0410 	add.w	r4, r6, #16
 80014b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80014c4:	1d33      	adds	r3, r6, #4
 80014c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f003 fb57 	bl	8004b7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af04      	add	r7, sp, #16
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	70fb      	strb	r3, [r7, #3]
 80014f2:	460b      	mov	r3, r1
 80014f4:	70bb      	strb	r3, [r7, #2]
 80014f6:	4613      	mov	r3, r2
 80014f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_HCD_HC_Init+0x28>
 8001504:	2302      	movs	r3, #2
 8001506:	e076      	b.n	80015f6 <HAL_HCD_HC_Init+0x116>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	333d      	adds	r3, #61	; 0x3d
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001522:	78fb      	ldrb	r3, [r7, #3]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	212c      	movs	r1, #44	; 0x2c
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	3338      	adds	r3, #56	; 0x38
 8001530:	787a      	ldrb	r2, [r7, #1]
 8001532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	212c      	movs	r1, #44	; 0x2c
 800153a:	fb01 f303 	mul.w	r3, r1, r3
 800153e:	4413      	add	r3, r2
 8001540:	3340      	adds	r3, #64	; 0x40
 8001542:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001544:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3339      	adds	r3, #57	; 0x39
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	333f      	adds	r3, #63	; 0x3f
 8001566:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800156a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	78ba      	ldrb	r2, [r7, #2]
 8001570:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001574:	b2d0      	uxtb	r0, r2
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	333a      	adds	r3, #58	; 0x3a
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001586:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800158a:	2b00      	cmp	r3, #0
 800158c:	da09      	bge.n	80015a2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	333b      	adds	r3, #59	; 0x3b
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e008      	b.n	80015b4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	212c      	movs	r1, #44	; 0x2c
 80015a8:	fb01 f303 	mul.w	r3, r1, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	333b      	adds	r3, #59	; 0x3b
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	333c      	adds	r3, #60	; 0x3c
 80015c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015c6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	787c      	ldrb	r4, [r7, #1]
 80015ce:	78ba      	ldrb	r2, [r7, #2]
 80015d0:	78f9      	ldrb	r1, [r7, #3]
 80015d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4623      	mov	r3, r4
 80015e4:	f003 fc1a 	bl	8004e1c <USB_HC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}

080015fe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Halt+0x1e>
 8001618:	2302      	movs	r3, #2
 800161a:	e00f      	b.n	800163c <HAL_HCD_HC_Halt+0x3e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fe56 	bl	80052de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	70fb      	strb	r3, [r7, #3]
 8001656:	460b      	mov	r3, r1
 8001658:	70bb      	strb	r3, [r7, #2]
 800165a:	4613      	mov	r3, r2
 800165c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800165e:	78fb      	ldrb	r3, [r7, #3]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	212c      	movs	r1, #44	; 0x2c
 8001664:	fb01 f303 	mul.w	r3, r1, r3
 8001668:	4413      	add	r3, r2
 800166a:	333b      	adds	r3, #59	; 0x3b
 800166c:	78ba      	ldrb	r2, [r7, #2]
 800166e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	333f      	adds	r3, #63	; 0x3f
 800167e:	787a      	ldrb	r2, [r7, #1]
 8001680:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001682:	7c3b      	ldrb	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d112      	bne.n	80016ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	212c      	movs	r1, #44	; 0x2c
 800168e:	fb01 f303 	mul.w	r3, r1, r3
 8001692:	4413      	add	r3, r2
 8001694:	3342      	adds	r3, #66	; 0x42
 8001696:	2203      	movs	r2, #3
 8001698:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	333d      	adds	r3, #61	; 0x3d
 80016a8:	7f3a      	ldrb	r2, [r7, #28]
 80016aa:	701a      	strb	r2, [r3, #0]
 80016ac:	e008      	b.n	80016c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3342      	adds	r3, #66	; 0x42
 80016bc:	2202      	movs	r2, #2
 80016be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	f200 80c6 	bhi.w	8001854 <HAL_HCD_HC_SubmitRequest+0x210>
 80016c8:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ce:	bf00      	nop
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	08001841 	.word	0x08001841
 80016d8:	08001745 	.word	0x08001745
 80016dc:	080017c3 	.word	0x080017c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016e0:	7c3b      	ldrb	r3, [r7, #16]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	f040 80b8 	bne.w	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
 80016e8:	78bb      	ldrb	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80b4 	bne.w	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016f0:	8b3b      	ldrh	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3355      	adds	r3, #85	; 0x55
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	212c      	movs	r1, #44	; 0x2c
 800170e:	fb01 f303 	mul.w	r3, r1, r3
 8001712:	4413      	add	r3, r2
 8001714:	3355      	adds	r3, #85	; 0x55
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d109      	bne.n	8001730 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	212c      	movs	r1, #44	; 0x2c
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3342      	adds	r3, #66	; 0x42
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800172e:	e093      	b.n	8001858 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	3342      	adds	r3, #66	; 0x42
 800173e:	2202      	movs	r2, #2
 8001740:	701a      	strb	r2, [r3, #0]
      break;
 8001742:	e089      	b.n	8001858 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001744:	78bb      	ldrb	r3, [r7, #2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11d      	bne.n	8001786 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800174a:	78fb      	ldrb	r3, [r7, #3]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3355      	adds	r3, #85	; 0x55
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	212c      	movs	r1, #44	; 0x2c
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	4413      	add	r3, r2
 800176a:	3342      	adds	r3, #66	; 0x42
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001770:	e073      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	3342      	adds	r3, #66	; 0x42
 8001780:	2202      	movs	r2, #2
 8001782:	701a      	strb	r2, [r3, #0]
      break;
 8001784:	e069      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3354      	adds	r3, #84	; 0x54
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3342      	adds	r3, #66	; 0x42
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
      break;
 80017ac:	e055      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2202      	movs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
      break;
 80017c0:	e04b      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11d      	bne.n	8001804 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	3355      	adds	r3, #85	; 0x55
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	3342      	adds	r3, #66	; 0x42
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017ee:	e034      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	212c      	movs	r1, #44	; 0x2c
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	3342      	adds	r3, #66	; 0x42
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
      break;
 8001802:	e02a      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3354      	adds	r3, #84	; 0x54
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	e016      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	212c      	movs	r1, #44	; 0x2c
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	3342      	adds	r3, #66	; 0x42
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
      break;
 800183e:	e00c      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3342      	adds	r3, #66	; 0x42
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e002      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001854:	bf00      	nop
 8001856:	e000      	b.n	800185a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001858:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	212c      	movs	r1, #44	; 0x2c
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	3344      	adds	r3, #68	; 0x44
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	8b3a      	ldrh	r2, [r7, #24]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	202c      	movs	r0, #44	; 0x2c
 8001874:	fb00 f303 	mul.w	r3, r0, r3
 8001878:	440b      	add	r3, r1
 800187a:	334c      	adds	r3, #76	; 0x4c
 800187c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3360      	adds	r3, #96	; 0x60
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3350      	adds	r3, #80	; 0x50
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	212c      	movs	r1, #44	; 0x2c
 80018a8:	fb01 f303 	mul.w	r3, r1, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	3339      	adds	r3, #57	; 0x39
 80018b0:	78fa      	ldrb	r2, [r7, #3]
 80018b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3361      	adds	r3, #97	; 0x61
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	222c      	movs	r2, #44	; 0x2c
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	3338      	adds	r3, #56	; 0x38
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	18d1      	adds	r1, r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	f003 fbaa 	bl	8005038 <USB_HC_StartXfer>
 80018e4:	4603      	mov	r3, r0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop

080018f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f8f7 	bl	8004afa <USB_GetMode>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	f040 80f6 	bne.w	8001b00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f8db 	bl	8004ad4 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ec 	beq.w	8001afe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f8d2 	bl	8004ad4 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f8c2 	bl	8004ad4 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800195a:	d104      	bne.n	8001966 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001964:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f8b2 	bl	8004ad4 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800197a:	d104      	bne.n	8001986 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001984:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 f8a2 	bl	8004ad4 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d103      	bne.n	80019a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f894 	bl	8004ad4 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b6:	d11c      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019d2:	2110      	movs	r1, #16
 80019d4:	6938      	ldr	r0, [r7, #16]
 80019d6:	f002 ffa3 	bl	8004920 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019da:	6938      	ldr	r0, [r7, #16]
 80019dc:	f002 ffc4 	bl	8004968 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f97c 	bl	8004ce4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f004 ff85 	bl	80068fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 f86c 	bl	8004ad4 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a06:	d102      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 f9e7 	bl	8002ddc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f85e 	bl	8004ad4 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d106      	bne.n	8001a30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f004 ff4e 	bl	80068c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f84d 	bl	8004ad4 <USB_ReadInterrupts>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d101      	bne.n	8001a48 <HAL_HCD_IRQHandler+0x158>
 8001a44:	2301      	movs	r3, #1
 8001a46:	e000      	b.n	8001a4a <HAL_HCD_IRQHandler+0x15a>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0210 	bic.w	r2, r2, #16
 8001a5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f001 f8ea 	bl	8002c38 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699a      	ldr	r2, [r3, #24]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0210 	orr.w	r2, r2, #16
 8001a72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 f82b 	bl	8004ad4 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a88:	d13a      	bne.n	8001b00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fc14 	bl	80052bc <USB_HC_ReadInterrupt>
 8001a94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e025      	b.n	8001ae8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	015a      	lsls	r2, r3, #5
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f88f 	bl	8001bf2 <HCD_HC_IN_IRQHandler>
 8001ad4:	e005      	b.n	8001ae2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fcaa 	bl	8002436 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d3d4      	bcc.n	8001a9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	e000      	b.n	8001b00 <HAL_HCD_IRQHandler+0x210>
      return;
 8001afe:	bf00      	nop
    }
  }
}
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_HCD_Start+0x16>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e013      	b.n	8001b44 <HAL_HCD_Start+0x3e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 f914 	bl	8004d58 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fe85 	bl	8004844 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_HCD_Stop+0x16>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e00d      	b.n	8001b7e <HAL_HCD_Stop+0x32>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fd0e 	bl	8005590 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3360      	adds	r3, #96	; 0x60
 8001ba0:	781b      	ldrb	r3, [r3, #0]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3350      	adds	r3, #80	; 0x50
 8001bc8:	681b      	ldr	r3, [r3, #0]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f908 	bl	8004df8 <USB_GetCurrentFrame>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	015a      	lsls	r2, r3, #5
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d119      	bne.n	8001c56 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2e:	461a      	mov	r2, r3
 8001c30:	2304      	movs	r3, #4
 8001c32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	0151      	lsls	r1, r2, #5
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	440a      	add	r2, r1
 8001c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	60d3      	str	r3, [r2, #12]
 8001c54:	e101      	b.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6c:	d12b      	bne.n	8001cc6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3361      	adds	r3, #97	; 0x61
 8001c90:	2207      	movs	r2, #7
 8001c92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	015a      	lsls	r2, r3, #5
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	0151      	lsls	r1, r2, #5
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	440a      	add	r2, r1
 8001caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 fb0d 	bl	80052de <USB_HC_Halt>
 8001cc4:	e0c9      	b.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b20      	cmp	r3, #32
 8001cda:	d109      	bne.n	8001cf0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2320      	movs	r3, #32
 8001cec:	6093      	str	r3, [r2, #8]
 8001cee:	e0b4      	b.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d133      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	0151      	lsls	r1, r2, #5
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	440a      	add	r2, r1
 8001d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3361      	adds	r3, #97	; 0x61
 8001d34:	2205      	movs	r2, #5
 8001d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2310      	movs	r3, #16
 8001d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2308      	movs	r3, #8
 8001d5a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fab9 	bl	80052de <USB_HC_Halt>
 8001d6c:	e075      	b.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	d134      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	3361      	adds	r3, #97	; 0x61
 8001db4:	2208      	movs	r2, #8
 8001db6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ddc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fa78 	bl	80052de <USB_HC_Halt>
 8001dee:	e034      	b.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d129      	bne.n	8001e5a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	0151      	lsls	r1, r2, #5
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	440a      	add	r2, r1
 8001e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3361      	adds	r3, #97	; 0x61
 8001e34:	2206      	movs	r2, #6
 8001e36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f003 fa4b 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e54:	461a      	mov	r2, r3
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e70:	d122      	bne.n	8001eb8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	0151      	lsls	r1, r2, #5
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	440a      	add	r2, r1
 8001e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fa1e 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001eb6:	e2ba      	b.n	800242e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	f040 811b 	bne.w	8002106 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d019      	beq.n	8001f0c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3348      	adds	r3, #72	; 0x48
 8001ee6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0159      	lsls	r1, r3, #5
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	440b      	add	r3, r1
 8001ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001efa:	1ad2      	subs	r2, r2, r3
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	202c      	movs	r0, #44	; 0x2c
 8001f02:	fb00 f303 	mul.w	r3, r0, r3
 8001f06:	440b      	add	r3, r1
 8001f08:	3350      	adds	r3, #80	; 0x50
 8001f0a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3361      	adds	r3, #97	; 0x61
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	212c      	movs	r1, #44	; 0x2c
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	335c      	adds	r3, #92	; 0x5c
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2301      	movs	r3, #1
 8001f40:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	333f      	adds	r3, #63	; 0x3f
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	333f      	adds	r3, #63	; 0x3f
 8001f64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d121      	bne.n	8001fae <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	015a      	lsls	r2, r3, #5
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	0151      	lsls	r1, r2, #5
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	440a      	add	r2, r1
 8001f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 f9a2 	bl	80052de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2310      	movs	r3, #16
 8001faa:	6093      	str	r3, [r2, #8]
 8001fac:	e066      	b.n	800207c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	333f      	adds	r3, #63	; 0x3f
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d127      	bne.n	8002012 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	0151      	lsls	r1, r2, #5
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fe0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3360      	adds	r3, #96	; 0x60
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	b2d9      	uxtb	r1, r3
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	202c      	movs	r0, #44	; 0x2c
 8001ffe:	fb00 f303 	mul.w	r3, r0, r3
 8002002:	4413      	add	r3, r2
 8002004:	3360      	adds	r3, #96	; 0x60
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f004 fc84 	bl	8006918 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002010:	e034      	b.n	800207c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	333f      	adds	r3, #63	; 0x3f
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d12a      	bne.n	800207c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	3354      	adds	r3, #84	; 0x54
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	f083 0301 	eor.w	r3, r3, #1
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3354      	adds	r3, #84	; 0x54
 800205c:	4602      	mov	r2, r0
 800205e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2d9      	uxtb	r1, r3
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	202c      	movs	r0, #44	; 0x2c
 800206a:	fb00 f303 	mul.w	r3, r0, r3
 800206e:	4413      	add	r3, r2
 8002070:	3360      	adds	r3, #96	; 0x60
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f004 fc4e 	bl	8006918 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d12b      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3348      	adds	r3, #72	; 0x48
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	202c      	movs	r0, #44	; 0x2c
 800209a:	fb00 f202 	mul.w	r2, r0, r2
 800209e:	440a      	add	r2, r1
 80020a0:	3240      	adds	r2, #64	; 0x40
 80020a2:	8812      	ldrh	r2, [r2, #0]
 80020a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 81be 	beq.w	800242e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3354      	adds	r3, #84	; 0x54
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f083 0301 	eor.w	r3, r3, #1
 80020c6:	b2d8      	uxtb	r0, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	212c      	movs	r1, #44	; 0x2c
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	4413      	add	r3, r2
 80020d4:	3354      	adds	r3, #84	; 0x54
 80020d6:	4602      	mov	r2, r0
 80020d8:	701a      	strb	r2, [r3, #0]
}
 80020da:	e1a8      	b.n	800242e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3354      	adds	r3, #84	; 0x54
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2d8      	uxtb	r0, r3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3354      	adds	r3, #84	; 0x54
 8002100:	4602      	mov	r2, r0
 8002102:	701a      	strb	r2, [r3, #0]
}
 8002104:	e193      	b.n	800242e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	f040 8106 	bne.w	800232a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	0151      	lsls	r1, r2, #5
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	440a      	add	r2, r1
 8002134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002138:	f023 0302 	bic.w	r3, r3, #2
 800213c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3361      	adds	r3, #97	; 0x61
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d109      	bne.n	8002166 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3360      	adds	r3, #96	; 0x60
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e0c9      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d109      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
 800218c:	e0b5      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3361      	adds	r3, #97	; 0x61
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d009      	beq.n	80021b6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3361      	adds	r3, #97	; 0x61
 80021b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d150      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	202c      	movs	r0, #44	; 0x2c
 80021ce:	fb00 f303 	mul.w	r3, r0, r3
 80021d2:	440b      	add	r3, r1
 80021d4:	335c      	adds	r3, #92	; 0x5c
 80021d6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	335c      	adds	r3, #92	; 0x5c
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d912      	bls.n	8002212 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	335c      	adds	r3, #92	; 0x5c
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3360      	adds	r3, #96	; 0x60
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002210:	e073      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800223a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002242:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002256:	e050      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3361      	adds	r3, #97	; 0x61
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d122      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3360      	adds	r3, #96	; 0x60
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002294:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800229c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e023      	b.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d119      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	202c      	movs	r0, #44	; 0x2c
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	440b      	add	r3, r1
 80022e4:	335c      	adds	r3, #92	; 0x5c
 80022e6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	2204      	movs	r2, #4
 80022f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	2302      	movs	r3, #2
 800230a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	b2d9      	uxtb	r1, r3
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	202c      	movs	r0, #44	; 0x2c
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	4413      	add	r3, r2
 800231c:	3360      	adds	r3, #96	; 0x60
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f004 faf8 	bl	8006918 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002328:	e081      	b.n	800242e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d176      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	333f      	adds	r3, #63	; 0x3f
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d121      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	335c      	adds	r3, #92	; 0x5c
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	015a      	lsls	r2, r3, #5
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4413      	add	r3, r2
 800236e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	0151      	lsls	r1, r2, #5
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	440a      	add	r2, r1
 800237c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f002 ffa4 	bl	80052de <USB_HC_Halt>
 8002396:	e041      	b.n	800241c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	333f      	adds	r3, #63	; 0x3f
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d009      	beq.n	80023c0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	212c      	movs	r1, #44	; 0x2c
 80023b2:	fb01 f303 	mul.w	r3, r1, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	333f      	adds	r3, #63	; 0x3f
 80023ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d12d      	bne.n	800241c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	335c      	adds	r3, #92	; 0x5c
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d120      	bne.n	800241c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3361      	adds	r3, #97	; 0x61
 80023e8:	2203      	movs	r2, #3
 80023ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	440a      	add	r2, r1
 8002402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f002 ff61 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	461a      	mov	r2, r3
 800242a:	2310      	movs	r3, #16
 800242c:	6093      	str	r3, [r2, #8]
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b088      	sub	sp, #32
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d119      	bne.n	800249a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	015a      	lsls	r2, r3, #5
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4413      	add	r3, r2
 800246e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002472:	461a      	mov	r2, r3
 8002474:	2304      	movs	r3, #4
 8002476:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	0151      	lsls	r1, r2, #5
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	440a      	add	r2, r1
 800248e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002498:	e3ca      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d13e      	bne.n	800252e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2320      	movs	r3, #32
 80024c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333d      	adds	r3, #61	; 0x3d
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 83ac 	bne.w	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333d      	adds	r3, #61	; 0x3d
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	015a      	lsls	r2, r3, #5
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	4413      	add	r3, r2
 8002504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	0151      	lsls	r1, r2, #5
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	440a      	add	r2, r1
 8002512:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f002 fed9 	bl	80052de <USB_HC_Halt>
}
 800252c:	e380      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002544:	d122      	bne.n	800258c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	0151      	lsls	r1, r2, #5
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	440a      	add	r2, r1
 800255c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f002 feb4 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	461a      	mov	r2, r3
 8002584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002588:	6093      	str	r3, [r2, #8]
}
 800258a:	e351      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d150      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	335c      	adds	r3, #92	; 0x5c
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d111      	bne.n	80025ee <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	333d      	adds	r3, #61	; 0x3d
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	2340      	movs	r3, #64	; 0x40
 80025ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	0151      	lsls	r1, r2, #5
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	440a      	add	r2, r1
 8002604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fe60 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2301      	movs	r3, #1
 800262e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3361      	adds	r3, #97	; 0x61
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
}
 8002642:	e2f5      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	4413      	add	r3, r2
 800264c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d13c      	bne.n	80026d4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	3361      	adds	r3, #97	; 0x61
 8002668:	2204      	movs	r2, #4
 800266a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	333d      	adds	r3, #61	; 0x3d
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fe0f 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	461a      	mov	r2, r3
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	6093      	str	r3, [r2, #8]
}
 80026d2:	e2ad      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d12a      	bne.n	8002740 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2308      	movs	r3, #8
 80026fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	0151      	lsls	r1, r2, #5
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	440a      	add	r2, r1
 8002712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fdd9 	bl	80052de <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3361      	adds	r3, #97	; 0x61
 800273a:	2205      	movs	r2, #5
 800273c:	701a      	strb	r2, [r3, #0]
}
 800273e:	e277      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b10      	cmp	r3, #16
 8002754:	d150      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	335c      	adds	r3, #92	; 0x5c
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	2203      	movs	r2, #3
 8002778:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	333d      	adds	r3, #61	; 0x3d
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d112      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	333c      	adds	r3, #60	; 0x3c
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	333d      	adds	r3, #61	; 0x3d
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fd7d 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2310      	movs	r3, #16
 80027f4:	6093      	str	r3, [r2, #8]
}
 80027f6:	e21b      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d174      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d121      	bne.n	800285a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3361      	adds	r3, #97	; 0x61
 8002824:	2206      	movs	r2, #6
 8002826:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	0151      	lsls	r1, r2, #5
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	440a      	add	r2, r1
 800283e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fd43 	bl	80052de <USB_HC_Halt>
 8002858:	e044      	b.n	80028e4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	335c      	adds	r3, #92	; 0x5c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	202c      	movs	r0, #44	; 0x2c
 8002872:	fb00 f303 	mul.w	r3, r0, r3
 8002876:	440b      	add	r3, r1
 8002878:	335c      	adds	r3, #92	; 0x5c
 800287a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	335c      	adds	r3, #92	; 0x5c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d920      	bls.n	80028d2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	335c      	adds	r3, #92	; 0x5c
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	3360      	adds	r3, #96	; 0x60
 80028b0:	2204      	movs	r2, #4
 80028b2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	b2d9      	uxtb	r1, r3
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	202c      	movs	r0, #44	; 0x2c
 80028be:	fb00 f303 	mul.w	r3, r0, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f004 f824 	bl	8006918 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028d0:	e008      	b.n	80028e4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	3360      	adds	r3, #96	; 0x60
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	6093      	str	r3, [r2, #8]
}
 80028f6:	e19b      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	d134      	bne.n	800297a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f002 fccf 	bl	80052de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	461a      	mov	r2, r3
 800294e:	2310      	movs	r3, #16
 8002950:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002964:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2208      	movs	r2, #8
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	e15a      	b.n	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 814f 	bne.w	8002c30 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	0151      	lsls	r1, r2, #5
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	440a      	add	r2, r1
 80029a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ac:	f023 0302 	bic.w	r3, r3, #2
 80029b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d17d      	bne.n	8002ac2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	212c      	movs	r1, #44	; 0x2c
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	3360      	adds	r3, #96	; 0x60
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	333f      	adds	r3, #63	; 0x3f
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d00a      	beq.n	8002a02 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	333f      	adds	r3, #63	; 0x3f
 80029fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	f040 8100 	bne.w	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d113      	bne.n	8002a32 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	3355      	adds	r3, #85	; 0x55
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f083 0301 	eor.w	r3, r3, #1
 8002a1e:	b2d8      	uxtb	r0, r3
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3355      	adds	r3, #85	; 0x55
 8002a2e:	4602      	mov	r2, r0
 8002a30:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 80e3 	bne.w	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	334c      	adds	r3, #76	; 0x4c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80d8 	beq.w	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	334c      	adds	r3, #76	; 0x4c
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	202c      	movs	r0, #44	; 0x2c
 8002a68:	fb00 f202 	mul.w	r2, r0, r2
 8002a6c:	440a      	add	r2, r1
 8002a6e:	3240      	adds	r2, #64	; 0x40
 8002a70:	8812      	ldrh	r2, [r2, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	3b01      	subs	r3, #1
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	202c      	movs	r0, #44	; 0x2c
 8002a7c:	fb00 f202 	mul.w	r2, r0, r2
 8002a80:	440a      	add	r2, r1
 8002a82:	3240      	adds	r2, #64	; 0x40
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80b5 	beq.w	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3355      	adds	r3, #85	; 0x55
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	f083 0301 	eor.w	r3, r3, #1
 8002aac:	b2d8      	uxtb	r0, r3
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3355      	adds	r3, #85	; 0x55
 8002abc:	4602      	mov	r2, r0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e09f      	b.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3361      	adds	r3, #97	; 0x61
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d109      	bne.n	8002aea <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3360      	adds	r3, #96	; 0x60
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e08b      	b.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3361      	adds	r3, #97	; 0x61
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3360      	adds	r3, #96	; 0x60
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e077      	b.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3361      	adds	r3, #97	; 0x61
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d109      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3360      	adds	r3, #96	; 0x60
 8002b34:	2205      	movs	r2, #5
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e063      	b.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3361      	adds	r3, #97	; 0x61
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d009      	beq.n	8002b62 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3361      	adds	r3, #97	; 0x61
 8002b5c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d14f      	bne.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	202c      	movs	r0, #44	; 0x2c
 8002b7a:	fb00 f303 	mul.w	r3, r0, r3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335c      	adds	r3, #92	; 0x5c
 8002b82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	335c      	adds	r3, #92	; 0x5c
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d912      	bls.n	8002bbe <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3360      	adds	r3, #96	; 0x60
 8002bb8:	2204      	movs	r2, #4
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e021      	b.n	8002c02 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3360      	adds	r3, #96	; 0x60
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002be6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bee:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2302      	movs	r3, #2
 8002c12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	b2d9      	uxtb	r1, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	202c      	movs	r0, #44	; 0x2c
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f003 fe74 	bl	8006918 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c30:	bf00      	nop
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	0c5b      	lsrs	r3, r3, #17
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c6c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d004      	beq.n	8002c7e <HCD_RXQLVL_IRQHandler+0x46>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	f000 80a9 	beq.w	8002dce <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c7c:	e0aa      	b.n	8002dd4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a6 	beq.w	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3344      	adds	r3, #68	; 0x44
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 809b 	beq.w	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3350      	adds	r3, #80	; 0x50
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	441a      	add	r2, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	440b      	add	r3, r1
 8002cbc:	334c      	adds	r3, #76	; 0x4c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d87a      	bhi.n	8002dba <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3344      	adds	r3, #68	; 0x44
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	b292      	uxth	r2, r2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f001 fea1 	bl	8004a24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	3344      	adds	r3, #68	; 0x44
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	202c      	movs	r0, #44	; 0x2c
 8002cfc:	fb00 f303 	mul.w	r3, r0, r3
 8002d00:	440b      	add	r3, r1
 8002d02:	3344      	adds	r3, #68	; 0x44
 8002d04:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3350      	adds	r3, #80	; 0x50
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	441a      	add	r2, r3
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	202c      	movs	r0, #44	; 0x2c
 8002d20:	fb00 f303 	mul.w	r3, r0, r3
 8002d24:	440b      	add	r3, r1
 8002d26:	3350      	adds	r3, #80	; 0x50
 8002d28:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	0cdb      	lsrs	r3, r3, #19
 8002d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3340      	adds	r3, #64	; 0x40
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	461a      	mov	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d13c      	bne.n	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d039      	beq.n	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d74:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d7c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3354      	adds	r3, #84	; 0x54
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	f083 0301 	eor.w	r3, r3, #1
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3354      	adds	r3, #84	; 0x54
 8002db4:	4602      	mov	r2, r0
 8002db6:	701a      	strb	r2, [r3, #0]
      break;
 8002db8:	e00b      	b.n	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3360      	adds	r3, #96	; 0x60
 8002dc8:	2204      	movs	r2, #4
 8002dca:	701a      	strb	r2, [r3, #0]
      break;
 8002dcc:	e001      	b.n	8002dd2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dce:	bf00      	nop
 8002dd0:	e000      	b.n	8002dd4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002dd2:	bf00      	nop
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	3728      	adds	r7, #40	; 0x28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d10b      	bne.n	8002e2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f003 fd5e 	bl	80068e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d132      	bne.n	8002e9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d126      	bne.n	8002e96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d113      	bne.n	8002e78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e5a:	d106      	bne.n	8002e6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2102      	movs	r1, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 ff3e 	bl	8004ce4 <USB_InitFSLSPClkSel>
 8002e68:	e011      	b.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 ff37 	bl	8004ce4 <USB_InitFSLSPClkSel>
 8002e76:	e00a      	b.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e86:	461a      	mov	r2, r3
 8002e88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f003 fd50 	bl	8006934 <HAL_HCD_PortEnabled_Callback>
 8002e94:	e002      	b.n	8002e9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f003 fd5a 	bl	8006950 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d103      	bne.n	8002eae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6013      	str	r3, [r2, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e12b      	b.n	800312e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fd54 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f28:	f001 fa4e 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a81      	ldr	r2, [pc, #516]	; (8003138 <HAL_I2C_Init+0x274>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d807      	bhi.n	8002f48 <HAL_I2C_Init+0x84>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a80      	ldr	r2, [pc, #512]	; (800313c <HAL_I2C_Init+0x278>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e006      	b.n	8002f56 <HAL_I2C_Init+0x92>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a7d      	ldr	r2, [pc, #500]	; (8003140 <HAL_I2C_Init+0x27c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bf94      	ite	ls
 8002f50:	2301      	movls	r3, #1
 8002f52:	2300      	movhi	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0e7      	b.n	800312e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a78      	ldr	r2, [pc, #480]	; (8003144 <HAL_I2C_Init+0x280>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0c9b      	lsrs	r3, r3, #18
 8002f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a6a      	ldr	r2, [pc, #424]	; (8003138 <HAL_I2C_Init+0x274>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d802      	bhi.n	8002f98 <HAL_I2C_Init+0xd4>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e009      	b.n	8002fac <HAL_I2C_Init+0xe8>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_I2C_Init+0x284>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	495c      	ldr	r1, [pc, #368]	; (8003138 <HAL_I2C_Init+0x274>)
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d819      	bhi.n	8003000 <HAL_I2C_Init+0x13c>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e59      	subs	r1, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fda:	1c59      	adds	r1, r3, #1
 8002fdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fe0:	400b      	ands	r3, r1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_I2C_Init+0x138>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e59      	subs	r1, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffa:	e051      	b.n	80030a0 <HAL_I2C_Init+0x1dc>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	e04f      	b.n	80030a0 <HAL_I2C_Init+0x1dc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d111      	bne.n	800302c <HAL_I2C_Init+0x168>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	440b      	add	r3, r1
 8003016:	fbb0 f3f3 	udiv	r3, r0, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	e012      	b.n	8003052 <HAL_I2C_Init+0x18e>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1e58      	subs	r0, r3, #1
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	0099      	lsls	r1, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x196>
 8003056:	2301      	movs	r3, #1
 8003058:	e022      	b.n	80030a0 <HAL_I2C_Init+0x1dc>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10e      	bne.n	8003080 <HAL_I2C_Init+0x1bc>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e58      	subs	r0, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	440b      	add	r3, r1
 8003070:	fbb0 f3f3 	udiv	r3, r0, r3
 8003074:	3301      	adds	r3, #1
 8003076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800307e:	e00f      	b.n	80030a0 <HAL_I2C_Init+0x1dc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	fbb0 f3f3 	udiv	r3, r0, r3
 8003096:	3301      	adds	r3, #1
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	6809      	ldr	r1, [r1, #0]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6911      	ldr	r1, [r2, #16]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68d2      	ldr	r2, [r2, #12]
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	000186a0 	.word	0x000186a0
 800313c:	001e847f 	.word	0x001e847f
 8003140:	003d08ff 	.word	0x003d08ff
 8003144:	431bde83 	.word	0x431bde83
 8003148:	10624dd3 	.word	0x10624dd3

0800314c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e128      	b.n	80033b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a90      	ldr	r2, [pc, #576]	; (80033b8 <HAL_I2S_Init+0x26c>)
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd fc55 	bl	8000a28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003194:	f023 030f 	bic.w	r3, r3, #15
 8003198:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2202      	movs	r2, #2
 80031a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d060      	beq.n	800326c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031b2:	2310      	movs	r3, #16
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e001      	b.n	80031bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d802      	bhi.n	80031ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031ca:	2001      	movs	r0, #1
 80031cc:	f001 f9f2 	bl	80045b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80031d0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031da:	d125      	bne.n	8003228 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d010      	beq.n	8003206 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	3305      	adds	r3, #5
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	e01f      	b.n	8003246 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	3305      	adds	r3, #5
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e00e      	b.n	8003246 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	3305      	adds	r3, #5
 8003244:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4a5c      	ldr	r2, [pc, #368]	; (80033bc <HAL_I2S_Init+0x270>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	08db      	lsrs	r3, r3, #3
 8003250:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	021b      	lsls	r3, r3, #8
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	e003      	b.n	8003274 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800326c:	2302      	movs	r3, #2
 800326e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d902      	bls.n	8003280 <HAL_I2S_Init+0x134>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2bff      	cmp	r3, #255	; 0xff
 800327e:	d907      	bls.n	8003290 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e08f      	b.n	80033b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	ea42 0103 	orr.w	r1, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6851      	ldr	r1, [r2, #4]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6892      	ldr	r2, [r2, #8]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68d2      	ldr	r2, [r2, #12]
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6992      	ldr	r2, [r2, #24]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d161      	bne.n	80033a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <HAL_I2S_Init+0x274>)
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <HAL_I2S_Init+0x278>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d101      	bne.n	80032f0 <HAL_I2S_Init+0x1a4>
 80032ec:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_I2S_Init+0x27c>)
 80032ee:	e001      	b.n	80032f4 <HAL_I2S_Init+0x1a8>
 80032f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	4932      	ldr	r1, [pc, #200]	; (80033c4 <HAL_I2S_Init+0x278>)
 80032fc:	428a      	cmp	r2, r1
 80032fe:	d101      	bne.n	8003304 <HAL_I2S_Init+0x1b8>
 8003300:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_I2S_Init+0x27c>)
 8003302:	e001      	b.n	8003308 <HAL_I2S_Init+0x1bc>
 8003304:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003308:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800330c:	f023 030f 	bic.w	r3, r3, #15
 8003310:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_I2S_Init+0x278>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_I2S_Init+0x1d4>
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_I2S_Init+0x27c>)
 800331e:	e001      	b.n	8003324 <HAL_I2S_Init+0x1d8>
 8003320:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003324:	2202      	movs	r2, #2
 8003326:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <HAL_I2S_Init+0x278>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d101      	bne.n	8003336 <HAL_I2S_Init+0x1ea>
 8003332:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_I2S_Init+0x27c>)
 8003334:	e001      	b.n	800333a <HAL_I2S_Init+0x1ee>
 8003336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003346:	d003      	beq.n	8003350 <HAL_I2S_Init+0x204>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003350:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	e001      	b.n	800335c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003366:	4313      	orrs	r3, r2
 8003368:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003370:	4313      	orrs	r3, r2
 8003372:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800337a:	4313      	orrs	r3, r2
 800337c:	b29a      	uxth	r2, r3
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	4313      	orrs	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003388:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a0d      	ldr	r2, [pc, #52]	; (80033c4 <HAL_I2S_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_I2S_Init+0x24c>
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_I2S_Init+0x27c>)
 8003396:	e001      	b.n	800339c <HAL_I2S_Init+0x250>
 8003398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339c:	897a      	ldrh	r2, [r7, #10]
 800339e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3720      	adds	r7, #32
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	080034c3 	.word	0x080034c3
 80033bc:	cccccccd 	.word	0xcccccccd
 80033c0:	080035d9 	.word	0x080035d9
 80033c4:	40003800 	.word	0x40003800
 80033c8:	40003400 	.word	0x40003400

080033cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	881a      	ldrh	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800344c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffb8 	bl	80033cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	b292      	uxth	r2, r2
 8003478:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10e      	bne.n	80034ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff93 	bl	80033e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d13a      	bne.n	8003554 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d109      	bne.n	80034fc <I2S_IRQHandler+0x3a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b40      	cmp	r3, #64	; 0x40
 80034f4:	d102      	bne.n	80034fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffb4 	bl	8003464 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d126      	bne.n	8003554 <I2S_IRQHandler+0x92>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d11f      	bne.n	8003554 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003522:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ff50 	bl	80033f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b03      	cmp	r3, #3
 800355e:	d136      	bne.n	80035ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b02      	cmp	r3, #2
 8003568:	d109      	bne.n	800357e <I2S_IRQHandler+0xbc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d102      	bne.n	800357e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff45 	bl	8003408 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b08      	cmp	r3, #8
 8003586:	d122      	bne.n	80035ce <I2S_IRQHandler+0x10c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b20      	cmp	r3, #32
 8003594:	d11b      	bne.n	80035ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff13 	bl	80033f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ce:	bf00      	nop
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4aa2      	ldr	r2, [pc, #648]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035f2:	4ba2      	ldr	r3, [pc, #648]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f4:	e001      	b.n	80035fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a9b      	ldr	r2, [pc, #620]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d101      	bne.n	8003614 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003610:	4b9a      	ldr	r3, [pc, #616]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003612:	e001      	b.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003624:	d004      	beq.n	8003630 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f040 8099 	bne.w	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f925 	bl	8003894 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9c8 	bl	80039f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	2b40      	cmp	r3, #64	; 0x40
 800366c:	d13a      	bne.n	80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0320 	and.w	r3, r3, #32
 8003674:	2b00      	cmp	r3, #0
 8003676:	d035      	beq.n	80036e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a7e      	ldr	r2, [pc, #504]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003682:	4b7e      	ldr	r3, [pc, #504]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003684:	e001      	b.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4979      	ldr	r1, [pc, #484]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003692:	428b      	cmp	r3, r1
 8003694:	d101      	bne.n	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003696:	4b79      	ldr	r3, [pc, #484]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003698:	e001      	b.n	800369e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800369a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d6:	f043 0202 	orr.w	r2, r3, #2
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fe88 	bl	80033f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	f040 80be 	bne.w	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80b8 	beq.w	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800370a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a59      	ldr	r2, [pc, #356]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003718:	e001      	b.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4954      	ldr	r1, [pc, #336]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003726:	428b      	cmp	r3, r1
 8003728:	d101      	bne.n	800372e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800372c:	e001      	b.n	8003732 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800372e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003736:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003738:	2300      	movs	r3, #0
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f043 0204 	orr.w	r2, r3, #4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe4a 	bl	80033f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003760:	e084      	b.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b02      	cmp	r3, #2
 800376a:	d107      	bne.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8be 	bl	80038f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f8fd 	bl	8003990 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d12f      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02a      	beq.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2e      	ldr	r2, [pc, #184]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037c4:	4b2d      	ldr	r3, [pc, #180]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c6:	e001      	b.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4929      	ldr	r1, [pc, #164]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d101      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037d8:	4b28      	ldr	r3, [pc, #160]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037da:	e001      	b.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fdfa 	bl	80033f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b08      	cmp	r3, #8
 8003808:	d131      	bne.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02c      	beq.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003820:	e001      	b.n	8003826 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4912      	ldr	r1, [pc, #72]	; (8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800382e:	428b      	cmp	r3, r1
 8003830:	d101      	bne.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003834:	e001      	b.n	800383a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800383a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800383e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800384e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0204 	orr.w	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fdc5 	bl	80033f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800386a:	e000      	b.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800386c:	bf00      	nop
}
 800386e:	bf00      	nop
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40003800 	.word	0x40003800
 800387c:	40003400 	.word	0x40003400

08003880 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c99      	adds	r1, r3, #2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6251      	str	r1, [r2, #36]	; 0x24
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d113      	bne.n	80038ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ffc9 	bl	8003880 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c99      	adds	r1, r3, #2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6251      	str	r1, [r2, #36]	; 0x24
 800390a:	8819      	ldrh	r1, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <I2SEx_TxISR_I2SExt+0x90>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <I2SEx_TxISR_I2SExt+0x22>
 8003916:	4b1d      	ldr	r3, [pc, #116]	; (800398c <I2SEx_TxISR_I2SExt+0x94>)
 8003918:	e001      	b.n	800391e <I2SEx_TxISR_I2SExt+0x26>
 800391a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391e:	460a      	mov	r2, r1
 8003920:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d121      	bne.n	800397e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a12      	ldr	r2, [pc, #72]	; (8003988 <I2SEx_TxISR_I2SExt+0x90>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <I2SEx_TxISR_I2SExt+0x50>
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <I2SEx_TxISR_I2SExt+0x94>)
 8003946:	e001      	b.n	800394c <I2SEx_TxISR_I2SExt+0x54>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	490d      	ldr	r1, [pc, #52]	; (8003988 <I2SEx_TxISR_I2SExt+0x90>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d101      	bne.n	800395c <I2SEx_TxISR_I2SExt+0x64>
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <I2SEx_TxISR_I2SExt+0x94>)
 800395a:	e001      	b.n	8003960 <I2SEx_TxISR_I2SExt+0x68>
 800395c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003964:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff81 	bl	8003880 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40003800 	.word	0x40003800
 800398c:	40003400 	.word	0x40003400

08003990 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68d8      	ldr	r0, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	1c99      	adds	r1, r3, #2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039a8:	b282      	uxth	r2, r0
 80039aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d113      	bne.n	80039ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff4a 	bl	8003880 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a20      	ldr	r2, [pc, #128]	; (8003a84 <I2SEx_RxISR_I2SExt+0x90>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <I2SEx_RxISR_I2SExt+0x16>
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <I2SEx_RxISR_I2SExt+0x94>)
 8003a08:	e001      	b.n	8003a0e <I2SEx_RxISR_I2SExt+0x1a>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0e:	68d8      	ldr	r0, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	1c99      	adds	r1, r3, #2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a1a:	b282      	uxth	r2, r0
 8003a1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d121      	bne.n	8003a7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <I2SEx_RxISR_I2SExt+0x90>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <I2SEx_RxISR_I2SExt+0x50>
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <I2SEx_RxISR_I2SExt+0x94>)
 8003a42:	e001      	b.n	8003a48 <I2SEx_RxISR_I2SExt+0x54>
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	490d      	ldr	r1, [pc, #52]	; (8003a84 <I2SEx_RxISR_I2SExt+0x90>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d101      	bne.n	8003a58 <I2SEx_RxISR_I2SExt+0x64>
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <I2SEx_RxISR_I2SExt+0x94>)
 8003a56:	e001      	b.n	8003a5c <I2SEx_RxISR_I2SExt+0x68>
 8003a58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff03 	bl	8003880 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40003800 	.word	0x40003800
 8003a88:	40003400 	.word	0x40003400

08003a8c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e034      	b.n	8003b08 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f245 5255 	movw	r2, #21845	; 0x5555
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6852      	ldr	r2, [r2, #4]
 8003aba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003ac6:	f7fd f999 	bl	8000dfc <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003acc:	e00f      	b.n	8003aee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003ace:	f7fd f995 	bl	8000dfc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b31      	cmp	r3, #49	; 0x31
 8003ada:	d908      	bls.n	8003aee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e00c      	b.n	8003b08 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e8      	bne.n	8003ace <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e264      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d075      	beq.n	8003c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4e:	4ba3      	ldr	r3, [pc, #652]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d00c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b5a:	4ba0      	ldr	r3, [pc, #640]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d112      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4b9d      	ldr	r3, [pc, #628]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	4b99      	ldr	r3, [pc, #612]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x108>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d157      	bne.n	8003c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e23f      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x74>
 8003b96:	4b91      	ldr	r3, [pc, #580]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a90      	ldr	r2, [pc, #576]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x98>
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a8a      	ldr	r2, [pc, #552]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a87      	ldr	r2, [pc, #540]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xb0>
 8003bc8:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a83      	ldr	r2, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b81      	ldr	r3, [pc, #516]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a80      	ldr	r2, [pc, #512]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fd f908 	bl	8000dfc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd f904 	bl	8000dfc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e204      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b76      	ldr	r3, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xc0>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fd f8f4 	bl	8000dfc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fd f8f0 	bl	8000dfc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1f0      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b6c      	ldr	r3, [pc, #432]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0xe8>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c46:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b62      	ldr	r3, [pc, #392]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b5c      	ldr	r3, [pc, #368]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1c4      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4952      	ldr	r1, [pc, #328]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <HAL_RCC_OscConfig+0x2b0>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd f8a9 	bl	8000dfc <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fd f8a5 	bl	8000dfc <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e1a5      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4940      	ldr	r1, [pc, #256]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_OscConfig+0x2b0>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd f888 	bl	8000dfc <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fd f884 	bl	8000dfc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e184      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b36      	ldr	r3, [pc, #216]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d030      	beq.n	8003d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d016      	beq.n	8003d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b30      	ldr	r3, [pc, #192]	; (8003de4 <HAL_RCC_OscConfig+0x2b4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fd f868 	bl	8000dfc <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fd f864 	bl	8000dfc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e164      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x200>
 8003d4e:	e015      	b.n	8003d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_RCC_OscConfig+0x2b4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d56:	f7fd f851 	bl	8000dfc <HAL_GetTick>
 8003d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5e:	f7fd f84d 	bl	8000dfc <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e14d      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a0 	beq.w	8003eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db6:	2301      	movs	r3, #1
 8003db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d121      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <HAL_RCC_OscConfig+0x2b8>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd2:	f7fd f813 	bl	8000dfc <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	e011      	b.n	8003dfe <HAL_RCC_OscConfig+0x2ce>
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	42470000 	.word	0x42470000
 8003de4:	42470e80 	.word	0x42470e80
 8003de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fd f806 	bl	8000dfc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e106      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfe:	4b85      	ldr	r3, [pc, #532]	; (8004014 <HAL_RCC_OscConfig+0x4e4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_OscConfig+0x2f0>
 8003e12:	4b81      	ldr	r3, [pc, #516]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a80      	ldr	r2, [pc, #512]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	e01c      	b.n	8003e5a <HAL_RCC_OscConfig+0x32a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x312>
 8003e28:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a7a      	ldr	r2, [pc, #488]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e2e:	f043 0304 	orr.w	r3, r3, #4
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
 8003e34:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a77      	ldr	r2, [pc, #476]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	e00b      	b.n	8003e5a <HAL_RCC_OscConfig+0x32a>
 8003e42:	4b75      	ldr	r3, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a74      	ldr	r2, [pc, #464]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	4b72      	ldr	r3, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a71      	ldr	r2, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	f023 0304 	bic.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d015      	beq.n	8003e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fc ffcb 	bl	8000dfc <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fc ffc7 	bl	8000dfc <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0c5      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	4b65      	ldr	r3, [pc, #404]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ee      	beq.n	8003e6a <HAL_RCC_OscConfig+0x33a>
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8e:	f7fc ffb5 	bl	8000dfc <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fc ffb1 	bl	8000dfc <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e0af      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	4b5a      	ldr	r3, [pc, #360]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1ee      	bne.n	8003e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	4a55      	ldr	r2, [pc, #340]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 809b 	beq.w	800400a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed4:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 030c 	and.w	r3, r3, #12
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d05c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d141      	bne.n	8003f6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee8:	4b4c      	ldr	r3, [pc, #304]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eee:	f7fc ff85 	bl	8000dfc <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fc ff81 	bl	8000dfc <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e081      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	019b      	lsls	r3, r3, #6
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	4937      	ldr	r1, [pc, #220]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fc ff5a 	bl	8000dfc <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fc ff56 	bl	8000dfc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e056      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x41c>
 8003f6a:	e04e      	b.n	800400a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x4ec>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fc ff43 	bl	8000dfc <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fc ff3f 	bl	8000dfc <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e03f      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x44a>
 8003f98:	e037      	b.n	800400a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e032      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <HAL_RCC_OscConfig+0x4e8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d028      	beq.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d121      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d11a      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d111      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40007000 	.word	0x40007000
 8004018:	40023800 	.word	0x40023800
 800401c:	42470060 	.word	0x42470060

08004020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0cc      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004034:	4b68      	ldr	r3, [pc, #416]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d90c      	bls.n	800405c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b63      	ldr	r3, [pc, #396]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0b8      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d020      	beq.n	80040aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004074:	4b59      	ldr	r3, [pc, #356]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800407e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b50      	ldr	r3, [pc, #320]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	494d      	ldr	r1, [pc, #308]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d044      	beq.n	8004140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d119      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e07f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d003      	beq.n	80040de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b3f      	ldr	r3, [pc, #252]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d109      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e06f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	4b3b      	ldr	r3, [pc, #236]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e067      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040fe:	4b37      	ldr	r3, [pc, #220]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f023 0203 	bic.w	r2, r3, #3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4934      	ldr	r1, [pc, #208]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004110:	f7fc fe74 	bl	8000dfc <HAL_GetTick>
 8004114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	e00a      	b.n	800412e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004118:	f7fc fe70 	bl	8000dfc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f241 3288 	movw	r2, #5000	; 0x1388
 8004126:	4293      	cmp	r3, r2
 8004128:	d901      	bls.n	800412e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e04f      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 020c 	and.w	r2, r3, #12
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	429a      	cmp	r2, r3
 800413e:	d1eb      	bne.n	8004118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d20c      	bcs.n	8004168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e032      	b.n	80041ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004174:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4916      	ldr	r1, [pc, #88]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	490e      	ldr	r1, [pc, #56]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041a6:	f000 f821 	bl	80041ec <HAL_RCC_GetSysClockFreq>
 80041aa:	4602      	mov	r2, r0
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	490a      	ldr	r1, [pc, #40]	; (80041e0 <HAL_RCC_ClockConfig+0x1c0>)
 80041b8:	5ccb      	ldrb	r3, [r1, r3]
 80041ba:	fa22 f303 	lsr.w	r3, r2, r3
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fc fdd4 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08006ee8 	.word	0x08006ee8
 80041e4:	20000000 	.word	0x20000000
 80041e8:	20000004 	.word	0x20000004

080041ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004204:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 030c 	and.w	r3, r3, #12
 800420c:	2b08      	cmp	r3, #8
 800420e:	d00d      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x40>
 8004210:	2b08      	cmp	r3, #8
 8004212:	f200 80bd 	bhi.w	8004390 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x34>
 800421a:	2b04      	cmp	r3, #4
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x3a>
 800421e:	e0b7      	b.n	8004390 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004222:	60bb      	str	r3, [r7, #8]
       break;
 8004224:	e0b7      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004228:	60bb      	str	r3, [r7, #8]
      break;
 800422a:	e0b4      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800422c:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004234:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004236:	4b5b      	ldr	r3, [pc, #364]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04d      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004242:	4b58      	ldr	r3, [pc, #352]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	461a      	mov	r2, r3
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	ea02 0800 	and.w	r8, r2, r0
 800425a:	ea03 0901 	and.w	r9, r3, r1
 800425e:	4640      	mov	r0, r8
 8004260:	4649      	mov	r1, r9
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	014b      	lsls	r3, r1, #5
 800426c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004270:	0142      	lsls	r2, r0, #5
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	ebb0 0008 	subs.w	r0, r0, r8
 800427a:	eb61 0109 	sbc.w	r1, r1, r9
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	018b      	lsls	r3, r1, #6
 8004288:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428c:	0182      	lsls	r2, r0, #6
 800428e:	1a12      	subs	r2, r2, r0
 8004290:	eb63 0301 	sbc.w	r3, r3, r1
 8004294:	f04f 0000 	mov.w	r0, #0
 8004298:	f04f 0100 	mov.w	r1, #0
 800429c:	00d9      	lsls	r1, r3, #3
 800429e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a2:	00d0      	lsls	r0, r2, #3
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	eb12 0208 	adds.w	r2, r2, r8
 80042ac:	eb43 0309 	adc.w	r3, r3, r9
 80042b0:	f04f 0000 	mov.w	r0, #0
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	0259      	lsls	r1, r3, #9
 80042ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042be:	0250      	lsls	r0, r2, #9
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f7fb ff7a 	bl	80001c8 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	e04a      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	461a      	mov	r2, r3
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	ea02 0400 	and.w	r4, r2, r0
 80042f6:	ea03 0501 	and.w	r5, r3, r1
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	014b      	lsls	r3, r1, #5
 8004308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800430c:	0142      	lsls	r2, r0, #5
 800430e:	4610      	mov	r0, r2
 8004310:	4619      	mov	r1, r3
 8004312:	1b00      	subs	r0, r0, r4
 8004314:	eb61 0105 	sbc.w	r1, r1, r5
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	018b      	lsls	r3, r1, #6
 8004322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004326:	0182      	lsls	r2, r0, #6
 8004328:	1a12      	subs	r2, r2, r0
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	f04f 0000 	mov.w	r0, #0
 8004332:	f04f 0100 	mov.w	r1, #0
 8004336:	00d9      	lsls	r1, r3, #3
 8004338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800433c:	00d0      	lsls	r0, r2, #3
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	1912      	adds	r2, r2, r4
 8004344:	eb45 0303 	adc.w	r3, r5, r3
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	0299      	lsls	r1, r3, #10
 8004352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004356:	0290      	lsls	r0, r2, #10
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	f7fb ff2e 	bl	80001c8 <__aeabi_uldivmod>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4613      	mov	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	0c1b      	lsrs	r3, r3, #16
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	3301      	adds	r3, #1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	60bb      	str	r3, [r7, #8]
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004392:	60bb      	str	r3, [r7, #8]
      break;
 8004394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004396:	68bb      	ldr	r3, [r7, #8]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	00f42400 	.word	0x00f42400
 80043ac:	007a1200 	.word	0x007a1200

080043b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000000 	.word	0x20000000

080043c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043cc:	f7ff fff0 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	0a9b      	lsrs	r3, r3, #10
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	4903      	ldr	r1, [pc, #12]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80043de:	5ccb      	ldrb	r3, [r1, r3]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40023800 	.word	0x40023800
 80043ec:	08006ef8 	.word	0x08006ef8

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004414:	2b00      	cmp	r3, #0
 8004416:	d035      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004418:	4b62      	ldr	r3, [pc, #392]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800441e:	f7fc fced 	bl	8000dfc <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004426:	f7fc fce9 	bl	8000dfc <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0b0      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004438:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f0      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	019a      	lsls	r2, r3, #6
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	4955      	ldr	r1, [pc, #340]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004458:	4b52      	ldr	r3, [pc, #328]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800445e:	f7fc fccd 	bl	8000dfc <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004466:	f7fc fcc9 	bl	8000dfc <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e090      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004478:	4b4b      	ldr	r3, [pc, #300]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 8083 	beq.w	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b44      	ldr	r3, [pc, #272]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a43      	ldr	r2, [pc, #268]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b41      	ldr	r3, [pc, #260]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3e      	ldr	r2, [pc, #248]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044ba:	f7fc fc9f 	bl	8000dfc <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044c2:	f7fc fc9b 	bl	8000dfc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e062      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044e0:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02f      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d028      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004508:	4b29      	ldr	r3, [pc, #164]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b28      	ldr	r3, [pc, #160]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004514:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d114      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004526:	f7fc fc69 	bl	8000dfc <HAL_GetTick>
 800452a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	e00a      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452e:	f7fc fc65 	bl	8000dfc <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	f241 3288 	movw	r2, #5000	; 0x1388
 800453c:	4293      	cmp	r3, r2
 800453e:	d901      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e02a      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004544:	4b18      	ldr	r3, [pc, #96]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ee      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455c:	d10d      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800455e:	4b12      	ldr	r3, [pc, #72]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	490d      	ldr	r1, [pc, #52]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]
 8004578:	e005      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4a0a      	ldr	r2, [pc, #40]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004584:	6093      	str	r3, [r2, #8]
 8004586:	4b08      	ldr	r3, [pc, #32]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004592:	4905      	ldr	r1, [pc, #20]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	42470068 	.word	0x42470068
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40007000 	.word	0x40007000
 80045b0:	42470e40 	.word	0x42470e40

080045b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d13e      	bne.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d12f      	bne.n	8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ea:	617b      	str	r3, [r7, #20]
          break;
 80045ec:	e02f      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045ee:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fa:	d108      	bne.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045fc:	4b18      	ldr	r3, [pc, #96]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	4a18      	ldr	r2, [pc, #96]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e007      	b.n	800461e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800460e:	4b14      	ldr	r3, [pc, #80]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	fb02 f303 	mul.w	r3, r2, r3
 8004630:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004638:	0f1b      	lsrs	r3, r3, #28
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
          break;
 8004646:	e002      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
          break;
 800464c:	bf00      	nop
        }
      }
      break;
 800464e:	bf00      	nop
    }
  }
  return frequency;
 8004650:	697b      	ldr	r3, [r7, #20]
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	00bb8000 	.word	0x00bb8000
 8004668:	007a1200 	.word	0x007a1200
 800466c:	00f42400 	.word	0x00f42400

08004670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e07b      	b.n	800477a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	d108      	bne.n	800469c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004692:	d009      	beq.n	80046a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	61da      	str	r2, [r3, #28]
 800469a:	e005      	b.n	80046a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fa30 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	ea42 0103 	orr.w	r1, r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	f003 0104 	and.w	r1, r3, #4
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	f003 0210 	and.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004782:	b084      	sub	sp, #16
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	f107 001c 	add.w	r0, r7, #28
 8004790:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	2b01      	cmp	r3, #1
 8004798:	d122      	bne.n	80047e0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d105      	bne.n	80047d4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f99f 	bl	8004b18 <USB_CoreReset>
 80047da:	4603      	mov	r3, r0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e01a      	b.n	8004816 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f993 	bl	8004b18 <USB_CoreReset>
 80047f2:	4603      	mov	r3, r0
 80047f4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
 8004808:	e005      	b.n	8004816 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10b      	bne.n	8004834 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f043 0206 	orr.w	r2, r3, #6
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004840:	b004      	add	sp, #16
 8004842:	4770      	bx	lr

08004844 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f023 0201 	bic.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d115      	bne.n	80048d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b6:	2001      	movs	r0, #1
 80048b8:	f7fc faac 	bl	8000e14 <HAL_Delay>
      ms++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f919 	bl	8004afa <USB_GetMode>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d01e      	beq.n	800490c <USB_SetCurrentMode+0x84>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b31      	cmp	r3, #49	; 0x31
 80048d2:	d9f0      	bls.n	80048b6 <USB_SetCurrentMode+0x2e>
 80048d4:	e01a      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d115      	bne.n	8004908 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fc fa93 	bl	8000e14 <HAL_Delay>
      ms++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f900 	bl	8004afa <USB_GetMode>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <USB_SetCurrentMode+0x84>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b31      	cmp	r3, #49	; 0x31
 8004904:	d9f0      	bls.n	80048e8 <USB_SetCurrentMode+0x60>
 8004906:	e001      	b.n	800490c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e005      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b32      	cmp	r3, #50	; 0x32
 8004910:	d101      	bne.n	8004916 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	019b      	lsls	r3, r3, #6
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	4a08      	ldr	r2, [pc, #32]	; (8004964 <USB_FlushTxFifo+0x44>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e006      	b.n	8004958 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b20      	cmp	r3, #32
 8004954:	d0f1      	beq.n	800493a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	00030d40 	.word	0x00030d40

08004968 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2210      	movs	r2, #16
 8004978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <USB_FlushRxFifo+0x3c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e006      	b.n	8004998 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b10      	cmp	r3, #16
 8004994:	d0f1      	beq.n	800497a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	00030d40 	.word	0x00030d40

080049a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	; 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	460b      	mov	r3, r1
 80049b8:	71fb      	strb	r3, [r7, #7]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d123      	bne.n	8004a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049ce:	88bb      	ldrh	r3, [r7, #4]
 80049d0:	3303      	adds	r3, #3
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e018      	b.n	8004a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	031a      	lsls	r2, r3, #12
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e8:	461a      	mov	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3301      	adds	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3e2      	bcc.n	80049dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3724      	adds	r7, #36	; 0x24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b08b      	sub	sp, #44	; 0x2c
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	e014      	b.n	8004a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3301      	adds	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	3301      	adds	r3, #1
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	3301      	adds	r3, #1
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3e6      	bcc.n	8004a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a82:	8bfb      	ldrh	r3, [r7, #30]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01e      	beq.n	8004ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	461a      	mov	r2, r3
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	701a      	strb	r2, [r3, #0]
      i++;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004aba:	8bfb      	ldrh	r3, [r7, #30]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ac0:	8bfb      	ldrh	r3, [r7, #30]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ea      	bne.n	8004a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	372c      	adds	r7, #44	; 0x2c
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0301 	and.w	r3, r3, #1
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <USB_CoreReset+0x60>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e01a      	b.n	8004b6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	daf3      	bge.n	8004b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f043 0201 	orr.w	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <USB_CoreReset+0x60>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e006      	b.n	8004b6a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d0f1      	beq.n	8004b4c <USB_CoreReset+0x34>

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	00030d40 	.word	0x00030d40

08004b7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	f107 001c 	add.w	r0, r7, #28
 8004b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d018      	beq.n	8004c00 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10a      	bne.n	8004bea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e014      	b.n	8004c14 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e009      	b.n	8004c14 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0e:	f023 0304 	bic.w	r3, r3, #4
 8004c12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004c14:	2110      	movs	r1, #16
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fe82 	bl	8004920 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fea3 	bl	8004968 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e015      	b.n	8004c54 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	461a      	mov	r2, r3
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d3e5      	bcc.n	8004c28 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <USB_HostInit+0x154>)
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <USB_HostInit+0x158>)
 8004c88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c8c:	e009      	b.n	8004ca2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2280      	movs	r2, #128	; 0x80
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a10      	ldr	r2, [pc, #64]	; (8004cd8 <USB_HostInit+0x15c>)
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a0f      	ldr	r2, [pc, #60]	; (8004cdc <USB_HostInit+0x160>)
 8004c9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f043 0210 	orr.w	r2, r3, #16
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <USB_HostInit+0x164>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ccc:	b004      	add	sp, #16
 8004cce:	4770      	bx	lr
 8004cd0:	01000200 	.word	0x01000200
 8004cd4:	00e00300 	.word	0x00e00300
 8004cd8:	00600080 	.word	0x00600080
 8004cdc:	004000e0 	.word	0x004000e0
 8004ce0:	a3200008 	.word	0xa3200008

08004ce4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d107      	bne.n	8004d36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d32:	6053      	str	r3, [r2, #4]
 8004d34:	e009      	b.n	8004d4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d106      	bne.n	8004d4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d42:	461a      	mov	r2, r3
 8004d44:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <USB_DriveVbus+0x44>
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d106      	bne.n	8004d9c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d9a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d109      	bne.n	8004dbc <USB_DriveVbus+0x64>
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004db6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dba:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	0c5b      	lsrs	r3, r3, #17
 8004de8:	f003 0303 	and.w	r3, r3, #3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	b29b      	uxth	r3, r3
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	70fb      	strb	r3, [r7, #3]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70bb      	strb	r3, [r7, #2]
 8004e32:	4613      	mov	r3, r2
 8004e34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e50:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d87e      	bhi.n	8004f58 <USB_HC_Init+0x13c>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <USB_HC_Init+0x44>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004f1b 	.word	0x08004f1b
 8004e68:	08004e71 	.word	0x08004e71
 8004e6c:	08004edd 	.word	0x08004edd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004e82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004e84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da10      	bge.n	8004eae <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	78fa      	ldrb	r2, [r7, #3]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004eac:	e057      	b.n	8004f5e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d051      	beq.n	8004f5e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	78fa      	ldrb	r2, [r7, #3]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ed4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ed8:	60d3      	str	r3, [r2, #12]
      break;
 8004eda:	e040      	b.n	8004f5e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee8:	461a      	mov	r2, r3
 8004eea:	f240 639d 	movw	r3, #1693	; 0x69d
 8004eee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004ef0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	da34      	bge.n	8004f62 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f18:	e023      	b.n	8004f62 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	461a      	mov	r2, r3
 8004f28:	f240 2325 	movw	r3, #549	; 0x225
 8004f2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	da17      	bge.n	8004f66 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f56:	e006      	b.n	8004f66 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	77fb      	strb	r3, [r7, #31]
      break;
 8004f5c:	e004      	b.n	8004f68 <USB_HC_Init+0x14c>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <USB_HC_Init+0x14c>
      break;
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <USB_HC_Init+0x14c>
      break;
 8004f66:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	2101      	movs	r1, #1
 8004f78:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7c:	6939      	ldr	r1, [r7, #16]
 8004f7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004f82:	4313      	orrs	r3, r2
 8004f84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004f92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	da03      	bge.n	8004fa2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e001      	b.n	8004fa6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ff0f 	bl	8004dca <USB_GetHostSpeed>
 8004fac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d106      	bne.n	8004fc4 <USB_HC_Init+0x1a8>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d003      	beq.n	8004fc4 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e001      	b.n	8004fc8 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fc8:	787b      	ldrb	r3, [r7, #1]
 8004fca:	059b      	lsls	r3, r3, #22
 8004fcc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fd0:	78bb      	ldrb	r3, [r7, #2]
 8004fd2:	02db      	lsls	r3, r3, #11
 8004fd4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004fd8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004fde:	049b      	lsls	r3, r3, #18
 8004fe0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004fe4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fe6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004fec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	0159      	lsls	r1, r3, #5
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	440b      	add	r3, r1
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005004:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005006:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800500a:	2b03      	cmp	r3, #3
 800500c:	d10f      	bne.n	800502e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	440a      	add	r2, r1
 8005024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005028:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800502c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800502e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08c      	sub	sp, #48	; 0x30
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	785b      	ldrb	r3, [r3, #1]
 800504e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005054:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d02d      	beq.n	80050be <USB_HC_StartXfer+0x86>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	791b      	ldrb	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d129      	bne.n	80050be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d117      	bne.n	80050a0 <USB_HC_StartXfer+0x68>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	79db      	ldrb	r3, [r3, #7]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <USB_HC_StartXfer+0x48>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	79db      	ldrb	r3, [r3, #7]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d10f      	bne.n	80050a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	6a3a      	ldr	r2, [r7, #32]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <USB_HC_StartXfer+0x86>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	795b      	ldrb	r3, [r3, #5]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d107      	bne.n	80050be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	4619      	mov	r1, r3
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fa2f 	bl	8005518 <USB_DoPing>
      return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e0f8      	b.n	80052b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	8912      	ldrh	r2, [r2, #8]
 80050ce:	4413      	add	r3, r2
 80050d0:	3b01      	subs	r3, #1
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	8912      	ldrh	r2, [r2, #8]
 80050d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80050dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050de:	8b7b      	ldrh	r3, [r7, #26]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d90b      	bls.n	80050fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	8912      	ldrh	r2, [r2, #8]
 80050ee:	fb02 f203 	mul.w	r2, r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	611a      	str	r2, [r3, #16]
 80050f6:	e001      	b.n	80050fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80050f8:	2301      	movs	r3, #1
 80050fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	78db      	ldrb	r3, [r3, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	8912      	ldrh	r2, [r2, #8]
 800510a:	fb02 f203 	mul.w	r2, r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	611a      	str	r2, [r3, #16]
 8005112:	e003      	b.n	800511c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	695a      	ldr	r2, [r3, #20]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005126:	04d9      	lsls	r1, r3, #19
 8005128:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <USB_HC_StartXfer+0x280>)
 800512a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800512c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	7a9b      	ldrb	r3, [r3, #10]
 8005132:	075b      	lsls	r3, r3, #29
 8005134:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	0148      	lsls	r0, r1, #5
 800513c:	6a39      	ldr	r1, [r7, #32]
 800513e:	4401      	add	r1, r0
 8005140:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005144:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005146:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68d9      	ldr	r1, [r3, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	460a      	mov	r2, r1
 8005160:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	440a      	add	r2, r1
 8005190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005194:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005198:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	7e7b      	ldrb	r3, [r7, #25]
 80051aa:	075b      	lsls	r3, r3, #29
 80051ac:	69f9      	ldr	r1, [r7, #28]
 80051ae:	0148      	lsls	r0, r1, #5
 80051b0:	6a39      	ldr	r1, [r7, #32]
 80051b2:	4401      	add	r1, r0
 80051b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	e003      	b.n	80051ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	461a      	mov	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e04e      	b.n	80052b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d149      	bne.n	80052ae <USB_HC_StartXfer+0x276>
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d045      	beq.n	80052ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	79db      	ldrb	r3, [r3, #7]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d830      	bhi.n	800528c <USB_HC_StartXfer+0x254>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <USB_HC_StartXfer+0x1f8>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	08005265 	.word	0x08005265
 8005238:	08005241 	.word	0x08005241
 800523c:	08005265 	.word	0x08005265
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	3303      	adds	r3, #3
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800524a:	8afa      	ldrh	r2, [r7, #22]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	b29b      	uxth	r3, r3
 8005252:	429a      	cmp	r2, r3
 8005254:	d91c      	bls.n	8005290 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	619a      	str	r2, [r3, #24]
        }
        break;
 8005262:	e015      	b.n	8005290 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	3303      	adds	r3, #3
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800526e:	8afa      	ldrh	r2, [r7, #22]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	b29b      	uxth	r3, r3
 800527a:	429a      	cmp	r2, r3
 800527c:	d90a      	bls.n	8005294 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]
        }
        break;
 800528a:	e003      	b.n	8005294 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <USB_HC_StartXfer+0x25e>
        break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <USB_HC_StartXfer+0x25e>
        break;
 8005294:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68d9      	ldr	r1, [r3, #12]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	785a      	ldrb	r2, [r3, #1]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2000      	movs	r0, #0
 80052a6:	9000      	str	r0, [sp, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff fb7d 	bl	80049a8 <USB_WritePacket>
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	1ff80000 	.word	0x1ff80000

080052bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	b29b      	uxth	r3, r3
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80052de:	b480      	push	{r7}
 80052e0:	b089      	sub	sp, #36	; 0x24
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0c9b      	lsrs	r3, r3, #18
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	0fdb      	lsrs	r3, r3, #31
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b20      	cmp	r3, #32
 800532c:	d104      	bne.n	8005338 <USB_HC_Halt+0x5a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e0e8      	b.n	800550a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <USB_HC_Halt+0x66>
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d173      	bne.n	800542c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800535e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005362:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	f040 80cb 	bne.w	8005508 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d143      	bne.n	8005406 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	440a      	add	r2, r1
 8005394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800539c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053dc:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3301      	adds	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ea:	d81d      	bhi.n	8005428 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005402:	d0ec      	beq.n	80053de <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005404:	e080      	b.n	8005508 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	440a      	add	r2, r1
 800541c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005424:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005426:	e06f      	b.n	8005508 <USB_HC_Halt+0x22a>
            break;
 8005428:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800542a:	e06d      	b.n	8005508 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	4413      	add	r3, r2
 8005434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	440a      	add	r2, r1
 8005442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800544a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d143      	bne.n	80054e4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800547a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4413      	add	r3, r2
 8005484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	440a      	add	r2, r1
 8005492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	0151      	lsls	r1, r2, #5
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	440a      	add	r2, r1
 80054b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ba:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c8:	d81d      	bhi.n	8005506 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e0:	d0ec      	beq.n	80054bc <USB_HC_Halt+0x1de>
 80054e2:	e011      	b.n	8005508 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e000      	b.n	8005508 <USB_HC_Halt+0x22a>
          break;
 8005506:	bf00      	nop
    }
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3724      	adds	r7, #36	; 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800552c:	2301      	movs	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	04da      	lsls	r2, r3, #19
 8005534:	4b15      	ldr	r3, [pc, #84]	; (800558c <USB_DoPing+0x74>)
 8005536:	4013      	ands	r3, r2
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	440a      	add	r2, r1
 8005540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005548:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005560:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005568:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	461a      	mov	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	1ff80000 	.word	0x1ff80000

08005590 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff f960 	bl	8004866 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80055a6:	2110      	movs	r1, #16
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff f9b9 	bl	8004920 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7ff f9da 	bl	8004968 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
 80055b8:	e01f      	b.n	80055fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b0f      	cmp	r3, #15
 80055fe:	d9dc      	bls.n	80055ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	e034      	b.n	8005670 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800561c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005624:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800562c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	461a      	mov	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800564c:	d80c      	bhi.n	8005668 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005664:	d0ec      	beq.n	8005640 <USB_StopHost+0xb0>
 8005666:	e000      	b.n	800566a <USB_StopHost+0xda>
        break;
 8005668:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3301      	adds	r3, #1
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b0f      	cmp	r3, #15
 8005674:	d9c7      	bls.n	8005606 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800567c:	461a      	mov	r2, r3
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff f8d9 	bl	8004844 <USB_EnableGlobalInt>

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af04      	add	r7, sp, #16
 80056a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056a4:	2301      	movs	r3, #1
 80056a6:	2202      	movs	r2, #2
 80056a8:	2102      	movs	r1, #2
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fc66 	bl	8005f7c <USBH_FindInterface>
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2bff      	cmp	r3, #255	; 0xff
 80056b8:	d002      	beq.n	80056c0 <USBH_CDC_InterfaceInit+0x24>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d901      	bls.n	80056c4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056c0:	2302      	movs	r3, #2
 80056c2:	e13d      	b.n	8005940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fc3b 	bl	8005f44 <USBH_SelectInterface>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80056d8:	2302      	movs	r3, #2
 80056da:	e131      	b.n	8005940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80056e2:	2050      	movs	r0, #80	; 0x50
 80056e4:	f001 fb12 	bl	8006d0c <malloc>
 80056e8:	4603      	mov	r3, r0
 80056ea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e11f      	b.n	8005940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005700:	2250      	movs	r2, #80	; 0x50
 8005702:	2100      	movs	r1, #0
 8005704:	68b8      	ldr	r0, [r7, #8]
 8005706:	f001 fb11 	bl	8006d2c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	211a      	movs	r1, #26
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b25b      	sxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	da15      	bge.n	800574e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	211a      	movs	r1, #26
 8005728:	fb01 f303 	mul.w	r3, r1, r3
 800572c:	4413      	add	r3, r2
 800572e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 ff9c 	bl	8006692 <USBH_AllocPipe>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	7819      	ldrb	r1, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	7858      	ldrb	r0, [r3, #1]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	8952      	ldrh	r2, [r2, #10]
 800577a:	9202      	str	r2, [sp, #8]
 800577c:	2203      	movs	r2, #3
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4623      	mov	r3, r4
 8005784:	4602      	mov	r2, r0
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 ff54 	bl	8006634 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2200      	movs	r2, #0
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fa17 	bl	8006bc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800579a:	2300      	movs	r3, #0
 800579c:	2200      	movs	r2, #0
 800579e:	210a      	movs	r1, #10
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fbeb 	bl	8005f7c <USBH_FindInterface>
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	2bff      	cmp	r3, #255	; 0xff
 80057ae:	d002      	beq.n	80057b6 <USBH_CDC_InterfaceInit+0x11a>
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d901      	bls.n	80057ba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0c2      	b.n	8005940 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	211a      	movs	r1, #26
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	4413      	add	r3, r2
 80057c6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da16      	bge.n	8005800 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	211a      	movs	r1, #26
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057e2:	781a      	ldrb	r2, [r3, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	211a      	movs	r1, #26
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80057f8:	881a      	ldrh	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	835a      	strh	r2, [r3, #26]
 80057fe:	e015      	b.n	800582c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	211a      	movs	r1, #26
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	211a      	movs	r1, #26
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	211a      	movs	r1, #26
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	4413      	add	r3, r2
 8005838:	f203 3356 	addw	r3, r3, #854	; 0x356
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b25b      	sxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	da16      	bge.n	8005872 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	211a      	movs	r1, #26
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	211a      	movs	r1, #26
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	835a      	strh	r2, [r3, #26]
 8005870:	e015      	b.n	800589e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	211a      	movs	r1, #26
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	4413      	add	r3, r2
 800587e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	211a      	movs	r1, #26
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005898:	881a      	ldrh	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	7b9b      	ldrb	r3, [r3, #14]
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fef4 	bl	8006692 <USBH_AllocPipe>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	7bdb      	ldrb	r3, [r3, #15]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 feea 	bl	8006692 <USBH_AllocPipe>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7b59      	ldrb	r1, [r3, #13]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	7b98      	ldrb	r0, [r3, #14]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	8b12      	ldrh	r2, [r2, #24]
 80058de:	9202      	str	r2, [sp, #8]
 80058e0:	2202      	movs	r2, #2
 80058e2:	9201      	str	r2, [sp, #4]
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4623      	mov	r3, r4
 80058e8:	4602      	mov	r2, r0
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fea2 	bl	8006634 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	7b19      	ldrb	r1, [r3, #12]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	7bd8      	ldrb	r0, [r3, #15]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	8b52      	ldrh	r2, [r2, #26]
 8005908:	9202      	str	r2, [sp, #8]
 800590a:	2202      	movs	r2, #2
 800590c:	9201      	str	r2, [sp, #4]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4623      	mov	r3, r4
 8005912:	4602      	mov	r2, r0
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fe8d 	bl	8006634 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	7b5b      	ldrb	r3, [r3, #13]
 8005926:	2200      	movs	r2, #0
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f94c 	bl	8006bc8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	7b1b      	ldrb	r3, [r3, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 f945 	bl	8006bc8 <USBH_LL_SetToggle>

  return USBH_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	bd90      	pop	{r4, r7, pc}

08005948 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fe82 	bl	8006672 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	4619      	mov	r1, r3
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fead 	bl	80066d4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	7b1b      	ldrb	r3, [r3, #12]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fe6f 	bl	8006672 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	7b1b      	ldrb	r3, [r3, #12]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fe9a 	bl	80066d4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	7b5b      	ldrb	r3, [r3, #13]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00e      	beq.n	80059cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	7b5b      	ldrb	r3, [r3, #13]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fe5c 	bl	8006672 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	7b5b      	ldrb	r3, [r3, #13]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fe87 	bl	80066d4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00b      	beq.n	80059f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f99b 	bl	8006d1c <free>
    phost->pActiveClass->pData = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ec:	2200      	movs	r2, #0
 80059ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3340      	adds	r3, #64	; 0x40
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8b1 	bl	8005b7a <GetLineCoding>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a28:	2102      	movs	r1, #2
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d877      	bhi.n	8005b4c <USBH_CDC_Process+0x114>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <USBH_CDC_Process+0x2c>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a79 	.word	0x08005a79
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005aaf 	.word	0x08005aaf
 8005a70:	08005b23 	.word	0x08005b23
 8005a74:	08005b31 	.word	0x08005b31
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7c:	e06d      	b.n	8005b5a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f897 	bl	8005bb8 <SetLineCoding>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a9c:	e058      	b.n	8005b50 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005a9e:	7bbb      	ldrb	r3, [r7, #14]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d055      	beq.n	8005b50 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005aac:	e050      	b.n	8005b50 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	3340      	adds	r3, #64	; 0x40
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f860 	bl	8005b7a <GetLineCoding>
 8005aba:	4603      	mov	r3, r0
 8005abc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d126      	bne.n	8005b12 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d13b      	bne.n	8005b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d133      	bne.n	8005b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d12b      	bne.n	8005b54 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b04:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d124      	bne.n	8005b54 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f958 	bl	8005dc0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b10:	e020      	b.n	8005b54 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d01d      	beq.n	8005b54 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b20:	e018      	b.n	8005b54 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f867 	bl	8005bf6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8da 	bl	8005ce2 <CDC_ProcessReception>
      break;
 8005b2e:	e014      	b.n	8005b5a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b30:	2100      	movs	r1, #0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fb08 	bl	8006148 <USBH_ClrFeature>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b4a:	e005      	b.n	8005b58 <USBH_CDC_Process+0x120>

    default:
      break;
 8005b4c:	bf00      	nop
 8005b4e:	e004      	b.n	8005b5a <USBH_CDC_Process+0x122>
      break;
 8005b50:	bf00      	nop
 8005b52:	e002      	b.n	8005b5a <USBH_CDC_Process+0x122>
      break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <USBH_CDC_Process+0x122>
      break;
 8005b58:	bf00      	nop

  }

  return status;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	22a1      	movs	r2, #161	; 0xa1
 8005b88:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2221      	movs	r2, #33	; 0x21
 8005b8e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2207      	movs	r2, #7
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 faf1 	bl	8006190 <USBH_CtlReq>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2221      	movs	r2, #33	; 0x21
 8005bc6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2207      	movs	r2, #7
 8005bde:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2207      	movs	r2, #7
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fad2 	bl	8006190 <USBH_CtlReq>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af02      	add	r7, sp, #8
 8005bfc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d002      	beq.n	8005c1c <CDC_ProcessTransmission+0x26>
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d023      	beq.n	8005c62 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c1a:	e05e      	b.n	8005cda <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	8b12      	ldrh	r2, [r2, #24]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d90b      	bls.n	8005c40 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8b1a      	ldrh	r2, [r3, #24]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	7b5b      	ldrb	r3, [r3, #13]
 8005c34:	2001      	movs	r0, #1
 8005c36:	9000      	str	r0, [sp, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fcb8 	bl	80065ae <USBH_BulkSendData>
 8005c3e:	e00b      	b.n	8005c58 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	7b5b      	ldrb	r3, [r3, #13]
 8005c4e:	2001      	movs	r0, #1
 8005c50:	9000      	str	r0, [sp, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fcab 	bl	80065ae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c60:	e03b      	b.n	8005cda <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	7b5b      	ldrb	r3, [r3, #13]
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 ff83 	bl	8006b74 <USBH_LL_GetURBState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d128      	bne.n	8005cca <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	8b12      	ldrh	r2, [r2, #24]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d90e      	bls.n	8005ca2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	8b12      	ldrh	r2, [r2, #24]
 8005c8c:	1a9a      	subs	r2, r3, r2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	8b12      	ldrh	r2, [r2, #24]
 8005c9a:	441a      	add	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	61da      	str	r2, [r3, #28]
 8005ca0:	e002      	b.n	8005ca8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cb8:	e00e      	b.n	8005cd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f868 	bl	8005d98 <USBH_CDC_TransmitCallback>
      break;
 8005cc8:	e006      	b.n	8005cd8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d103      	bne.n	8005cd8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005cd8:	bf00      	nop
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d002      	beq.n	8005d08 <CDC_ProcessReception+0x26>
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d00e      	beq.n	8005d24 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d06:	e043      	b.n	8005d90 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	6a19      	ldr	r1, [r3, #32]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	8b5a      	ldrh	r2, [r3, #26]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	7b1b      	ldrb	r3, [r3, #12]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fc6f 	bl	80065f8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d22:	e035      	b.n	8005d90 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	7b1b      	ldrb	r3, [r3, #12]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 ff22 	bl	8006b74 <USBH_LL_GetURBState>
 8005d30:	4603      	mov	r3, r0
 8005d32:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d34:	7cfb      	ldrb	r3, [r7, #19]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d129      	bne.n	8005d8e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	7b1b      	ldrb	r3, [r3, #12]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fe85 	bl	8006a50 <USBH_LL_GetLastXferSize>
 8005d46:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d016      	beq.n	8005d80 <CDC_ProcessReception+0x9e>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	8b5b      	ldrh	r3, [r3, #26]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d910      	bls.n	8005d80 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad2      	subs	r2, r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	441a      	add	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d7e:	e006      	b.n	8005d8e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f80f 	bl	8005dac <USBH_CDC_ReceiveCallback>
      break;
 8005d8e:	bf00      	nop
  }
}
 8005d90:	bf00      	nop
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	e029      	b.n	8005e40 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	79fa      	ldrb	r2, [r7, #7]
 8005df0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f81f 	bl	8005e48 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fd97 	bl	800696c <USBH_LL_Init>

  return USBH_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	e009      	b.n	8005e6e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	33e0      	adds	r3, #224	; 0xe0
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b0e      	cmp	r3, #14
 8005e72:	d9f2      	bls.n	8005e5a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e009      	b.n	8005e8e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005e84:	2200      	movs	r2, #0
 8005e86:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e94:	d3f1      	bcc.n	8005e7a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2240      	movs	r2, #64	; 0x40
 8005eba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d016      	beq.n	8005f32 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10e      	bne.n	8005f2c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	33de      	adds	r3, #222	; 0xde
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
 8005f2a:	e004      	b.n	8005f36 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	73fb      	strb	r3, [r7, #15]
 8005f30:	e001      	b.n	8005f36 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f32:	2302      	movs	r3, #2
 8005f34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d204      	bcs.n	8005f6a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f68:	e001      	b.n	8005f6e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	70fb      	strb	r3, [r7, #3]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70bb      	strb	r3, [r7, #2]
 8005f92:	4613      	mov	r3, r2
 8005f94:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fa4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fa6:	e025      	b.n	8005ff4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	221a      	movs	r2, #26
 8005fac:	fb02 f303 	mul.w	r3, r2, r3
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	795b      	ldrb	r3, [r3, #5]
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d002      	beq.n	8005fca <USBH_FindInterface+0x4e>
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	2bff      	cmp	r3, #255	; 0xff
 8005fc8:	d111      	bne.n	8005fee <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fce:	78ba      	ldrb	r2, [r7, #2]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d002      	beq.n	8005fda <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fd4:	78bb      	ldrb	r3, [r7, #2]
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d109      	bne.n	8005fee <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005fde:	787a      	ldrb	r2, [r7, #1]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d002      	beq.n	8005fea <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005fe4:	787b      	ldrb	r3, [r7, #1]
 8005fe6:	2bff      	cmp	r3, #255	; 0xff
 8005fe8:	d101      	bne.n	8005fee <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	e006      	b.n	8005ffc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005fee:	7dfb      	ldrb	r3, [r7, #23]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d9d6      	bls.n	8005fa8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ffa:	23ff      	movs	r3, #255	; 0xff
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fce7 	bl	80069e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006016:	2101      	movs	r1, #1
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fdbe 	bl	8006b9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f804 	bl	800606a <USBH_HandleSof>
}
 8006062:	bf00      	nop
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b0b      	cmp	r3, #11
 800607a:	d10a      	bne.n	8006092 <USBH_HandleSof+0x28>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
  }
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80060aa:	bf00      	nop
}
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80060c6:	bf00      	nop
}
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc7a 	bl	8006a1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fad1 	bl	80066d4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	795b      	ldrb	r3, [r3, #5]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 facb 	bl	80066d4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	789b      	ldrb	r3, [r3, #2]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d10f      	bne.n	800617c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	b29a      	uxth	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800617c:	2200      	movs	r2, #0
 800617e:	2100      	movs	r1, #0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f805 	bl	8006190 <USBH_CtlReq>
 8006186:	4603      	mov	r3, r0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <USBH_CtlReq+0x20>
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d00f      	beq.n	80061ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80061ae:	e027      	b.n	8006200 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2202      	movs	r2, #2
 80061c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80061c8:	2301      	movs	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	e018      	b.n	8006200 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f81c 	bl	800620c <USBH_HandleControl>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <USBH_CtlReq+0x54>
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d106      	bne.n	80061f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	761a      	strb	r2, [r3, #24]
      break;
 80061f0:	e005      	b.n	80061fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d102      	bne.n	80061fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	709a      	strb	r2, [r3, #2]
      break;
 80061fe:	bf00      	nop
  }
  return status;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
	...

0800620c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006218:	2300      	movs	r3, #0
 800621a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7e1b      	ldrb	r3, [r3, #24]
 8006220:	3b01      	subs	r3, #1
 8006222:	2b0a      	cmp	r3, #10
 8006224:	f200 8156 	bhi.w	80064d4 <USBH_HandleControl+0x2c8>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <USBH_HandleControl+0x24>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006277 	.word	0x08006277
 8006238:	080062e1 	.word	0x080062e1
 800623c:	08006307 	.word	0x08006307
 8006240:	0800633f 	.word	0x0800633f
 8006244:	08006369 	.word	0x08006369
 8006248:	080063bb 	.word	0x080063bb
 800624c:	080063dd 	.word	0x080063dd
 8006250:	08006419 	.word	0x08006419
 8006254:	0800643f 	.word	0x0800643f
 8006258:	0800647d 	.word	0x0800647d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 0110 	add.w	r1, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	461a      	mov	r2, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f943 	bl	80064f4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	761a      	strb	r2, [r3, #24]
      break;
 8006274:	e139      	b.n	80064ea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	795b      	ldrb	r3, [r3, #5]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc79 	bl	8006b74 <USBH_LL_GetURBState>
 8006282:	4603      	mov	r3, r0
 8006284:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d11e      	bne.n	80062ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	7c1b      	ldrb	r3, [r3, #16]
 8006290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006294:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	8adb      	ldrh	r3, [r3, #22]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d103      	bne.n	80062ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2203      	movs	r2, #3
 80062a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80062aa:	e115      	b.n	80064d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2205      	movs	r2, #5
 80062b0:	761a      	strb	r2, [r3, #24]
      break;
 80062b2:	e111      	b.n	80064d8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80062b4:	7b7b      	ldrb	r3, [r7, #13]
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d103      	bne.n	80062c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2209      	movs	r2, #9
 80062be:	761a      	strb	r2, [r3, #24]
      break;
 80062c0:	e10a      	b.n	80064d8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2207      	movs	r2, #7
 80062c6:	761a      	strb	r2, [r3, #24]
      break;
 80062c8:	e106      	b.n	80064d8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d003      	beq.n	80062d8 <USBH_HandleControl+0xcc>
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	f040 8100 	bne.w	80064d8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	220b      	movs	r2, #11
 80062dc:	761a      	strb	r2, [r3, #24]
      break;
 80062de:	e0fb      	b.n	80064d8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6899      	ldr	r1, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	899a      	ldrh	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	791b      	ldrb	r3, [r3, #4]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f93a 	bl	8006572 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	761a      	strb	r2, [r3, #24]
      break;
 8006304:	e0f1      	b.n	80064ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	791b      	ldrb	r3, [r3, #4]
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fc31 	bl	8006b74 <USBH_LL_GetURBState>
 8006312:	4603      	mov	r3, r0
 8006314:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d102      	bne.n	8006322 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2209      	movs	r2, #9
 8006320:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b05      	cmp	r3, #5
 8006326:	d102      	bne.n	800632e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006328:	2303      	movs	r3, #3
 800632a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800632c:	e0d6      	b.n	80064dc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b04      	cmp	r3, #4
 8006332:	f040 80d3 	bne.w	80064dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	220b      	movs	r2, #11
 800633a:	761a      	strb	r2, [r3, #24]
      break;
 800633c:	e0ce      	b.n	80064dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	899a      	ldrh	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	795b      	ldrb	r3, [r3, #5]
 800634a:	2001      	movs	r0, #1
 800634c:	9000      	str	r0, [sp, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f8ea 	bl	8006528 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800635a:	b29a      	uxth	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2206      	movs	r2, #6
 8006364:	761a      	strb	r2, [r3, #24]
      break;
 8006366:	e0c0      	b.n	80064ea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	795b      	ldrb	r3, [r3, #5]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fc00 	bl	8006b74 <USBH_LL_GetURBState>
 8006374:	4603      	mov	r3, r0
 8006376:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d103      	bne.n	8006386 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2207      	movs	r2, #7
 8006382:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006384:	e0ac      	b.n	80064e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b05      	cmp	r3, #5
 800638a:	d105      	bne.n	8006398 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220c      	movs	r2, #12
 8006390:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006392:	2303      	movs	r3, #3
 8006394:	73fb      	strb	r3, [r7, #15]
      break;
 8006396:	e0a3      	b.n	80064e0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d103      	bne.n	80063a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2205      	movs	r2, #5
 80063a2:	761a      	strb	r2, [r3, #24]
      break;
 80063a4:	e09c      	b.n	80064e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	f040 8099 	bne.w	80064e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	220b      	movs	r2, #11
 80063b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80063b4:	2302      	movs	r3, #2
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e092      	b.n	80064e0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f8d5 	bl	8006572 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2208      	movs	r2, #8
 80063d8:	761a      	strb	r2, [r3, #24]

      break;
 80063da:	e086      	b.n	80064ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	791b      	ldrb	r3, [r3, #4]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fbc6 	bl	8006b74 <USBH_LL_GetURBState>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80063ec:	7bbb      	ldrb	r3, [r7, #14]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d105      	bne.n	80063fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	220d      	movs	r2, #13
 80063f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80063fc:	e072      	b.n	80064e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80063fe:	7bbb      	ldrb	r3, [r7, #14]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d103      	bne.n	800640c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	220b      	movs	r2, #11
 8006408:	761a      	strb	r2, [r3, #24]
      break;
 800640a:	e06b      	b.n	80064e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b05      	cmp	r3, #5
 8006410:	d168      	bne.n	80064e4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006412:	2303      	movs	r3, #3
 8006414:	73fb      	strb	r3, [r7, #15]
      break;
 8006416:	e065      	b.n	80064e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	795b      	ldrb	r3, [r3, #5]
 800641c:	2201      	movs	r2, #1
 800641e:	9200      	str	r2, [sp, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f87f 	bl	8006528 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006430:	b29a      	uxth	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	220a      	movs	r2, #10
 800643a:	761a      	strb	r2, [r3, #24]
      break;
 800643c:	e055      	b.n	80064ea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	795b      	ldrb	r3, [r3, #5]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fb95 	bl	8006b74 <USBH_LL_GetURBState>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	220d      	movs	r2, #13
 800645c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800645e:	e043      	b.n	80064e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d103      	bne.n	800646e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2209      	movs	r2, #9
 800646a:	761a      	strb	r2, [r3, #24]
      break;
 800646c:	e03c      	b.n	80064e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	2b04      	cmp	r3, #4
 8006472:	d139      	bne.n	80064e8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	220b      	movs	r2, #11
 8006478:	761a      	strb	r2, [r3, #24]
      break;
 800647a:	e035      	b.n	80064e8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7e5b      	ldrb	r3, [r3, #25]
 8006480:	3301      	adds	r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	765a      	strb	r2, [r3, #25]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	7e5b      	ldrb	r3, [r3, #25]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d806      	bhi.n	800649e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800649c:	e025      	b.n	80064ea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064a4:	2106      	movs	r1, #6
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	795b      	ldrb	r3, [r3, #5]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f90c 	bl	80066d4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	791b      	ldrb	r3, [r3, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f906 	bl	80066d4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80064ce:	2302      	movs	r3, #2
 80064d0:	73fb      	strb	r3, [r7, #15]
      break;
 80064d2:	e00a      	b.n	80064ea <USBH_HandleControl+0x2de>

    default:
      break;
 80064d4:	bf00      	nop
 80064d6:	e008      	b.n	80064ea <USBH_HandleControl+0x2de>
      break;
 80064d8:	bf00      	nop
 80064da:	e006      	b.n	80064ea <USBH_HandleControl+0x2de>
      break;
 80064dc:	bf00      	nop
 80064de:	e004      	b.n	80064ea <USBH_HandleControl+0x2de>
      break;
 80064e0:	bf00      	nop
 80064e2:	e002      	b.n	80064ea <USBH_HandleControl+0x2de>
      break;
 80064e4:	bf00      	nop
 80064e6:	e000      	b.n	80064ea <USBH_HandleControl+0x2de>
      break;
 80064e8:	bf00      	nop
  }

  return status;
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af04      	add	r7, sp, #16
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006502:	79f9      	ldrb	r1, [r7, #7]
 8006504:	2300      	movs	r3, #0
 8006506:	9303      	str	r3, [sp, #12]
 8006508:	2308      	movs	r3, #8
 800650a:	9302      	str	r3, [sp, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	2300      	movs	r3, #0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	2200      	movs	r2, #0
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fafa 	bl	8006b12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af04      	add	r7, sp, #16
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4611      	mov	r1, r2
 8006534:	461a      	mov	r2, r3
 8006536:	460b      	mov	r3, r1
 8006538:	80fb      	strh	r3, [r7, #6]
 800653a:	4613      	mov	r3, r2
 800653c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800654c:	7979      	ldrb	r1, [r7, #5]
 800654e:	7e3b      	ldrb	r3, [r7, #24]
 8006550:	9303      	str	r3, [sp, #12]
 8006552:	88fb      	ldrh	r3, [r7, #6]
 8006554:	9302      	str	r3, [sp, #8]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	2301      	movs	r3, #1
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	2300      	movs	r3, #0
 8006560:	2200      	movs	r2, #0
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 fad5 	bl	8006b12 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b088      	sub	sp, #32
 8006576:	af04      	add	r7, sp, #16
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	4611      	mov	r1, r2
 800657e:	461a      	mov	r2, r3
 8006580:	460b      	mov	r3, r1
 8006582:	80fb      	strh	r3, [r7, #6]
 8006584:	4613      	mov	r3, r2
 8006586:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006588:	7979      	ldrb	r1, [r7, #5]
 800658a:	2300      	movs	r3, #0
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	9302      	str	r3, [sp, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	2301      	movs	r3, #1
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	2201      	movs	r2, #1
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fab7 	bl	8006b12 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80065a4:	2300      	movs	r3, #0

}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b088      	sub	sp, #32
 80065b2:	af04      	add	r7, sp, #16
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	4611      	mov	r1, r2
 80065ba:	461a      	mov	r2, r3
 80065bc:	460b      	mov	r3, r1
 80065be:	80fb      	strh	r3, [r7, #6]
 80065c0:	4613      	mov	r3, r2
 80065c2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80065d2:	7979      	ldrb	r1, [r7, #5]
 80065d4:	7e3b      	ldrb	r3, [r7, #24]
 80065d6:	9303      	str	r3, [sp, #12]
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2301      	movs	r3, #1
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2302      	movs	r3, #2
 80065e6:	2200      	movs	r2, #0
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fa92 	bl	8006b12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af04      	add	r7, sp, #16
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	460b      	mov	r3, r1
 8006608:	80fb      	strh	r3, [r7, #6]
 800660a:	4613      	mov	r3, r2
 800660c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800660e:	7979      	ldrb	r1, [r7, #5]
 8006610:	2300      	movs	r3, #0
 8006612:	9303      	str	r3, [sp, #12]
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	2301      	movs	r3, #1
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2302      	movs	r3, #2
 8006622:	2201      	movs	r2, #1
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fa74 	bl	8006b12 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af04      	add	r7, sp, #16
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	4608      	mov	r0, r1
 800663e:	4611      	mov	r1, r2
 8006640:	461a      	mov	r2, r3
 8006642:	4603      	mov	r3, r0
 8006644:	70fb      	strb	r3, [r7, #3]
 8006646:	460b      	mov	r3, r1
 8006648:	70bb      	strb	r3, [r7, #2]
 800664a:	4613      	mov	r3, r2
 800664c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800664e:	7878      	ldrb	r0, [r7, #1]
 8006650:	78ba      	ldrb	r2, [r7, #2]
 8006652:	78f9      	ldrb	r1, [r7, #3]
 8006654:	8b3b      	ldrh	r3, [r7, #24]
 8006656:	9302      	str	r3, [sp, #8]
 8006658:	7d3b      	ldrb	r3, [r7, #20]
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	7c3b      	ldrb	r3, [r7, #16]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	4603      	mov	r3, r0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa07 	bl	8006a76 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa26 	bl	8006ad4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f836 	bl	8006710 <USBH_GetFreePipe>
 80066a4:	4603      	mov	r3, r0
 80066a6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80066a8:	89fb      	ldrh	r3, [r7, #14]
 80066aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00a      	beq.n	80066c8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	33e0      	adds	r3, #224	; 0xe0
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80066c8:	89fb      	ldrh	r3, [r7, #14]
 80066ca:	b2db      	uxtb	r3, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b0a      	cmp	r3, #10
 80066e4:	d80d      	bhi.n	8006702 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	33e0      	adds	r3, #224	; 0xe0
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	33e0      	adds	r3, #224	; 0xe0
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	e00f      	b.n	8006742 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	33e0      	adds	r3, #224	; 0xe0
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	b29b      	uxth	r3, r3
 800673a:	e007      	b.n	800674c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	3301      	adds	r3, #1
 8006740:	73fb      	strb	r3, [r7, #15]
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b0a      	cmp	r3, #10
 8006746:	d9ec      	bls.n	8006722 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006748:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800675c:	2201      	movs	r2, #1
 800675e:	490e      	ldr	r1, [pc, #56]	; (8006798 <MX_USB_HOST_Init+0x40>)
 8006760:	480e      	ldr	r0, [pc, #56]	; (800679c <MX_USB_HOST_Init+0x44>)
 8006762:	f7ff fb37 	bl	8005dd4 <USBH_Init>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800676c:	f7fa f8e6 	bl	800093c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006770:	490b      	ldr	r1, [pc, #44]	; (80067a0 <MX_USB_HOST_Init+0x48>)
 8006772:	480a      	ldr	r0, [pc, #40]	; (800679c <MX_USB_HOST_Init+0x44>)
 8006774:	f7ff fbbc 	bl	8005ef0 <USBH_RegisterClass>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800677e:	f7fa f8dd 	bl	800093c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006782:	4806      	ldr	r0, [pc, #24]	; (800679c <MX_USB_HOST_Init+0x44>)
 8006784:	f7ff fc40 	bl	8006008 <USBH_Start>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800678e:	f7fa f8d5 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	080067a5 	.word	0x080067a5
 800679c:	200001c0 	.word	0x200001c0
 80067a0:	2000000c 	.word	0x2000000c

080067a4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80067b0:	78fb      	ldrb	r3, [r7, #3]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d819      	bhi.n	80067ec <USBH_UserProcess+0x48>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBH_UserProcess+0x1c>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	080067dd 	.word	0x080067dd
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067e5 	.word	0x080067e5
 80067d0:	080067d5 	.word	0x080067d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <USBH_UserProcess+0x58>)
 80067d6:	2203      	movs	r2, #3
 80067d8:	701a      	strb	r2, [r3, #0]
  break;
 80067da:	e008      	b.n	80067ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80067dc:	4b07      	ldr	r3, [pc, #28]	; (80067fc <USBH_UserProcess+0x58>)
 80067de:	2202      	movs	r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
  break;
 80067e2:	e004      	b.n	80067ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <USBH_UserProcess+0x58>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
  break;
 80067ea:	e000      	b.n	80067ee <USBH_UserProcess+0x4a>

  default:
  break;
 80067ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	200000b0 	.word	0x200000b0

08006800 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08a      	sub	sp, #40	; 0x28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006820:	d147      	bne.n	80068b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	4b25      	ldr	r3, [pc, #148]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 8006828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682a:	4a24      	ldr	r2, [pc, #144]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 800682c:	f043 0301 	orr.w	r3, r3, #1
 8006830:	6313      	str	r3, [r2, #48]	; 0x30
 8006832:	4b22      	ldr	r3, [pc, #136]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800683e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800684c:	f107 0314 	add.w	r3, r7, #20
 8006850:	4619      	mov	r1, r3
 8006852:	481b      	ldr	r0, [pc, #108]	; (80068c0 <HAL_HCD_MspInit+0xc0>)
 8006854:	f7fa fc14 	bl	8001080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006858:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800685c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800685e:	2302      	movs	r3, #2
 8006860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006866:	2300      	movs	r3, #0
 8006868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800686a:	230a      	movs	r3, #10
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800686e:	f107 0314 	add.w	r3, r7, #20
 8006872:	4619      	mov	r1, r3
 8006874:	4812      	ldr	r0, [pc, #72]	; (80068c0 <HAL_HCD_MspInit+0xc0>)
 8006876:	f7fa fc03 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	4a0f      	ldr	r2, [pc, #60]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	6353      	str	r3, [r2, #52]	; 0x34
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	4b0c      	ldr	r3, [pc, #48]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	4a0b      	ldr	r2, [pc, #44]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 8006890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006894:	6453      	str	r3, [r2, #68]	; 0x44
 8006896:	4b09      	ldr	r3, [pc, #36]	; (80068bc <HAL_HCD_MspInit+0xbc>)
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	2043      	movs	r0, #67	; 0x43
 80068a8:	f7fa fbb3 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80068ac:	2043      	movs	r0, #67	; 0x43
 80068ae:	f7fa fbcc 	bl	800104a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068b2:	bf00      	nop
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40023800 	.word	0x40023800
 80068c0:	40020000 	.word	0x40020000

080068c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff fbb7 	bl	8006046 <USBH_LL_IncTimer>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fbef 	bl	80060d2 <USBH_LL_Connect>
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800690a:	4618      	mov	r0, r3
 800690c:	f7ff fbf8 	bl	8006100 <USBH_LL_Disconnect>
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
 8006924:	4613      	mov	r3, r2
 8006926:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fba9 	bl	800609a <USBH_LL_PortEnabled>
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fba9 	bl	80060b6 <USBH_LL_PortDisabled>
}
 8006964:	bf00      	nop
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800697a:	2b01      	cmp	r3, #1
 800697c:	d12a      	bne.n	80069d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800697e:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <USBH_LL_Init+0x74>)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a15      	ldr	r2, [pc, #84]	; (80069e0 <USBH_LL_Init+0x74>)
 800698a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <USBH_LL_Init+0x74>)
 8006990:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006994:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <USBH_LL_Init+0x74>)
 8006998:	2208      	movs	r2, #8
 800699a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <USBH_LL_Init+0x74>)
 800699e:	2201      	movs	r2, #1
 80069a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069a2:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <USBH_LL_Init+0x74>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <USBH_LL_Init+0x74>)
 80069aa:	2202      	movs	r2, #2
 80069ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069ae:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <USBH_LL_Init+0x74>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80069b4:	480a      	ldr	r0, [pc, #40]	; (80069e0 <USBH_LL_Init+0x74>)
 80069b6:	f7fa fd31 	bl	800141c <HAL_HCD_Init>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80069c0:	f7f9 ffbc 	bl	800093c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80069c4:	4806      	ldr	r0, [pc, #24]	; (80069e0 <USBH_LL_Init+0x74>)
 80069c6:	f7fb f906 	bl	8001bd6 <HAL_HCD_GetCurrentFrame>
 80069ca:	4603      	mov	r3, r0
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fb2a 	bl	8006028 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000598 	.word	0x20000598

080069e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fb f883 	bl	8001b06 <HAL_HCD_Start>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f90e 	bl	8006c28 <USBH_Get_USB_Status>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fb f88b 	bl	8001b4c <HAL_HCD_Stop>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f8f3 	bl	8006c28 <USBH_Get_USB_Status>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006a62:	78fa      	ldrb	r2, [r7, #3]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fb f8a1 	bl	8001bae <HAL_HCD_HC_GetXferCount>
 8006a6c:	4603      	mov	r3, r0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006a76:	b590      	push	{r4, r7, lr}
 8006a78:	b089      	sub	sp, #36	; 0x24
 8006a7a:	af04      	add	r7, sp, #16
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	461a      	mov	r2, r3
 8006a84:	4603      	mov	r3, r0
 8006a86:	70fb      	strb	r3, [r7, #3]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70bb      	strb	r3, [r7, #2]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006a9e:	787c      	ldrb	r4, [r7, #1]
 8006aa0:	78ba      	ldrb	r2, [r7, #2]
 8006aa2:	78f9      	ldrb	r1, [r7, #3]
 8006aa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006aa6:	9302      	str	r3, [sp, #8]
 8006aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	f7fa fd13 	bl	80014e0 <HAL_HCD_HC_Init>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 f8b1 	bl	8006c28 <USBH_Get_USB_Status>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}

08006ad4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	460b      	mov	r3, r1
 8006ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fa fd83 	bl	80015fe <HAL_HCD_HC_Halt>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 f892 	bl	8006c28 <USBH_Get_USB_Status>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006b12:	b590      	push	{r4, r7, lr}
 8006b14:	b089      	sub	sp, #36	; 0x24
 8006b16:	af04      	add	r7, sp, #16
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	70fb      	strb	r3, [r7, #3]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70bb      	strb	r3, [r7, #2]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006b3a:	787c      	ldrb	r4, [r7, #1]
 8006b3c:	78ba      	ldrb	r2, [r7, #2]
 8006b3e:	78f9      	ldrb	r1, [r7, #3]
 8006b40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4623      	mov	r3, r4
 8006b56:	f7fa fd75 	bl	8001644 <HAL_HCD_HC_SubmitRequest>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 f861 	bl	8006c28 <USBH_Get_USB_Status>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd90      	pop	{r4, r7, pc}

08006b74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fa fffb 	bl	8001b86 <HAL_HCD_HC_GetURBState>
 8006b90:	4603      	mov	r3, r0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d103      	bne.n	8006bb8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f864 	bl	8006c80 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006bb8:	20c8      	movs	r0, #200	; 0xc8
 8006bba:	f7fa f92b 	bl	8000e14 <HAL_Delay>
  return USBH_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006bde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	212c      	movs	r1, #44	; 0x2c
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	333b      	adds	r3, #59	; 0x3b
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	212c      	movs	r1, #44	; 0x2c
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	3354      	adds	r3, #84	; 0x54
 8006c02:	78ba      	ldrb	r2, [r7, #2]
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e008      	b.n	8006c1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	212c      	movs	r1, #44	; 0x2c
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	4413      	add	r3, r2
 8006c14:	3355      	adds	r3, #85	; 0x55
 8006c16:	78ba      	ldrb	r2, [r7, #2]
 8006c18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	2b03      	cmp	r3, #3
 8006c3a:	d817      	bhi.n	8006c6c <USBH_Get_USB_Status+0x44>
 8006c3c:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <USBH_Get_USB_Status+0x1c>)
 8006c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c5b 	.word	0x08006c5b
 8006c4c:	08006c61 	.word	0x08006c61
 8006c50:	08006c67 	.word	0x08006c67
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	73fb      	strb	r3, [r7, #15]
    break;
 8006c58:	e00b      	b.n	8006c72 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5e:	e008      	b.n	8006c72 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
    break;
 8006c64:	e005      	b.n	8006c72 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6a:	e002      	b.n	8006c72 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c70:	bf00      	nop
  }
  return usb_status;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006c8a:	79fb      	ldrb	r3, [r7, #7]
 8006c8c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e001      	b.n	8006c9e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	4803      	ldr	r0, [pc, #12]	; (8006cb4 <MX_DriverVbusFS+0x34>)
 8006ca6:	f7fa fb87 	bl	80013b8 <HAL_GPIO_WritePin>
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40020800 	.word	0x40020800

08006cb8 <__errno>:
 8006cb8:	4b01      	ldr	r3, [pc, #4]	; (8006cc0 <__errno+0x8>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	2000002c 	.word	0x2000002c

08006cc4 <__libc_init_array>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4d0d      	ldr	r5, [pc, #52]	; (8006cfc <__libc_init_array+0x38>)
 8006cc8:	4c0d      	ldr	r4, [pc, #52]	; (8006d00 <__libc_init_array+0x3c>)
 8006cca:	1b64      	subs	r4, r4, r5
 8006ccc:	10a4      	asrs	r4, r4, #2
 8006cce:	2600      	movs	r6, #0
 8006cd0:	42a6      	cmp	r6, r4
 8006cd2:	d109      	bne.n	8006ce8 <__libc_init_array+0x24>
 8006cd4:	4d0b      	ldr	r5, [pc, #44]	; (8006d04 <__libc_init_array+0x40>)
 8006cd6:	4c0c      	ldr	r4, [pc, #48]	; (8006d08 <__libc_init_array+0x44>)
 8006cd8:	f000 f8f8 	bl	8006ecc <_init>
 8006cdc:	1b64      	subs	r4, r4, r5
 8006cde:	10a4      	asrs	r4, r4, #2
 8006ce0:	2600      	movs	r6, #0
 8006ce2:	42a6      	cmp	r6, r4
 8006ce4:	d105      	bne.n	8006cf2 <__libc_init_array+0x2e>
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
 8006ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cec:	4798      	blx	r3
 8006cee:	3601      	adds	r6, #1
 8006cf0:	e7ee      	b.n	8006cd0 <__libc_init_array+0xc>
 8006cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf6:	4798      	blx	r3
 8006cf8:	3601      	adds	r6, #1
 8006cfa:	e7f2      	b.n	8006ce2 <__libc_init_array+0x1e>
 8006cfc:	08006f08 	.word	0x08006f08
 8006d00:	08006f08 	.word	0x08006f08
 8006d04:	08006f08 	.word	0x08006f08
 8006d08:	08006f0c 	.word	0x08006f0c

08006d0c <malloc>:
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <malloc+0xc>)
 8006d0e:	4601      	mov	r1, r0
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	f000 b863 	b.w	8006ddc <_malloc_r>
 8006d16:	bf00      	nop
 8006d18:	2000002c 	.word	0x2000002c

08006d1c <free>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <free+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f000 b80b 	b.w	8006d3c <_free_r>
 8006d26:	bf00      	nop
 8006d28:	2000002c 	.word	0x2000002c

08006d2c <memset>:
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <_free_r>:
 8006d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3e:	2900      	cmp	r1, #0
 8006d40:	d048      	beq.n	8006dd4 <_free_r+0x98>
 8006d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d46:	9001      	str	r0, [sp, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d4e:	bfb8      	it	lt
 8006d50:	18e4      	addlt	r4, r4, r3
 8006d52:	f000 f8ad 	bl	8006eb0 <__malloc_lock>
 8006d56:	4a20      	ldr	r2, [pc, #128]	; (8006dd8 <_free_r+0x9c>)
 8006d58:	9801      	ldr	r0, [sp, #4]
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	4615      	mov	r5, r2
 8006d5e:	b933      	cbnz	r3, 8006d6e <_free_r+0x32>
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6014      	str	r4, [r2, #0]
 8006d64:	b003      	add	sp, #12
 8006d66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6a:	f000 b8a7 	b.w	8006ebc <__malloc_unlock>
 8006d6e:	42a3      	cmp	r3, r4
 8006d70:	d90b      	bls.n	8006d8a <_free_r+0x4e>
 8006d72:	6821      	ldr	r1, [r4, #0]
 8006d74:	1862      	adds	r2, r4, r1
 8006d76:	4293      	cmp	r3, r2
 8006d78:	bf04      	itt	eq
 8006d7a:	681a      	ldreq	r2, [r3, #0]
 8006d7c:	685b      	ldreq	r3, [r3, #4]
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	bf04      	itt	eq
 8006d82:	1852      	addeq	r2, r2, r1
 8006d84:	6022      	streq	r2, [r4, #0]
 8006d86:	602c      	str	r4, [r5, #0]
 8006d88:	e7ec      	b.n	8006d64 <_free_r+0x28>
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	b10b      	cbz	r3, 8006d94 <_free_r+0x58>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d9fa      	bls.n	8006d8a <_free_r+0x4e>
 8006d94:	6811      	ldr	r1, [r2, #0]
 8006d96:	1855      	adds	r5, r2, r1
 8006d98:	42a5      	cmp	r5, r4
 8006d9a:	d10b      	bne.n	8006db4 <_free_r+0x78>
 8006d9c:	6824      	ldr	r4, [r4, #0]
 8006d9e:	4421      	add	r1, r4
 8006da0:	1854      	adds	r4, r2, r1
 8006da2:	42a3      	cmp	r3, r4
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	d1dd      	bne.n	8006d64 <_free_r+0x28>
 8006da8:	681c      	ldr	r4, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	6053      	str	r3, [r2, #4]
 8006dae:	4421      	add	r1, r4
 8006db0:	6011      	str	r1, [r2, #0]
 8006db2:	e7d7      	b.n	8006d64 <_free_r+0x28>
 8006db4:	d902      	bls.n	8006dbc <_free_r+0x80>
 8006db6:	230c      	movs	r3, #12
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	e7d3      	b.n	8006d64 <_free_r+0x28>
 8006dbc:	6825      	ldr	r5, [r4, #0]
 8006dbe:	1961      	adds	r1, r4, r5
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf04      	itt	eq
 8006dc4:	6819      	ldreq	r1, [r3, #0]
 8006dc6:	685b      	ldreq	r3, [r3, #4]
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	bf04      	itt	eq
 8006dcc:	1949      	addeq	r1, r1, r5
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	6054      	str	r4, [r2, #4]
 8006dd2:	e7c7      	b.n	8006d64 <_free_r+0x28>
 8006dd4:	b003      	add	sp, #12
 8006dd6:	bd30      	pop	{r4, r5, pc}
 8006dd8:	200000b4 	.word	0x200000b4

08006ddc <_malloc_r>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	1ccd      	adds	r5, r1, #3
 8006de0:	f025 0503 	bic.w	r5, r5, #3
 8006de4:	3508      	adds	r5, #8
 8006de6:	2d0c      	cmp	r5, #12
 8006de8:	bf38      	it	cc
 8006dea:	250c      	movcc	r5, #12
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	4606      	mov	r6, r0
 8006df0:	db01      	blt.n	8006df6 <_malloc_r+0x1a>
 8006df2:	42a9      	cmp	r1, r5
 8006df4:	d903      	bls.n	8006dfe <_malloc_r+0x22>
 8006df6:	230c      	movs	r3, #12
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfe:	f000 f857 	bl	8006eb0 <__malloc_lock>
 8006e02:	4921      	ldr	r1, [pc, #132]	; (8006e88 <_malloc_r+0xac>)
 8006e04:	680a      	ldr	r2, [r1, #0]
 8006e06:	4614      	mov	r4, r2
 8006e08:	b99c      	cbnz	r4, 8006e32 <_malloc_r+0x56>
 8006e0a:	4f20      	ldr	r7, [pc, #128]	; (8006e8c <_malloc_r+0xb0>)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	b923      	cbnz	r3, 8006e1a <_malloc_r+0x3e>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4630      	mov	r0, r6
 8006e14:	f000 f83c 	bl	8006e90 <_sbrk_r>
 8006e18:	6038      	str	r0, [r7, #0]
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 f837 	bl	8006e90 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d123      	bne.n	8006e6e <_malloc_r+0x92>
 8006e26:	230c      	movs	r3, #12
 8006e28:	6033      	str	r3, [r6, #0]
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 f846 	bl	8006ebc <__malloc_unlock>
 8006e30:	e7e3      	b.n	8006dfa <_malloc_r+0x1e>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	1b5b      	subs	r3, r3, r5
 8006e36:	d417      	bmi.n	8006e68 <_malloc_r+0x8c>
 8006e38:	2b0b      	cmp	r3, #11
 8006e3a:	d903      	bls.n	8006e44 <_malloc_r+0x68>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	441c      	add	r4, r3
 8006e40:	6025      	str	r5, [r4, #0]
 8006e42:	e004      	b.n	8006e4e <_malloc_r+0x72>
 8006e44:	6863      	ldr	r3, [r4, #4]
 8006e46:	42a2      	cmp	r2, r4
 8006e48:	bf0c      	ite	eq
 8006e4a:	600b      	streq	r3, [r1, #0]
 8006e4c:	6053      	strne	r3, [r2, #4]
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f834 	bl	8006ebc <__malloc_unlock>
 8006e54:	f104 000b 	add.w	r0, r4, #11
 8006e58:	1d23      	adds	r3, r4, #4
 8006e5a:	f020 0007 	bic.w	r0, r0, #7
 8006e5e:	1ac2      	subs	r2, r0, r3
 8006e60:	d0cc      	beq.n	8006dfc <_malloc_r+0x20>
 8006e62:	1a1b      	subs	r3, r3, r0
 8006e64:	50a3      	str	r3, [r4, r2]
 8006e66:	e7c9      	b.n	8006dfc <_malloc_r+0x20>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	6864      	ldr	r4, [r4, #4]
 8006e6c:	e7cc      	b.n	8006e08 <_malloc_r+0x2c>
 8006e6e:	1cc4      	adds	r4, r0, #3
 8006e70:	f024 0403 	bic.w	r4, r4, #3
 8006e74:	42a0      	cmp	r0, r4
 8006e76:	d0e3      	beq.n	8006e40 <_malloc_r+0x64>
 8006e78:	1a21      	subs	r1, r4, r0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f000 f808 	bl	8006e90 <_sbrk_r>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d1dd      	bne.n	8006e40 <_malloc_r+0x64>
 8006e84:	e7cf      	b.n	8006e26 <_malloc_r+0x4a>
 8006e86:	bf00      	nop
 8006e88:	200000b4 	.word	0x200000b4
 8006e8c:	200000b8 	.word	0x200000b8

08006e90 <_sbrk_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d06      	ldr	r5, [pc, #24]	; (8006eac <_sbrk_r+0x1c>)
 8006e94:	2300      	movs	r3, #0
 8006e96:	4604      	mov	r4, r0
 8006e98:	4608      	mov	r0, r1
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	f7f9 fed6 	bl	8000c4c <_sbrk>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_sbrk_r+0x1a>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_sbrk_r+0x1a>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	2000089c 	.word	0x2000089c

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f000 b809 	b.w	8006ec8 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	200008a4 	.word	0x200008a4

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f000 b804 	b.w	8006eca <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	200008a4 	.word	0x200008a4

08006ec8 <__retarget_lock_acquire_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <__retarget_lock_release_recursive>:
 8006eca:	4770      	bx	lr

08006ecc <_init>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	bf00      	nop
 8006ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed2:	bc08      	pop	{r3}
 8006ed4:	469e      	mov	lr, r3
 8006ed6:	4770      	bx	lr

08006ed8 <_fini>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr
