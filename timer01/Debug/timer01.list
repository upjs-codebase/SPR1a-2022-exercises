
timer01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800853c  0800853c  0001853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008558  08008558  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008560  08008560  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000868  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000900  20000900  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f45d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ff5  00000000  00000000  0003f525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  00043520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  00044b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024974  00000000  00000000  00046090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c74a  00000000  00000000  0006aa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c1f  00000000  00000000  0008714e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015ad6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006168  00000000  00000000  0015adc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008524 	.word	0x08008524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008524 	.word	0x08008524

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fd43 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f861 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f99b 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8c7 	bl	8000664 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8f3 	bl	80006c0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f921 	bl	8000720 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 fc0f 	bl	8007d00 <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80004e2:	f000 f953 	bl	800078c <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t led = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	71fb      	strb	r3, [r7, #7]

  HAL_TIM_Base_Start_IT(&htim6);
 80004ea:	4825      	ldr	r0, [pc, #148]	; (8000580 <main+0xc0>)
 80004ec:	f004 fa8c 	bl	8004a08 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  if(direction == 0) {
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <main+0xc4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d118      	bne.n	800052a <main+0x6a>
		if(led == 0) HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d104      	bne.n	8000508 <main+0x48>
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	4821      	ldr	r0, [pc, #132]	; (8000588 <main+0xc8>)
 8000504:	f001 f881 	bl	800160a <HAL_GPIO_TogglePin>
		if(led == 1) HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d104      	bne.n	8000518 <main+0x58>
 800050e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000512:	481d      	ldr	r0, [pc, #116]	; (8000588 <main+0xc8>)
 8000514:	f001 f879 	bl	800160a <HAL_GPIO_TogglePin>
		if(led == 2) HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d11d      	bne.n	800055a <main+0x9a>
 800051e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000522:	4819      	ldr	r0, [pc, #100]	; (8000588 <main+0xc8>)
 8000524:	f001 f871 	bl	800160a <HAL_GPIO_TogglePin>
 8000528:	e017      	b.n	800055a <main+0x9a>
//		if(led == 3) HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
	  } else {
//	    if(led == 0) HAL_GPIO_TogglePin(LD3_GPIO_Port, LD6_Pin);
		if(led == 1) HAL_GPIO_TogglePin(LD4_GPIO_Port, LD5_Pin);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d104      	bne.n	800053a <main+0x7a>
 8000530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <main+0xc8>)
 8000536:	f001 f868 	bl	800160a <HAL_GPIO_TogglePin>
		if(led == 2) HAL_GPIO_TogglePin(LD5_GPIO_Port, LD4_Pin);
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d104      	bne.n	800054a <main+0x8a>
 8000540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000544:	4810      	ldr	r0, [pc, #64]	; (8000588 <main+0xc8>)
 8000546:	f001 f860 	bl	800160a <HAL_GPIO_TogglePin>
		if(led == 3) HAL_GPIO_TogglePin(LD6_GPIO_Port, LD3_Pin);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d104      	bne.n	800055a <main+0x9a>
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <main+0xc8>)
 8000556:	f001 f858 	bl	800160a <HAL_GPIO_TogglePin>
	  }
	led = (led + 1) % 4;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	3301      	adds	r3, #1
 800055e:	425a      	negs	r2, r3
 8000560:	f003 0303 	and.w	r3, r3, #3
 8000564:	f002 0203 	and.w	r2, r2, #3
 8000568:	bf58      	it	pl
 800056a:	4253      	negpl	r3, r2
 800056c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(step);
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <main+0xcc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd5e 	bl	8001034 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000578:	f007 fbe8 	bl	8007d4c <MX_USB_HOST_Process>
	  if(direction == 0) {
 800057c:	e7b8      	b.n	80004f0 <main+0x30>
 800057e:	bf00      	nop
 8000580:	20000128 	.word	0x20000128
 8000584:	200000b4 	.word	0x200000b4
 8000588:	40020c00 	.word	0x40020c00
 800058c:	20000000 	.word	0x20000000

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f007 fef0 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b28      	ldr	r3, [pc, #160]	; (800065c <SystemClock_Config+0xcc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a27      	ldr	r2, [pc, #156]	; (800065c <SystemClock_Config+0xcc>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xcc>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <SystemClock_Config+0xd0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <SystemClock_Config+0xd0>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <SystemClock_Config+0xd0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000608:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	4618      	mov	r0, r3
 8000618:	f003 fb7e 	bl	8003d18 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000622:	f000 f9f7 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fddf 	bl	8004208 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000650:	f000 f9e0 	bl	8000a14 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x50>)
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <MX_I2C1_Init+0x54>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000670:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_I2C1_Init+0x58>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000686:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_I2C1_Init+0x50>)
 800068a:	2200      	movs	r2, #0
 800068c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_I2C1_Init+0x50>)
 80006a2:	f002 fd55 	bl	8003150 <HAL_I2C_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006ac:	f000 f9b2 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200000d4 	.word	0x200000d4
 80006b8:	40005400 	.word	0x40005400
 80006bc:	000186a0 	.word	0x000186a0

080006c0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_I2S3_Init+0x54>)
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <MX_I2S3_Init+0x58>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2S3_Init+0x54>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_I2S3_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2S3_Init+0x54>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_I2S3_Init+0x54>)
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <MX_I2S3_Init+0x5c>)
 80006ea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_I2S3_Init+0x54>)
 8000700:	f002 fe6a 	bl	80033d8 <HAL_I2S_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800070a:	f000 f983 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200001c8 	.word	0x200001c8
 8000718:	40003c00 	.word	0x40003c00
 800071c:	00017700 	.word	0x00017700

08000720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_SPI1_Init+0x64>)
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_SPI1_Init+0x68>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_SPI1_Init+0x64>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x64>)
 800076c:	220a      	movs	r2, #10
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_SPI1_Init+0x64>)
 8000772:	f004 f871 	bl	8004858 <HAL_SPI_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f94a 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000170 	.word	0x20000170
 8000788:	40013000 	.word	0x40013000

0800078c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_TIM6_Init+0x74>)
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <MX_TIM6_Init+0x78>)
 800079e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_TIM6_Init+0x74>)
 80007a2:	f240 623f 	movw	r2, #1599	; 0x63f
 80007a6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_TIM6_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_TIM6_Init+0x74>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_TIM6_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_TIM6_Init+0x74>)
 80007bc:	f004 f8d5 	bl	800496a <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80007c6:	f000 f925 	bl	8000a14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	480a      	ldr	r0, [pc, #40]	; (8000800 <MX_TIM6_Init+0x74>)
 80007d8:	f004 fb56 	bl	8004e88 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80007e2:	f000 f917 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	2036      	movs	r0, #54	; 0x36
 80007ec:	f000 fd21 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007f0:	2036      	movs	r0, #54	; 0x36
 80007f2:	f000 fd3a 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000128 	.word	0x20000128
 8000804:	40001000 	.word	0x40001000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b76      	ldr	r3, [pc, #472]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a75      	ldr	r2, [pc, #468]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b6f      	ldr	r3, [pc, #444]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a6e      	ldr	r2, [pc, #440]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b6c      	ldr	r3, [pc, #432]	; (80009fc <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b68      	ldr	r3, [pc, #416]	; (80009fc <MX_GPIO_Init+0x1f4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a67      	ldr	r2, [pc, #412]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b65      	ldr	r3, [pc, #404]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b61      	ldr	r3, [pc, #388]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a60      	ldr	r2, [pc, #384]	; (80009fc <MX_GPIO_Init+0x1f4>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b5a      	ldr	r3, [pc, #360]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a59      	ldr	r2, [pc, #356]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b57      	ldr	r3, [pc, #348]	; (80009fc <MX_GPIO_Init+0x1f4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b53      	ldr	r3, [pc, #332]	; (80009fc <MX_GPIO_Init+0x1f4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a52      	ldr	r2, [pc, #328]	; (80009fc <MX_GPIO_Init+0x1f4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b50      	ldr	r3, [pc, #320]	; (80009fc <MX_GPIO_Init+0x1f4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	484d      	ldr	r0, [pc, #308]	; (8000a00 <MX_GPIO_Init+0x1f8>)
 80008cc:	f000 fe84 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	484b      	ldr	r0, [pc, #300]	; (8000a04 <MX_GPIO_Init+0x1fc>)
 80008d6:	f000 fe7f 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e0:	4849      	ldr	r0, [pc, #292]	; (8000a08 <MX_GPIO_Init+0x200>)
 80008e2:	f000 fe79 	bl	80015d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4840      	ldr	r0, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x1f8>)
 80008fe:	f000 fccf 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483a      	ldr	r0, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x1fc>)
 800091a:	f000 fcc1 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4832      	ldr	r0, [pc, #200]	; (8000a04 <MX_GPIO_Init+0x1fc>)
 800093a:	f000 fcb1 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	482e      	ldr	r0, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x204>)
 8000954:	f000 fca4 	bl	80012a0 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2006      	movs	r0, #6
 800095e:	f000 fc68 	bl	8001232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000962:	2006      	movs	r0, #6
 8000964:	f000 fc81 	bl	800126a <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000968:	2304      	movs	r3, #4
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x208>)
 800097c:	f000 fc90 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000992:	2305      	movs	r3, #5
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_GPIO_Init+0x208>)
 800099e:	f000 fc7f 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_GPIO_Init+0x200>)
 80009bc:	f000 fc70 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c0:	2320      	movs	r3, #32
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_GPIO_Init+0x200>)
 80009d4:	f000 fc64 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009dc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0x1f8>)
 80009ee:	f000 fc57 	bl	80012a0 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fbdc 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12c      	bne.n	8000aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480c      	ldr	r0, [pc, #48]	; (8000afc <HAL_I2C_MspInit+0x8c>)
 8000acc:	f000 fbe8 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_I2C_MspInit+0x88>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40005400 	.word	0x40005400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020400 	.word	0x40020400

08000b00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <HAL_I2S_MspInit+0xf0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d15a      	bne.n	8000be6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b30:	2301      	movs	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b34:	23c0      	movs	r3, #192	; 0xc0
 8000b36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fd49 	bl	80045d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b4c:	f7ff ff62 	bl	8000a14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a18      	ldr	r2, [pc, #96]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_I2S_MspInit+0xf4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480e      	ldr	r0, [pc, #56]	; (8000bf8 <HAL_I2S_MspInit+0xf8>)
 8000bc0:	f000 fb6e 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd6:	2306      	movs	r3, #6
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_I2S_MspInit+0xfc>)
 8000be2:	f000 fb5d 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3738      	adds	r7, #56	; 0x38
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40003c00 	.word	0x40003c00
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	40020800 	.word	0x40020800

08000c00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a19      	ldr	r2, [pc, #100]	; (8000c84 <HAL_SPI_MspInit+0x84>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d12b      	bne.n	8000c7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <HAL_SPI_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c5a:	23e0      	movs	r3, #224	; 0xe0
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c6a:	2305      	movs	r3, #5
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_SPI_MspInit+0x8c>)
 8000c76:	f000 fb13 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_TIM_Base_MspInit+0x48>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d115      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2036      	movs	r0, #54	; 0x36
 8000cc4:	f000 fab5 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc8:	2036      	movs	r0, #54	; 0x36
 8000cca:	f000 face 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 f962 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <TIM6_DAC_IRQHandler+0x10>)
 8000d3a:	f003 fed5 	bl	8004ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000128 	.word	0x20000128

08000d48 <HAL_TIM_PeriodElapsedCallback>:
int start = 0;
uint32_t counter = 0;

int presses = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	if(start == 1 && counter < 50000) {
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d111      	bne.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x34>
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d80b      	bhi.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x34>
		counter++;
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d6c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d76:	f000 fc2f 	bl	80015d8 <HAL_GPIO_WritePin>
 8000d7a:	e00f      	b.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x54>
	} else {
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000d84:	f000 fc28 	bl	80015d8 <HAL_GPIO_WritePin>
		presses = 0;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
		counter = 0;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
		start = 0;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
//		if(step == 32) {
//			up = 0;
//			led = (led + 1) % 4;
//		}
//	}
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000b8 	.word	0x200000b8
 8000da8:	200000bc 	.word	0x200000bc
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	200000c0 	.word	0x200000c0

08000db4 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fc41 	bl	8001640 <HAL_GPIO_EXTI_IRQHandler>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	if(it_swithc) {
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d025      	beq.n	8000e24 <HAL_GPIO_EXTI_Callback+0x60>
		presses++;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a19      	ldr	r2, [pc, #100]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000de0:	6013      	str	r3, [r2, #0]
		start = 1;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]
		if(presses == 2) {
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d114      	bne.n	8000e1a <HAL_GPIO_EXTI_Callback+0x56>
			if(direction == 1) direction = 0;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x88>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d103      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0x3c>
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x88>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_EXTI_Callback+0x42>
			else direction = 1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x88>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
			presses = 0;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
			counter = 0;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
			start = 0;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x84>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_EXTI_Callback+0x60>
		} else {
			step += 10;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	330a      	adds	r3, #10
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e22:	6013      	str	r3, [r2, #0]
		}
	}
	it_swithc ^= 1;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f083 0301 	eor.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000004 	.word	0x20000004
 8000e44:	200000c0 	.word	0x200000c0
 8000e48:	200000b8 	.word	0x200000b8
 8000e4c:	200000b4 	.word	0x200000b4
 8000e50:	200000bc 	.word	0x200000bc
 8000e54:	20000000 	.word	0x20000000

08000e58 <OTG_FS_IRQHandler>:
/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <OTG_FS_IRQHandler+0x10>)
 8000e5e:	f000 fe71 	bl	8001b44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200005ec 	.word	0x200005ec

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f007 fa38 	bl	8008310 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	200000c4 	.word	0x200000c4
 8000ed4:	20000900 	.word	0x20000900

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f007 f9f7 	bl	800831c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fac7 	bl	80004c0 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000f40:	08008568 	.word	0x08008568
  ldr r2, =_sbss
 8000f44:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000f48:	20000900 	.word	0x20000900

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f94f 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fd4c 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f967 	bl	8001286 <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f92f 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010
 8001018:	20000210 	.word	0x20000210

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000210 	.word	0x20000210

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000010 	.word	0x20000010

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e16b      	b.n	8001594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 815a 	bne.w	800158e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d005      	beq.n	80012f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d130      	bne.n	8001354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 0201 	and.w	r2, r3, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b03      	cmp	r3, #3
 800135e:	d017      	beq.n	8001390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	2203      	movs	r2, #3
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80b4 	beq.w	800158e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_GPIO_Init+0x30c>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a5f      	ldr	r2, [pc, #380]	; (80015ac <HAL_GPIO_Init+0x30c>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_GPIO_Init+0x30c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001442:	4a5b      	ldr	r2, [pc, #364]	; (80015b0 <HAL_GPIO_Init+0x310>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_GPIO_Init+0x314>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a51      	ldr	r2, [pc, #324]	; (80015b8 <HAL_GPIO_Init+0x318>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a50      	ldr	r2, [pc, #320]	; (80015bc <HAL_GPIO_Init+0x31c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_GPIO_Init+0x320>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	; (80015c4 <HAL_GPIO_Init+0x324>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	; (80015c8 <HAL_GPIO_Init+0x328>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <HAL_GPIO_Init+0x32c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <HAL_GPIO_Init+0x330>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x20a>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014aa:	2308      	movs	r3, #8
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x310>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <HAL_GPIO_Init+0x334>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150a:	4a32      	ldr	r2, [pc, #200]	; (80015d4 <HAL_GPIO_Init+0x334>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_GPIO_Init+0x334>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001534:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <HAL_GPIO_Init+0x334>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_GPIO_Init+0x334>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_GPIO_Init+0x334>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x334>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_GPIO_Init+0x334>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae90 	bls.w	80012bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40021400 	.word	0x40021400
 80015cc:	40021800 	.word	0x40021800
 80015d0:	40021c00 	.word	0x40021c00
 80015d4:	40013c00 	.word	0x40013c00

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800161c:	887a      	ldrh	r2, [r7, #2]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	041a      	lsls	r2, r3, #16
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43d9      	mvns	r1, r3
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	400b      	ands	r3, r1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fbb0 	bl	8000dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40013c00 	.word	0x40013c00

08001670 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b08f      	sub	sp, #60	; 0x3c
 8001674:	af0a      	add	r7, sp, #40	; 0x28
 8001676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e054      	b.n	800172c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f006 fb8d 	bl	8007dbc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fce3 	bl	800508c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	687e      	ldr	r6, [r7, #4]
 80016ce:	466d      	mov	r5, sp
 80016d0:	f106 0410 	add.w	r4, r6, #16
 80016d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e4:	1d33      	adds	r3, r6, #4
 80016e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f003 fc5d 	bl	8004fa8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2101      	movs	r1, #1
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fcda 	bl	80050ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	687e      	ldr	r6, [r7, #4]
 8001702:	466d      	mov	r5, sp
 8001704:	f106 0410 	add.w	r4, r6, #16
 8001708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001714:	e885 0003 	stmia.w	r5, {r0, r1}
 8001718:	1d33      	adds	r3, r6, #4
 800171a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800171c:	6838      	ldr	r0, [r7, #0]
 800171e:	f003 fe41 	bl	80053a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001734 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af04      	add	r7, sp, #16
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4603      	mov	r3, r0
 8001744:	70fb      	strb	r3, [r7, #3]
 8001746:	460b      	mov	r3, r1
 8001748:	70bb      	strb	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <HAL_HCD_HC_Init+0x28>
 8001758:	2302      	movs	r3, #2
 800175a:	e076      	b.n	800184a <HAL_HCD_HC_Init+0x116>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	212c      	movs	r1, #44	; 0x2c
 800176a:	fb01 f303 	mul.w	r3, r1, r3
 800176e:	4413      	add	r3, r2
 8001770:	333d      	adds	r3, #61	; 0x3d
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	3338      	adds	r3, #56	; 0x38
 8001784:	787a      	ldrb	r2, [r7, #1]
 8001786:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3340      	adds	r3, #64	; 0x40
 8001796:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001798:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3339      	adds	r3, #57	; 0x39
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	333f      	adds	r3, #63	; 0x3f
 80017ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	78ba      	ldrb	r2, [r7, #2]
 80017c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80017c8:	b2d0      	uxtb	r0, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	212c      	movs	r1, #44	; 0x2c
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	333a      	adds	r3, #58	; 0x3a
 80017d6:	4602      	mov	r2, r0
 80017d8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da09      	bge.n	80017f6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	212c      	movs	r1, #44	; 0x2c
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	333b      	adds	r3, #59	; 0x3b
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e008      	b.n	8001808 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	212c      	movs	r1, #44	; 0x2c
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	4413      	add	r3, r2
 8001802:	333b      	adds	r3, #59	; 0x3b
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	333c      	adds	r3, #60	; 0x3c
 8001816:	f897 2020 	ldrb.w	r2, [r7, #32]
 800181a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	787c      	ldrb	r4, [r7, #1]
 8001822:	78ba      	ldrb	r2, [r7, #2]
 8001824:	78f9      	ldrb	r1, [r7, #3]
 8001826:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001828:	9302      	str	r3, [sp, #8]
 800182a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	4623      	mov	r3, r4
 8001838:	f003 ff2e 	bl	8005698 <USB_HC_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}

08001852 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_HCD_HC_Halt+0x1e>
 800186c:	2302      	movs	r3, #2
 800186e:	e00f      	b.n	8001890 <HAL_HCD_HC_Halt+0x3e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f004 f96a 	bl	8005b5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	70fb      	strb	r3, [r7, #3]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70bb      	strb	r3, [r7, #2]
 80018ae:	4613      	mov	r3, r2
 80018b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	212c      	movs	r1, #44	; 0x2c
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	333b      	adds	r3, #59	; 0x3b
 80018c0:	78ba      	ldrb	r2, [r7, #2]
 80018c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	333f      	adds	r3, #63	; 0x3f
 80018d2:	787a      	ldrb	r2, [r7, #1]
 80018d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018d6:	7c3b      	ldrb	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d112      	bne.n	8001902 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2203      	movs	r2, #3
 80018ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	333d      	adds	r3, #61	; 0x3d
 80018fc:	7f3a      	ldrb	r2, [r7, #28]
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e008      	b.n	8001914 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3342      	adds	r3, #66	; 0x42
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b03      	cmp	r3, #3
 8001918:	f200 80c6 	bhi.w	8001aa8 <HAL_HCD_HC_SubmitRequest+0x210>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	08001935 	.word	0x08001935
 8001928:	08001a95 	.word	0x08001a95
 800192c:	08001999 	.word	0x08001999
 8001930:	08001a17 	.word	0x08001a17
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001934:	7c3b      	ldrb	r3, [r7, #16]
 8001936:	2b01      	cmp	r3, #1
 8001938:	f040 80b8 	bne.w	8001aac <HAL_HCD_HC_SubmitRequest+0x214>
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 80b4 	bne.w	8001aac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001944:	8b3b      	ldrh	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3355      	adds	r3, #85	; 0x55
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3355      	adds	r3, #85	; 0x55
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d109      	bne.n	8001984 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3342      	adds	r3, #66	; 0x42
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001982:	e093      	b.n	8001aac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2202      	movs	r2, #2
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	e089      	b.n	8001aac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001998:	78bb      	ldrb	r3, [r7, #2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11d      	bne.n	80019da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3355      	adds	r3, #85	; 0x55
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	212c      	movs	r1, #44	; 0x2c
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	4413      	add	r3, r2
 80019be:	3342      	adds	r3, #66	; 0x42
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019c4:	e073      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3342      	adds	r3, #66	; 0x42
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e069      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	3354      	adds	r3, #84	; 0x54
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	3342      	adds	r3, #66	; 0x42
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e055      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3342      	adds	r3, #66	; 0x42
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e04b      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a16:	78bb      	ldrb	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d11d      	bne.n	8001a58 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3355      	adds	r3, #85	; 0x55
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a42:	e034      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	212c      	movs	r1, #44	; 0x2c
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3342      	adds	r3, #66	; 0x42
 8001a52:	2202      	movs	r2, #2
 8001a54:	701a      	strb	r2, [r3, #0]
      break;
 8001a56:	e02a      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3354      	adds	r3, #84	; 0x54
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	3342      	adds	r3, #66	; 0x42
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
      break;
 8001a7e:	e016      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3342      	adds	r3, #66	; 0x42
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]
      break;
 8001a92:	e00c      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3342      	adds	r3, #66	; 0x42
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
      break;
 8001aa6:	e002      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001aa8:	bf00      	nop
 8001aaa:	e000      	b.n	8001aae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001aac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	3344      	adds	r3, #68	; 0x44
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	8b3a      	ldrh	r2, [r7, #24]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	202c      	movs	r0, #44	; 0x2c
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	440b      	add	r3, r1
 8001ace:	334c      	adds	r3, #76	; 0x4c
 8001ad0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3360      	adds	r3, #96	; 0x60
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	3350      	adds	r3, #80	; 0x50
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3339      	adds	r3, #57	; 0x39
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	3361      	adds	r3, #97	; 0x61
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6818      	ldr	r0, [r3, #0]
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	222c      	movs	r2, #44	; 0x2c
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	3338      	adds	r3, #56	; 0x38
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	18d1      	adds	r1, r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	f003 febe 	bl	80058b4 <USB_HC_StartXfer>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop

08001b44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 fbe1 	bl	8005322 <USB_GetMode>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 80f6 	bne.w	8001d54 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fbc5 	bl	80052fc <USB_ReadInterrupts>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80ec 	beq.w	8001d52 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fbbc 	bl	80052fc <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b8e:	d104      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fbac 	bl	80052fc <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bae:	d104      	bne.n	8001bba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fb9c 	bl	80052fc <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bce:	d104      	bne.n	8001bda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fb8c 	bl	80052fc <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d103      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fb7e 	bl	80052fc <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c0a:	d11c      	bne.n	8001c46 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c14:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c26:	2110      	movs	r1, #16
 8001c28:	6938      	ldr	r0, [r7, #16]
 8001c2a:	f003 fa8d 	bl	8005148 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c2e:	6938      	ldr	r0, [r7, #16]
 8001c30:	f003 faae 	bl	8005190 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fc66 	bl	800550c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f006 f939 	bl	8007eb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fb56 	bl	80052fc <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5a:	d102      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f001 fa03 	bl	8003068 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fb48 	bl	80052fc <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d106      	bne.n	8001c84 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f006 f902 	bl	8007e80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 fb37 	bl	80052fc <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d101      	bne.n	8001c9c <HAL_HCD_IRQHandler+0x158>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_HCD_IRQHandler+0x15a>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d012      	beq.n	8001cc8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0210 	bic.w	r2, r2, #16
 8001cb0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f001 f906 	bl	8002ec4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0210 	orr.w	r2, r2, #16
 8001cc6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fb15 	bl	80052fc <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cdc:	d13a      	bne.n	8001d54 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 ff28 	bl	8005b38 <USB_HC_ReadInterrupt>
 8001ce8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e025      	b.n	8001d3c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d018      	beq.n	8001d36 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1a:	d106      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8ab 	bl	8001e7e <HCD_HC_IN_IRQHandler>
 8001d28:	e005      	b.n	8001d36 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fcc6 	bl	80026c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d3d4      	bcc.n	8001cf0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	e000      	b.n	8001d54 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d52:	bf00      	nop
    }
  }
}
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_HCD_Start+0x16>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e013      	b.n	8001d98 <HAL_HCD_Start+0x3e>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fc28 	bl	80055d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 f96e 	bl	800506a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_HCD_Stop+0x16>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e00d      	b.n	8001dd2 <HAL_HCD_Stop+0x32>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f822 	bl	8005e0c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fbca 	bl	8005580 <USB_ResetPort>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3360      	adds	r3, #96	; 0x60
 8001e10:	781b      	ldrb	r3, [r3, #0]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3350      	adds	r3, #80	; 0x50
 8001e38:	681b      	ldr	r3, [r3, #0]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fc0e 	bl	8005674 <USB_GetCurrentFrame>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fbe9 	bl	8005646 <USB_GetHostSpeed>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b086      	sub	sp, #24
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d119      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	0151      	lsls	r1, r2, #5
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	60d3      	str	r3, [r2, #12]
 8001ee0:	e101      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ef8:	d12b      	bne.n	8001f52 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3361      	adds	r3, #97	; 0x61
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	0151      	lsls	r1, r2, #5
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	440a      	add	r2, r1
 8001f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fe05 	bl	8005b5a <USB_HC_Halt>
 8001f50:	e0c9      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d109      	bne.n	8001f7c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	2320      	movs	r3, #32
 8001f78:	6093      	str	r3, [r2, #8]
 8001f7a:	e0b4      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d133      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	015a      	lsls	r2, r3, #5
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4413      	add	r3, r2
 8001f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	0151      	lsls	r1, r2, #5
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	440a      	add	r2, r1
 8001fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	212c      	movs	r1, #44	; 0x2c
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3361      	adds	r3, #97	; 0x61
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	015a      	lsls	r2, r3, #5
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2308      	movs	r3, #8
 8001fe6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fdb1 	bl	8005b5a <USB_HC_Halt>
 8001ff8:	e075      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d134      	bne.n	800207c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	0151      	lsls	r1, r2, #5
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	440a      	add	r2, r1
 8002028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	3361      	adds	r3, #97	; 0x61
 8002040:	2208      	movs	r2, #8
 8002042:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	461a      	mov	r2, r3
 8002052:	2310      	movs	r3, #16
 8002054:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fd70 	bl	8005b5a <USB_HC_Halt>
 800207a:	e034      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b80      	cmp	r3, #128	; 0x80
 8002090:	d129      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	0151      	lsls	r1, r2, #5
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	440a      	add	r2, r1
 80020a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	212c      	movs	r1, #44	; 0x2c
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3361      	adds	r3, #97	; 0x61
 80020c0:	2206      	movs	r2, #6
 80020c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fd43 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d122      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	0151      	lsls	r1, r2, #5
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	440a      	add	r2, r1
 8002114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fd16 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213a:	461a      	mov	r2, r3
 800213c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002140:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002142:	e2ba      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	f040 811b 	bne.w	8002392 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d019      	beq.n	8002198 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	212c      	movs	r1, #44	; 0x2c
 800216a:	fb01 f303 	mul.w	r3, r1, r3
 800216e:	4413      	add	r3, r2
 8002170:	3348      	adds	r3, #72	; 0x48
 8002172:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	440b      	add	r3, r1
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	440b      	add	r3, r1
 8002194:	3350      	adds	r3, #80	; 0x50
 8002196:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	212c      	movs	r1, #44	; 0x2c
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	4413      	add	r3, r2
 80021a4:	3361      	adds	r3, #97	; 0x61
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	212c      	movs	r1, #44	; 0x2c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	461a      	mov	r2, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333f      	adds	r3, #63	; 0x3f
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	333f      	adds	r3, #63	; 0x3f
 80021f0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d121      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	0151      	lsls	r1, r2, #5
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	440a      	add	r2, r1
 800220c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fc9a 	bl	8005b5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	2310      	movs	r3, #16
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	e066      	b.n	8002308 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	212c      	movs	r1, #44	; 0x2c
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	333f      	adds	r3, #63	; 0x3f
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d127      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4413      	add	r3, r2
 8002256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	0151      	lsls	r1, r2, #5
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	440a      	add	r2, r1
 8002264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800226c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3360      	adds	r3, #96	; 0x60
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	b2d9      	uxtb	r1, r3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	202c      	movs	r0, #44	; 0x2c
 800228a:	fb00 f303 	mul.w	r3, r0, r3
 800228e:	4413      	add	r3, r2
 8002290:	3360      	adds	r3, #96	; 0x60
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f005 fe1c 	bl	8007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800229c:	e034      	b.n	8002308 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	333f      	adds	r3, #63	; 0x3f
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d12a      	bne.n	8002308 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3354      	adds	r3, #84	; 0x54
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3354      	adds	r3, #84	; 0x54
 80022e8:	4602      	mov	r2, r0
 80022ea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	b2d9      	uxtb	r1, r3
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	202c      	movs	r0, #44	; 0x2c
 80022f6:	fb00 f303 	mul.w	r3, r0, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3360      	adds	r3, #96	; 0x60
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 fde6 	bl	8007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d12b      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3348      	adds	r3, #72	; 0x48
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	202c      	movs	r0, #44	; 0x2c
 8002326:	fb00 f202 	mul.w	r2, r0, r2
 800232a:	440a      	add	r2, r1
 800232c:	3240      	adds	r2, #64	; 0x40
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	fbb3 f3f2 	udiv	r3, r3, r2
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 81be 	beq.w	80026ba <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	3354      	adds	r3, #84	; 0x54
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2d8      	uxtb	r0, r3
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	3354      	adds	r3, #84	; 0x54
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
}
 8002366:	e1a8      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3354      	adds	r3, #84	; 0x54
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	f083 0301 	eor.w	r3, r3, #1
 800237c:	b2d8      	uxtb	r0, r3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3354      	adds	r3, #84	; 0x54
 800238c:	4602      	mov	r2, r0
 800238e:	701a      	strb	r2, [r3, #0]
}
 8002390:	e193      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	f040 8106 	bne.w	80025b6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	0151      	lsls	r1, r2, #5
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	440a      	add	r2, r1
 80023c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c4:	f023 0302 	bic.w	r3, r3, #2
 80023c8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3361      	adds	r3, #97	; 0x61
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d109      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	3360      	adds	r3, #96	; 0x60
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e0c9      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3361      	adds	r3, #97	; 0x61
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b05      	cmp	r3, #5
 8002404:	d109      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	2205      	movs	r2, #5
 8002416:	701a      	strb	r2, [r3, #0]
 8002418:	e0b5      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3361      	adds	r3, #97	; 0x61
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b06      	cmp	r3, #6
 800242c:	d009      	beq.n	8002442 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3361      	adds	r3, #97	; 0x61
 800243c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800243e:	2b08      	cmp	r3, #8
 8002440:	d150      	bne.n	80024e4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	335c      	adds	r3, #92	; 0x5c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	202c      	movs	r0, #44	; 0x2c
 800245a:	fb00 f303 	mul.w	r3, r0, r3
 800245e:	440b      	add	r3, r1
 8002460:	335c      	adds	r3, #92	; 0x5c
 8002462:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	335c      	adds	r3, #92	; 0x5c
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d912      	bls.n	800249e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	335c      	adds	r3, #92	; 0x5c
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	2204      	movs	r2, #4
 800249a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800249c:	e073      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3360      	adds	r3, #96	; 0x60
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024c6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024ce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024e2:	e050      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d122      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002520:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002528:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e023      	b.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3361      	adds	r3, #97	; 0x61
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b07      	cmp	r3, #7
 8002550:	d119      	bne.n	8002586 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	202c      	movs	r0, #44	; 0x2c
 800256a:	fb00 f303 	mul.w	r3, r0, r3
 800256e:	440b      	add	r3, r1
 8002570:	335c      	adds	r3, #92	; 0x5c
 8002572:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3360      	adds	r3, #96	; 0x60
 8002582:	2204      	movs	r2, #4
 8002584:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2302      	movs	r3, #2
 8002596:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	b2d9      	uxtb	r1, r3
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	202c      	movs	r0, #44	; 0x2c
 80025a2:	fb00 f303 	mul.w	r3, r0, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f005 fc90 	bl	8007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025b4:	e081      	b.n	80026ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	015a      	lsls	r2, r3, #5
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4413      	add	r3, r2
 80025be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d176      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	333f      	adds	r3, #63	; 0x3f
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d121      	bne.n	8002624 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	212c      	movs	r1, #44	; 0x2c
 80025e6:	fb01 f303 	mul.w	r3, r1, r3
 80025ea:	4413      	add	r3, r2
 80025ec:	335c      	adds	r3, #92	; 0x5c
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	0151      	lsls	r1, r2, #5
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	440a      	add	r2, r1
 8002608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fa9c 	bl	8005b5a <USB_HC_Halt>
 8002622:	e041      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	333f      	adds	r3, #63	; 0x3f
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	333f      	adds	r3, #63	; 0x3f
 8002646:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002648:	2b02      	cmp	r3, #2
 800264a:	d12d      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	335c      	adds	r3, #92	; 0x5c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d120      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	2203      	movs	r2, #3
 8002676:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	0151      	lsls	r1, r2, #5
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	440a      	add	r2, r1
 800268e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f003 fa59 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	2310      	movs	r3, #16
 80026b8:	6093      	str	r3, [r2, #8]
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d119      	bne.n	8002726 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fe:	461a      	mov	r2, r3
 8002700:	2304      	movs	r3, #4
 8002702:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	0151      	lsls	r1, r2, #5
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	440a      	add	r2, r1
 800271a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271e:	f043 0302 	orr.w	r3, r3, #2
 8002722:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002724:	e3ca      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b20      	cmp	r3, #32
 800273a:	d13e      	bne.n	80027ba <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	461a      	mov	r2, r3
 800274a:	2320      	movs	r3, #32
 800274c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	333d      	adds	r3, #61	; 0x3d
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	f040 83ac 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	333d      	adds	r3, #61	; 0x3d
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	0151      	lsls	r1, r2, #5
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	440a      	add	r2, r1
 800279e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f9d1 	bl	8005b5a <USB_HC_Halt>
}
 80027b8:	e380      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d0:	d122      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	0151      	lsls	r1, r2, #5
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	440a      	add	r2, r1
 80027e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 f9ac 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	461a      	mov	r2, r3
 8002810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002814:	6093      	str	r3, [r2, #8]
}
 8002816:	e351      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b01      	cmp	r3, #1
 800282c:	d150      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b40      	cmp	r3, #64	; 0x40
 8002854:	d111      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	333d      	adds	r3, #61	; 0x3d
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	2340      	movs	r3, #64	; 0x40
 8002878:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f958 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	2301      	movs	r3, #1
 80028ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
}
 80028ce:	e2f5      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d13c      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	212c      	movs	r1, #44	; 0x2c
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	3361      	adds	r3, #97	; 0x61
 80028f4:	2204      	movs	r2, #4
 80028f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333d      	adds	r3, #61	; 0x3d
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	440a      	add	r2, r1
 8002932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f003 f907 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	461a      	mov	r2, r3
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	6093      	str	r3, [r2, #8]
}
 800295e:	e2ad      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b08      	cmp	r3, #8
 8002974:	d12a      	bne.n	80029cc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2308      	movs	r3, #8
 8002986:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	0151      	lsls	r1, r2, #5
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	440a      	add	r2, r1
 800299e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 f8d1 	bl	8005b5a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	2205      	movs	r2, #5
 80029c8:	701a      	strb	r2, [r3, #0]
}
 80029ca:	e277      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d150      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	335c      	adds	r3, #92	; 0x5c
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	333d      	adds	r3, #61	; 0x3d
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d112      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	333c      	adds	r3, #60	; 0x3c
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d108      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	333d      	adds	r3, #61	; 0x3d
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 f875 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2310      	movs	r3, #16
 8002a80:	6093      	str	r3, [r2, #8]
}
 8002a82:	e21b      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d174      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d121      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3361      	adds	r3, #97	; 0x61
 8002ab0:	2206      	movs	r2, #6
 8002ab2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	0151      	lsls	r1, r2, #5
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	440a      	add	r2, r1
 8002aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 f83b 	bl	8005b5a <USB_HC_Halt>
 8002ae4:	e044      	b.n	8002b70 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	202c      	movs	r0, #44	; 0x2c
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	440b      	add	r3, r1
 8002b04:	335c      	adds	r3, #92	; 0x5c
 8002b06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	335c      	adds	r3, #92	; 0x5c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d920      	bls.n	8002b5e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	335c      	adds	r3, #92	; 0x5c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 f9bc 	bl	8007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b5c:	e008      	b.n	8002b70 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3360      	adds	r3, #96	; 0x60
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	6093      	str	r3, [r2, #8]
}
 8002b82:	e19b      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d134      	bne.n	8002c06 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	0151      	lsls	r1, r2, #5
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	440a      	add	r2, r1
 8002bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f002 ffc7 	bl	8005b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2310      	movs	r3, #16
 8002bdc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bea:	461a      	mov	r2, r3
 8002bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3361      	adds	r3, #97	; 0x61
 8002c00:	2208      	movs	r2, #8
 8002c02:	701a      	strb	r2, [r3, #0]
}
 8002c04:	e15a      	b.n	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	f040 814f 	bne.w	8002ebc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	0151      	lsls	r1, r2, #5
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	440a      	add	r2, r1
 8002c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c38:	f023 0302 	bic.w	r3, r3, #2
 8002c3c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	3361      	adds	r3, #97	; 0x61
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d17d      	bne.n	8002d4e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3360      	adds	r3, #96	; 0x60
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	333f      	adds	r3, #63	; 0x3f
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d00a      	beq.n	8002c8e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	333f      	adds	r3, #63	; 0x3f
 8002c86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	f040 8100 	bne.w	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3355      	adds	r3, #85	; 0x55
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2d8      	uxtb	r0, r3
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3355      	adds	r3, #85	; 0x55
 8002cba:	4602      	mov	r2, r0
 8002cbc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	f040 80e3 	bne.w	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	334c      	adds	r3, #76	; 0x4c
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80d8 	beq.w	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	334c      	adds	r3, #76	; 0x4c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	202c      	movs	r0, #44	; 0x2c
 8002cf4:	fb00 f202 	mul.w	r2, r0, r2
 8002cf8:	440a      	add	r2, r1
 8002cfa:	3240      	adds	r2, #64	; 0x40
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b01      	subs	r3, #1
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	202c      	movs	r0, #44	; 0x2c
 8002d08:	fb00 f202 	mul.w	r2, r0, r2
 8002d0c:	440a      	add	r2, r1
 8002d0e:	3240      	adds	r2, #64	; 0x40
 8002d10:	8812      	ldrh	r2, [r2, #0]
 8002d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80b5 	beq.w	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3355      	adds	r3, #85	; 0x55
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	f083 0301 	eor.w	r3, r3, #1
 8002d38:	b2d8      	uxtb	r0, r3
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3355      	adds	r3, #85	; 0x55
 8002d48:	4602      	mov	r2, r0
 8002d4a:	701a      	strb	r2, [r3, #0]
 8002d4c:	e09f      	b.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d109      	bne.n	8002d76 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3360      	adds	r3, #96	; 0x60
 8002d70:	2202      	movs	r2, #2
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e08b      	b.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3361      	adds	r3, #97	; 0x61
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d109      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3360      	adds	r3, #96	; 0x60
 8002d98:	2202      	movs	r2, #2
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e077      	b.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3361      	adds	r3, #97	; 0x61
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d109      	bne.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3360      	adds	r3, #96	; 0x60
 8002dc0:	2205      	movs	r2, #5
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e063      	b.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3361      	adds	r3, #97	; 0x61
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d009      	beq.n	8002dee <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3361      	adds	r3, #97	; 0x61
 8002de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d14f      	bne.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	202c      	movs	r0, #44	; 0x2c
 8002e06:	fb00 f303 	mul.w	r3, r0, r3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	335c      	adds	r3, #92	; 0x5c
 8002e0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	335c      	adds	r3, #92	; 0x5c
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d912      	bls.n	8002e4a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	335c      	adds	r3, #92	; 0x5c
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3360      	adds	r3, #96	; 0x60
 8002e44:	2204      	movs	r2, #4
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e021      	b.n	8002e8e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	2202      	movs	r2, #2
 8002e5a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e72:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e7a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	b2d9      	uxtb	r1, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	202c      	movs	r0, #44	; 0x2c
 8002eaa:	fb00 f303 	mul.w	r3, r0, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3360      	adds	r3, #96	; 0x60
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 f80c 	bl	8007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ebc:	bf00      	nop
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	0c5b      	lsrs	r3, r3, #17
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d004      	beq.n	8002f0a <HCD_RXQLVL_IRQHandler+0x46>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	f000 80a9 	beq.w	800305a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f08:	e0aa      	b.n	8003060 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a6 	beq.w	800305e <HCD_RXQLVL_IRQHandler+0x19a>
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3344      	adds	r3, #68	; 0x44
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 809b 	beq.w	800305e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3350      	adds	r3, #80	; 0x50
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	441a      	add	r2, r3
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	202c      	movs	r0, #44	; 0x2c
 8002f42:	fb00 f303 	mul.w	r3, r0, r3
 8002f46:	440b      	add	r3, r1
 8002f48:	334c      	adds	r3, #76	; 0x4c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d87a      	bhi.n	8003046 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3344      	adds	r3, #68	; 0x44
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	b292      	uxth	r2, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f002 f96f 	bl	800524c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3344      	adds	r3, #68	; 0x44
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	441a      	add	r2, r3
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	202c      	movs	r0, #44	; 0x2c
 8002f88:	fb00 f303 	mul.w	r3, r0, r3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3344      	adds	r3, #68	; 0x44
 8002f90:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3350      	adds	r3, #80	; 0x50
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	202c      	movs	r0, #44	; 0x2c
 8002fac:	fb00 f303 	mul.w	r3, r0, r3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3350      	adds	r3, #80	; 0x50
 8002fb4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	0cdb      	lsrs	r3, r3, #19
 8002fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3340      	adds	r3, #64	; 0x40
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d13c      	bne.n	800305e <HCD_RXQLVL_IRQHandler+0x19a>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d039      	beq.n	800305e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003000:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003008:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3354      	adds	r3, #84	; 0x54
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	f083 0301 	eor.w	r3, r3, #1
 8003030:	b2d8      	uxtb	r0, r3
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3354      	adds	r3, #84	; 0x54
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
      break;
 8003044:	e00b      	b.n	800305e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	3360      	adds	r3, #96	; 0x60
 8003054:	2204      	movs	r2, #4
 8003056:	701a      	strb	r2, [r3, #0]
      break;
 8003058:	e001      	b.n	800305e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800305e:	bf00      	nop
  }
}
 8003060:	bf00      	nop
 8003062:	3728      	adds	r7, #40	; 0x28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003094:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d10b      	bne.n	80030b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f004 fef6 	bl	8007e9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d132      	bne.n	8003128 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d126      	bne.n	8003122 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d113      	bne.n	8003104 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e6:	d106      	bne.n	80030f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 fa0c 	bl	800550c <USB_InitFSLSPClkSel>
 80030f4:	e011      	b.n	800311a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fa05 	bl	800550c <USB_InitFSLSPClkSel>
 8003102:	e00a      	b.n	800311a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003112:	461a      	mov	r2, r3
 8003114:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003118:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f004 fee8 	bl	8007ef0 <HAL_HCD_PortEnabled_Callback>
 8003120:	e002      	b.n	8003128 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f004 fef2 	bl	8007f0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	d103      	bne.n	800313a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f043 0320 	orr.w	r3, r3, #32
 8003138:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	6013      	str	r3, [r2, #0]
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e12b      	b.n	80033ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fc7a 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b4:	f001 f9fc 	bl	80045b0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a81      	ldr	r2, [pc, #516]	; (80033c4 <HAL_I2C_Init+0x274>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d807      	bhi.n	80031d4 <HAL_I2C_Init+0x84>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_I2C_Init+0x278>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e006      	b.n	80031e2 <HAL_I2C_Init+0x92>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a7d      	ldr	r2, [pc, #500]	; (80033cc <HAL_I2C_Init+0x27c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0e7      	b.n	80033ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a78      	ldr	r2, [pc, #480]	; (80033d0 <HAL_I2C_Init+0x280>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0c9b      	lsrs	r3, r3, #18
 80031f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_I2C_Init+0x274>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d802      	bhi.n	8003224 <HAL_I2C_Init+0xd4>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3301      	adds	r3, #1
 8003222:	e009      	b.n	8003238 <HAL_I2C_Init+0xe8>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_I2C_Init+0x284>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	3301      	adds	r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800324a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	495c      	ldr	r1, [pc, #368]	; (80033c4 <HAL_I2C_Init+0x274>)
 8003254:	428b      	cmp	r3, r1
 8003256:	d819      	bhi.n	800328c <HAL_I2C_Init+0x13c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e59      	subs	r1, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fbb1 f3f3 	udiv	r3, r1, r3
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800326c:	400b      	ands	r3, r1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_Init+0x138>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	e051      	b.n	800332c <HAL_I2C_Init+0x1dc>
 8003288:	2304      	movs	r3, #4
 800328a:	e04f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_I2C_Init+0x168>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e012      	b.n	80032de <HAL_I2C_Init+0x18e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x196>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e022      	b.n	800332c <HAL_I2C_Init+0x1dc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <HAL_I2C_Init+0x1bc>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1e58      	subs	r0, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	440b      	add	r3, r1
 80032fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	e00f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6809      	ldr	r1, [r1, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6911      	ldr	r1, [r2, #16]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	430b      	orrs	r3, r1
 800336e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	000186a0 	.word	0x000186a0
 80033c8:	001e847f 	.word	0x001e847f
 80033cc:	003d08ff 	.word	0x003d08ff
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e128      	b.n	800363c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a90      	ldr	r2, [pc, #576]	; (8003644 <HAL_I2S_Init+0x26c>)
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd fb7b 	bl	8000b00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003420:	f023 030f 	bic.w	r3, r3, #15
 8003424:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2202      	movs	r2, #2
 800342c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d060      	beq.n	80034f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800343e:	2310      	movs	r3, #16
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e001      	b.n	8003448 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d802      	bhi.n	8003456 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003456:	2001      	movs	r0, #1
 8003458:	f001 f9a0 	bl	800479c <HAL_RCCEx_GetPeriphCLKFreq>
 800345c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003466:	d125      	bne.n	80034b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	fbb2 f2f3 	udiv	r2, r2, r3
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	3305      	adds	r3, #5
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e01f      	b.n	80034d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	3305      	adds	r3, #5
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e00e      	b.n	80034d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	3305      	adds	r3, #5
 80034d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4a5c      	ldr	r2, [pc, #368]	; (8003648 <HAL_I2S_Init+0x270>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d902      	bls.n	800350c <HAL_I2S_Init+0x134>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2bff      	cmp	r3, #255	; 0xff
 800350a:	d907      	bls.n	800351c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e08f      	b.n	800363c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	430a      	orrs	r2, r1
 800352e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800353a:	f023 030f 	bic.w	r3, r3, #15
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6851      	ldr	r1, [r2, #4]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6992      	ldr	r2, [r2, #24]
 8003552:	430a      	orrs	r2, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d161      	bne.n	800362c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_I2S_Init+0x274>)
 800356c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <HAL_I2S_Init+0x278>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_I2S_Init+0x1a4>
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_I2S_Init+0x27c>)
 800357a:	e001      	b.n	8003580 <HAL_I2S_Init+0x1a8>
 800357c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <HAL_I2S_Init+0x278>)
 8003588:	428a      	cmp	r2, r1
 800358a:	d101      	bne.n	8003590 <HAL_I2S_Init+0x1b8>
 800358c:	4a31      	ldr	r2, [pc, #196]	; (8003654 <HAL_I2S_Init+0x27c>)
 800358e:	e001      	b.n	8003594 <HAL_I2S_Init+0x1bc>
 8003590:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003594:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003598:	f023 030f 	bic.w	r3, r3, #15
 800359c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_I2S_Init+0x278>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_I2S_Init+0x1d4>
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_I2S_Init+0x27c>)
 80035aa:	e001      	b.n	80035b0 <HAL_I2S_Init+0x1d8>
 80035ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b0:	2202      	movs	r2, #2
 80035b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_I2S_Init+0x278>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_I2S_Init+0x1ea>
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_I2S_Init+0x27c>)
 80035c0:	e001      	b.n	80035c6 <HAL_I2S_Init+0x1ee>
 80035c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d003      	beq.n	80035dc <HAL_I2S_Init+0x204>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e001      	b.n	80035e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003606:	4313      	orrs	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	4313      	orrs	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003614:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <HAL_I2S_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2S_Init+0x24c>
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_I2S_Init+0x27c>)
 8003622:	e001      	b.n	8003628 <HAL_I2S_Init+0x250>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	897a      	ldrh	r2, [r7, #10]
 800362a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800374f 	.word	0x0800374f
 8003648:	cccccccd 	.word	0xcccccccd
 800364c:	08003865 	.word	0x08003865
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400

08003658 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffb8 	bl	8003658 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	b292      	uxth	r2, r2
 8003704:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003736:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff93 	bl	800366c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b04      	cmp	r3, #4
 8003768:	d13a      	bne.n	80037e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d109      	bne.n	8003788 <I2S_IRQHandler+0x3a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d102      	bne.n	8003788 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffb4 	bl	80036f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d126      	bne.n	80037e0 <I2S_IRQHandler+0x92>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d11f      	bne.n	80037e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff50 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d136      	bne.n	800385a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d109      	bne.n	800380a <I2S_IRQHandler+0xbc>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d102      	bne.n	800380a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff45 	bl	8003694 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b08      	cmp	r3, #8
 8003812:	d122      	bne.n	800385a <I2S_IRQHandler+0x10c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d11b      	bne.n	800385a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003830:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff13 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4aa2      	ldr	r2, [pc, #648]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800387e:	4ba2      	ldr	r3, [pc, #648]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a9b      	ldr	r2, [pc, #620]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800389c:	4b9a      	ldr	r3, [pc, #616]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800389e:	e001      	b.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d004      	beq.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8099 	bne.w	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f925 	bl	8003b20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9c8 	bl	8003c80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d13a      	bne.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d035      	beq.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a7e      	ldr	r2, [pc, #504]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4979      	ldr	r1, [pc, #484]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003922:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800393e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fe88 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	f040 80be 	bne.w	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80b8 	beq.w	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003996:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039a2:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a4:	e001      	b.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4954      	ldr	r1, [pc, #336]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe4a 	bl	8003680 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ec:	e084      	b.n	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d107      	bne.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8be 	bl	8003b84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8fd 	bl	8003c1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d12f      	bne.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02a      	beq.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a50:	4b2d      	ldr	r3, [pc, #180]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4929      	ldr	r1, [pc, #164]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a66:	e001      	b.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fdfa 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d131      	bne.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02c      	beq.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003aaa:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aac:	e001      	b.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4912      	ldr	r1, [pc, #72]	; (8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aba:	428b      	cmp	r3, r1
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ac0:	e001      	b.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ada:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fdc5 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af6:	e000      	b.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003af8:	bf00      	nop
}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40003400 	.word	0x40003400

08003b0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c99      	adds	r1, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6251      	str	r1, [r2, #36]	; 0x24
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ffc9 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c99      	adds	r1, r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6251      	str	r1, [r2, #36]	; 0x24
 8003b96:	8819      	ldrh	r1, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x22>
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003ba4:	e001      	b.n	8003baa <I2SEx_TxISR_I2SExt+0x26>
 8003ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003baa:	460a      	mov	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d121      	bne.n	8003c0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <I2SEx_TxISR_I2SExt+0x50>
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003bd2:	e001      	b.n	8003bd8 <I2SEx_TxISR_I2SExt+0x54>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	490d      	ldr	r1, [pc, #52]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003be0:	428b      	cmp	r3, r1
 8003be2:	d101      	bne.n	8003be8 <I2SEx_TxISR_I2SExt+0x64>
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003be6:	e001      	b.n	8003bec <I2SEx_TxISR_I2SExt+0x68>
 8003be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff81 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40003800 	.word	0x40003800
 8003c18:	40003400 	.word	0x40003400

08003c1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68d8      	ldr	r0, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	1c99      	adds	r1, r3, #2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c34:	b282      	uxth	r2, r0
 8003c36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d113      	bne.n	8003c78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ff4a 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <I2SEx_RxISR_I2SExt+0x16>
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003c94:	e001      	b.n	8003c9a <I2SEx_RxISR_I2SExt+0x1a>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9a:	68d8      	ldr	r0, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	1c99      	adds	r1, r3, #2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ca6:	b282      	uxth	r2, r0
 8003ca8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d121      	bne.n	8003d06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <I2SEx_RxISR_I2SExt+0x50>
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003cce:	e001      	b.n	8003cd4 <I2SEx_RxISR_I2SExt+0x54>
 8003cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	490d      	ldr	r1, [pc, #52]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	d101      	bne.n	8003ce4 <I2SEx_RxISR_I2SExt+0x64>
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003ce2:	e001      	b.n	8003ce8 <I2SEx_RxISR_I2SExt+0x68>
 8003ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff03 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40003800 	.word	0x40003800
 8003d14:	40003400 	.word	0x40003400

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e264      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	4ba3      	ldr	r3, [pc, #652]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4ba0      	ldr	r3, [pc, #640]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b9d      	ldr	r3, [pc, #628]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b99      	ldr	r3, [pc, #612]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e23f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b91      	ldr	r3, [pc, #580]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a90      	ldr	r2, [pc, #576]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b8b      	ldr	r3, [pc, #556]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a8a      	ldr	r2, [pc, #552]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a87      	ldr	r2, [pc, #540]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b84      	ldr	r3, [pc, #528]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a83      	ldr	r2, [pc, #524]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a80      	ldr	r2, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd f924 	bl	800101c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd f920 	bl	800101c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e204      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b76      	ldr	r3, [pc, #472]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f910 	bl	800101c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd f90c 	bl	800101c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f0      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	4b65      	ldr	r3, [pc, #404]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b62      	ldr	r3, [pc, #392]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b5f      	ldr	r3, [pc, #380]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b5c      	ldr	r3, [pc, #368]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c4      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b56      	ldr	r3, [pc, #344]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4952      	ldr	r1, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <HAL_RCC_OscConfig+0x2b0>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f8c5 	bl	800101c <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd f8c1 	bl	800101c <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a5      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4940      	ldr	r1, [pc, #256]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <HAL_RCC_OscConfig+0x2b0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f8a4 	bl	800101c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f8a0 	bl	800101c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e184      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d030      	beq.n	8003f64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <HAL_RCC_OscConfig+0x2b4>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd f884 	bl	800101c <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd f880 	bl	800101c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e164      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
 8003f36:	e015      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_RCC_OscConfig+0x2b4>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f86d 	bl	800101c <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd f869 	bl	800101c <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e14d      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a0 	beq.w	80040b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d121      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_RCC_OscConfig+0x2b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a07      	ldr	r2, [pc, #28]	; (8003fd0 <HAL_RCC_OscConfig+0x2b8>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fd f82f 	bl	800101c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e011      	b.n	8003fe6 <HAL_RCC_OscConfig+0x2ce>
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	42470000 	.word	0x42470000
 8003fcc:	42470e80 	.word	0x42470e80
 8003fd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd4:	f7fd f822 	bl	800101c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e106      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCC_OscConfig+0x4e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d106      	bne.n	8004008 <HAL_RCC_OscConfig+0x2f0>
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4a80      	ldr	r2, [pc, #512]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6713      	str	r3, [r2, #112]	; 0x70
 8004006:	e01c      	b.n	8004042 <HAL_RCC_OscConfig+0x32a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d10c      	bne.n	800402a <HAL_RCC_OscConfig+0x312>
 8004010:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a7a      	ldr	r2, [pc, #488]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	4b78      	ldr	r3, [pc, #480]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
 8004028:	e00b      	b.n	8004042 <HAL_RCC_OscConfig+0x32a>
 800402a:	4b75      	ldr	r3, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a74      	ldr	r2, [pc, #464]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
 8004036:	4b72      	ldr	r3, [pc, #456]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a71      	ldr	r2, [pc, #452]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 800403c:	f023 0304 	bic.w	r3, r3, #4
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d015      	beq.n	8004076 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404a:	f7fc ffe7 	bl	800101c <HAL_GetTick>
 800404e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004050:	e00a      	b.n	8004068 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004052:	f7fc ffe3 	bl	800101c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0c5      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	4b65      	ldr	r3, [pc, #404]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ee      	beq.n	8004052 <HAL_RCC_OscConfig+0x33a>
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fc ffd1 	bl	800101c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7fc ffcd 	bl	800101c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f241 3288 	movw	r2, #5000	; 0x1388
 800408c:	4293      	cmp	r3, r2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0af      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004094:	4b5a      	ldr	r3, [pc, #360]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ee      	bne.n	800407e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d105      	bne.n	80040b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b56      	ldr	r3, [pc, #344]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a55      	ldr	r2, [pc, #340]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 809b 	beq.w	80041f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040bc:	4b50      	ldr	r3, [pc, #320]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030c 	and.w	r3, r3, #12
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	d05c      	beq.n	8004182 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d141      	bne.n	8004154 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d0:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fc ffa1 	bl	800101c <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fc ff9d 	bl	800101c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e081      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f0:	4b43      	ldr	r3, [pc, #268]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f0      	bne.n	80040de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	019b      	lsls	r3, r3, #6
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	4937      	ldr	r1, [pc, #220]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412c:	f7fc ff76 	bl	800101c <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004134:	f7fc ff72 	bl	800101c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e056      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004146:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x41c>
 8004152:	e04e      	b.n	80041f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fc ff5f 	bl	800101c <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fc ff5b 	bl	800101c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e03f      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004174:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x44a>
 8004180:	e037      	b.n	80041f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e032      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800418e:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d028      	beq.n	80041ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d121      	bne.n	80041ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d11a      	bne.n	80041ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d111      	bne.n	80041ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	3b01      	subs	r3, #1
 80041d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40007000 	.word	0x40007000
 8004200:	40023800 	.word	0x40023800
 8004204:	42470060 	.word	0x42470060

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cc      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d90c      	bls.n	8004244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800427e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d044      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d119      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e067      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4934      	ldr	r1, [pc, #208]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fc fe90 	bl	800101c <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fc fe8c 	bl	800101c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d20c      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc fdf0 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08008540 	.word	0x08008540
 80043cc:	20000008 	.word	0x20000008
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	607b      	str	r3, [r7, #4]
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	2300      	movs	r3, #0
 80043e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 80bd 	bhi.w	8004578 <HAL_RCC_GetSysClockFreq+0x1a4>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x3a>
 8004406:	e0b7      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800440a:	60bb      	str	r3, [r7, #8]
       break;
 800440c:	e0b7      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004410:	60bb      	str	r3, [r7, #8]
      break;
 8004412:	e0b4      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004414:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04d      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	ea02 0800 	and.w	r8, r2, r0
 8004442:	ea03 0901 	and.w	r9, r3, r1
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	014b      	lsls	r3, r1, #5
 8004454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004458:	0142      	lsls	r2, r0, #5
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	ebb0 0008 	subs.w	r0, r0, r8
 8004462:	eb61 0109 	sbc.w	r1, r1, r9
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	018b      	lsls	r3, r1, #6
 8004470:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004474:	0182      	lsls	r2, r0, #6
 8004476:	1a12      	subs	r2, r2, r0
 8004478:	eb63 0301 	sbc.w	r3, r3, r1
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	00d9      	lsls	r1, r3, #3
 8004486:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800448a:	00d0      	lsls	r0, r2, #3
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	eb12 0208 	adds.w	r2, r2, r8
 8004494:	eb43 0309 	adc.w	r3, r3, r9
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	f04f 0100 	mov.w	r1, #0
 80044a0:	0259      	lsls	r1, r3, #9
 80044a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044a6:	0250      	lsls	r0, r2, #9
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	f7fb fe86 	bl	80001c8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e04a      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	461a      	mov	r2, r3
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	ea02 0400 	and.w	r4, r2, r0
 80044de:	ea03 0501 	and.w	r5, r3, r1
 80044e2:	4620      	mov	r0, r4
 80044e4:	4629      	mov	r1, r5
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	014b      	lsls	r3, r1, #5
 80044f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044f4:	0142      	lsls	r2, r0, #5
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	1b00      	subs	r0, r0, r4
 80044fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	018b      	lsls	r3, r1, #6
 800450a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800450e:	0182      	lsls	r2, r0, #6
 8004510:	1a12      	subs	r2, r2, r0
 8004512:	eb63 0301 	sbc.w	r3, r3, r1
 8004516:	f04f 0000 	mov.w	r0, #0
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	00d9      	lsls	r1, r3, #3
 8004520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004524:	00d0      	lsls	r0, r2, #3
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	1912      	adds	r2, r2, r4
 800452c:	eb45 0303 	adc.w	r3, r5, r3
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0299      	lsls	r1, r3, #10
 800453a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800453e:	0290      	lsls	r0, r2, #10
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	f7fb fe3a 	bl	80001c8 <__aeabi_uldivmod>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4613      	mov	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800455c:	4b0b      	ldr	r3, [pc, #44]	; (800458c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	60bb      	str	r3, [r7, #8]
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800457a:	60bb      	str	r3, [r7, #8]
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	68bb      	ldr	r3, [r7, #8]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	00f42400 	.word	0x00f42400
 8004594:	007a1200 	.word	0x007a1200

08004598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <HAL_RCC_GetHCLKFreq+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	20000008 	.word	0x20000008

080045b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b4:	f7ff fff0 	bl	8004598 <HAL_RCC_GetHCLKFreq>
 80045b8:	4602      	mov	r2, r0
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	0a9b      	lsrs	r3, r3, #10
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	4903      	ldr	r1, [pc, #12]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c6:	5ccb      	ldrb	r3, [r1, r3]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40023800 	.word	0x40023800
 80045d4:	08008550 	.word	0x08008550

080045d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d035      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004600:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004606:	f7fc fd09 	bl	800101c <HAL_GetTick>
 800460a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800460e:	f7fc fd05 	bl	800101c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0b0      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004620:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	019a      	lsls	r2, r3, #6
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	071b      	lsls	r3, r3, #28
 8004638:	4955      	ldr	r1, [pc, #340]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004640:	4b52      	ldr	r3, [pc, #328]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004642:	2201      	movs	r2, #1
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fc fce9 	bl	800101c <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fc fce5 	bl	800101c <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e090      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8083 	beq.w	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004688:	6413      	str	r3, [r2, #64]	; 0x40
 800468a:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a3e      	ldr	r2, [pc, #248]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046a2:	f7fc fcbb 	bl	800101c <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7fc fcb7 	bl	800101c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e062      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046c8:	4b31      	ldr	r3, [pc, #196]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02f      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d028      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046f6:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d114      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800470e:	f7fc fc85 	bl	800101c <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fc fc81 	bl	800101c <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e02a      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	4b18      	ldr	r3, [pc, #96]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ee      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004744:	d10d      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004746:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	490d      	ldr	r1, [pc, #52]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	e005      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800476c:	6093      	str	r3, [r2, #8]
 800476e:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477a:	4905      	ldr	r1, [pc, #20]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	42470068 	.word	0x42470068
 8004790:	40023800 	.word	0x40023800
 8004794:	40007000 	.word	0x40007000
 8004798:	42470e40 	.word	0x42470e40

0800479c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d13e      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047ba:	4b23      	ldr	r3, [pc, #140]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d12f      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047d0:	4b1e      	ldr	r3, [pc, #120]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047d2:	617b      	str	r3, [r7, #20]
          break;
 80047d4:	e02f      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e2:	d108      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fe:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800481a:	4b0b      	ldr	r3, [pc, #44]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800481c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004820:	0f1b      	lsrs	r3, r3, #28
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
          break;
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
          break;
 8004834:	bf00      	nop
        }
      }
      break;
 8004836:	bf00      	nop
    }
  }
  return frequency;
 8004838:	697b      	ldr	r3, [r7, #20]
}
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800
 800484c:	00bb8000 	.word	0x00bb8000
 8004850:	007a1200 	.word	0x007a1200
 8004854:	00f42400 	.word	0x00f42400

08004858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e07b      	b.n	8004962 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487a:	d009      	beq.n	8004890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	61da      	str	r2, [r3, #28]
 8004882:	e005      	b.n	8004890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc f9a8 	bl	8000c00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d8:	431a      	orrs	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	ea42 0103 	orr.w	r1, r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	0c1b      	lsrs	r3, r3, #16
 800492e:	f003 0104 	and.w	r1, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0210 	and.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b082      	sub	sp, #8
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e041      	b.n	8004a00 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d106      	bne.n	8004996 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7fc f97d 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2202      	movs	r2, #2
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f000 f9cd 	bl	8004d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d001      	beq.n	8004a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e04e      	b.n	8004abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d022      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4a:	d01d      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1f      	ldr	r2, [pc, #124]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d018      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d013      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00e      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d009      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d004      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d111      	bne.n	8004aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b06      	cmp	r3, #6
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	e007      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	40000400 	.word	0x40000400
 8004ad4:	40000800 	.word	0x40000800
 8004ad8:	40000c00 	.word	0x40000c00
 8004adc:	40010400 	.word	0x40010400
 8004ae0:	40014000 	.word	0x40014000
 8004ae4:	40001800 	.word	0x40001800

08004ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d122      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d11b      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0202 	mvn.w	r2, #2
 8004b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8ee 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8e0 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f8f1 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d122      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d11b      	bne.n	8004b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0204 	mvn.w	r2, #4
 8004b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8c4 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004b84:	e005      	b.n	8004b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8b6 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f8c7 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0208 	mvn.w	r2, #8
 8004bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f89a 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f88c 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f89d 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b10      	cmp	r3, #16
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0210 	mvn.w	r2, #16
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2208      	movs	r2, #8
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f870 	bl	8004d0c <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f862 	bl	8004cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f873 	bl	8004d20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0201 	mvn.w	r2, #1
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fc f86e 	bl	8000d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b80      	cmp	r3, #128	; 0x80
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f97e 	bl	8004f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f838 	bl	8004d34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0220 	mvn.w	r2, #32
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f948 	bl	8004f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d00f      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3d      	ldr	r2, [pc, #244]	; (8004e60 <TIM_Base_SetConfig+0x118>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00b      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <TIM_Base_SetConfig+0x11c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d007      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a3b      	ldr	r2, [pc, #236]	; (8004e68 <TIM_Base_SetConfig+0x120>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0x40>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a3a      	ldr	r2, [pc, #232]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d108      	bne.n	8004d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d02b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da8:	d027      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <TIM_Base_SetConfig+0x118>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d023      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <TIM_Base_SetConfig+0x11c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d01f      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2a      	ldr	r2, [pc, #168]	; (8004e68 <TIM_Base_SetConfig+0x120>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d01b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d017      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <TIM_Base_SetConfig+0x128>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <TIM_Base_SetConfig+0x12c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <TIM_Base_SetConfig+0x130>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00b      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <TIM_Base_SetConfig+0x134>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <TIM_Base_SetConfig+0x138>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d003      	beq.n	8004dfa <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a23      	ldr	r2, [pc, #140]	; (8004e84 <TIM_Base_SetConfig+0x13c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d108      	bne.n	8004e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <TIM_Base_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d003      	beq.n	8004e40 <TIM_Base_SetConfig+0xf8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <TIM_Base_SetConfig+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d103      	bne.n	8004e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	615a      	str	r2, [r3, #20]
}
 8004e4e:	bf00      	nop
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40010400 	.word	0x40010400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	40014400 	.word	0x40014400
 8004e78:	40014800 	.word	0x40014800
 8004e7c:	40001800 	.word	0x40001800
 8004e80:	40001c00 	.word	0x40001c00
 8004e84:	40002000 	.word	0x40002000

08004e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e05a      	b.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d022      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d01d      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10c      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40001800 	.word	0x40001800

08004f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa8:	b084      	sub	sp, #16
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	f107 001c 	add.w	r0, r7, #28
 8004fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d122      	bne.n	8005006 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9a0 	bl	8005340 <USB_CoreReset>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]
 8005004:	e01a      	b.n	800503c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f994 	bl	8005340 <USB_CoreReset>
 8005018:	4603      	mov	r3, r0
 800501a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800501c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
 800502e:	e005      	b.n	800503c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10b      	bne.n	800505a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f043 0206 	orr.w	r2, r3, #6
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr

0800506a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 0201 	bic.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d115      	bne.n	80050fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fb ffa9 	bl	8001034 <HAL_Delay>
      ms++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f91a 	bl	8005322 <USB_GetMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d01e      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b31      	cmp	r3, #49	; 0x31
 80050f8:	d9f0      	bls.n	80050dc <USB_SetCurrentMode+0x2e>
 80050fa:	e01a      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800510e:	2001      	movs	r0, #1
 8005110:	f7fb ff90 	bl	8001034 <HAL_Delay>
      ms++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f901 	bl	8005322 <USB_GetMode>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b31      	cmp	r3, #49	; 0x31
 800512a:	d9f0      	bls.n	800510e <USB_SetCurrentMode+0x60>
 800512c:	e001      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e005      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b32      	cmp	r3, #50	; 0x32
 8005136:	d101      	bne.n	800513c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4a08      	ldr	r2, [pc, #32]	; (800518c <USB_FlushTxFifo+0x44>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e006      	b.n	8005180 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0320 	and.w	r3, r3, #32
 800517a:	2b20      	cmp	r3, #32
 800517c:	d0f1      	beq.n	8005162 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	00030d40 	.word	0x00030d40

08005190 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2210      	movs	r2, #16
 80051a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <USB_FlushRxFifo+0x3c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e006      	b.n	80051c0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0310 	and.w	r3, r3, #16
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d0f1      	beq.n	80051a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	00030d40 	.word	0x00030d40

080051d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b089      	sub	sp, #36	; 0x24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	460b      	mov	r3, r1
 80051e0:	71fb      	strb	r3, [r7, #7]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d123      	bne.n	800523e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051f6:	88bb      	ldrh	r3, [r7, #4]
 80051f8:	3303      	adds	r3, #3
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e018      	b.n	8005236 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	031a      	lsls	r2, r3, #12
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005210:	461a      	mov	r2, r3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	3301      	adds	r3, #1
 800521c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3301      	adds	r3, #1
 8005222:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	3301      	adds	r3, #1
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	429a      	cmp	r2, r3
 800523c:	d3e2      	bcc.n	8005204 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3724      	adds	r7, #36	; 0x24
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800524c:	b480      	push	{r7}
 800524e:	b08b      	sub	sp, #44	; 0x2c
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	089b      	lsrs	r3, r3, #2
 8005266:	b29b      	uxth	r3, r3
 8005268:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
 8005276:	e014      	b.n	80052a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	601a      	str	r2, [r3, #0]
    pDest++;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	3301      	adds	r3, #1
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	3301      	adds	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	3301      	adds	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	3301      	adds	r3, #1
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	3301      	adds	r3, #1
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	6a3a      	ldr	r2, [r7, #32]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3e6      	bcc.n	8005278 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052aa:	8bfb      	ldrh	r3, [r7, #30]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01e      	beq.n	80052ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	461a      	mov	r2, r3
 80052bc:	f107 0310 	add.w	r3, r7, #16
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	701a      	strb	r2, [r3, #0]
      i++;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	3301      	adds	r3, #1
 80052da:	623b      	str	r3, [r7, #32]
      pDest++;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	3301      	adds	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052e2:	8bfb      	ldrh	r3, [r7, #30]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052e8:	8bfb      	ldrh	r3, [r7, #30]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1ea      	bne.n	80052c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	372c      	adds	r7, #44	; 0x2c
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3301      	adds	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	4a13      	ldr	r2, [pc, #76]	; (80053a0 <USB_CoreReset+0x60>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e01a      	b.n	8005392 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	daf3      	bge.n	800534c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <USB_CoreReset+0x60>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e006      	b.n	8005392 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d0f1      	beq.n	8005374 <USB_CoreReset+0x34>

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	00030d40 	.word	0x00030d40

080053a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053a4:	b084      	sub	sp, #16
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	f107 001c 	add.w	r0, r7, #28
 80053b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c0:	461a      	mov	r2, r3
 80053c2:	2300      	movs	r3, #0
 80053c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10a      	bne.n	8005412 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e014      	b.n	800543c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e009      	b.n	800543c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005436:	f023 0304 	bic.w	r3, r3, #4
 800543a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800543c:	2110      	movs	r1, #16
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fe82 	bl	8005148 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fea3 	bl	8005190 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e015      	b.n	800547c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	461a      	mov	r2, r3
 800545e:	f04f 33ff 	mov.w	r3, #4294967295
 8005462:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	461a      	mov	r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3e5      	bcc.n	8005450 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <USB_HostInit+0x154>)
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <USB_HostInit+0x158>)
 80054b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80054b4:	e009      	b.n	80054ca <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <USB_HostInit+0x15c>)
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <USB_HostInit+0x160>)
 80054c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f043 0210 	orr.w	r2, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4b09      	ldr	r3, [pc, #36]	; (8005508 <USB_HostInit+0x164>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f4:	b004      	add	sp, #16
 80054f6:	4770      	bx	lr
 80054f8:	01000200 	.word	0x01000200
 80054fc:	00e00300 	.word	0x00e00300
 8005500:	00600080 	.word	0x00600080
 8005504:	004000e0 	.word	0x004000e0
 8005508:	a3200008 	.word	0xa3200008

0800550c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005544:	4313      	orrs	r3, r2
 8005546:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005554:	461a      	mov	r2, r3
 8005556:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800555a:	6053      	str	r3, [r2, #4]
 800555c:	e009      	b.n	8005572 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	2b02      	cmp	r3, #2
 8005562:	d106      	bne.n	8005572 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800556a:	461a      	mov	r2, r3
 800556c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005570:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055b0:	2064      	movs	r0, #100	; 0x64
 80055b2:	f7fb fd3f 	bl	8001034 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80055be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fb fd35 	bl	8001034 <HAL_Delay>

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80055f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <USB_DriveVbus+0x44>
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d106      	bne.n	8005618 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005612:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005616:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005622:	d109      	bne.n	8005638 <USB_DriveVbus+0x64>
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005636:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005646:	b480      	push	{r7}
 8005648:	b085      	sub	sp, #20
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	0c5b      	lsrs	r3, r3, #17
 8005664:	f003 0303 	and.w	r3, r3, #3
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	b29b      	uxth	r3, r3
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	70fb      	strb	r3, [r7, #3]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70bb      	strb	r3, [r7, #2]
 80056ae:	4613      	mov	r3, r2
 80056b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	461a      	mov	r2, r3
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056d2:	2b03      	cmp	r3, #3
 80056d4:	d87e      	bhi.n	80057d4 <USB_HC_Init+0x13c>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <USB_HC_Init+0x44>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	08005797 	.word	0x08005797
 80056e4:	080056ed 	.word	0x080056ed
 80056e8:	08005759 	.word	0x08005759
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	461a      	mov	r2, r3
 80056fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80056fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005700:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005704:	2b00      	cmp	r3, #0
 8005706:	da10      	bge.n	800572a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	440a      	add	r2, r1
 800571e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005726:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005728:	e057      	b.n	80057da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d051      	beq.n	80057da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	78fa      	ldrb	r2, [r7, #3]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005750:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005754:	60d3      	str	r3, [r2, #12]
      break;
 8005756:	e040      	b.n	80057da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	f240 639d 	movw	r3, #1693	; 0x69d
 800576a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800576c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da34      	bge.n	80057de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	440a      	add	r2, r1
 800578a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800578e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005792:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005794:	e023      	b.n	80057de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005796:	78fb      	ldrb	r3, [r7, #3]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4413      	add	r3, r2
 800579e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a2:	461a      	mov	r2, r3
 80057a4:	f240 2325 	movw	r3, #549	; 0x225
 80057a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	da17      	bge.n	80057e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057b2:	78fb      	ldrb	r3, [r7, #3]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	78fa      	ldrb	r2, [r7, #3]
 80057c2:	0151      	lsls	r1, r2, #5
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	440a      	add	r2, r1
 80057c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80057d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057d2:	e006      	b.n	80057e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	77fb      	strb	r3, [r7, #31]
      break;
 80057d8:	e004      	b.n	80057e4 <USB_HC_Init+0x14c>
      break;
 80057da:	bf00      	nop
 80057dc:	e002      	b.n	80057e4 <USB_HC_Init+0x14c>
      break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <USB_HC_Init+0x14c>
      break;
 80057e2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	2101      	movs	r1, #1
 80057f4:	fa01 f303 	lsl.w	r3, r1, r3
 80057f8:	6939      	ldr	r1, [r7, #16]
 80057fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80057fe:	4313      	orrs	r3, r2
 8005800:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800580e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005812:	2b00      	cmp	r3, #0
 8005814:	da03      	bge.n	800581e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	e001      	b.n	8005822 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ff0f 	bl	8005646 <USB_GetHostSpeed>
 8005828:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800582a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800582e:	2b02      	cmp	r3, #2
 8005830:	d106      	bne.n	8005840 <USB_HC_Init+0x1a8>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d003      	beq.n	8005840 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e001      	b.n	8005844 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005844:	787b      	ldrb	r3, [r7, #1]
 8005846:	059b      	lsls	r3, r3, #22
 8005848:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800584c:	78bb      	ldrb	r3, [r7, #2]
 800584e:	02db      	lsls	r3, r3, #11
 8005850:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005854:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800585a:	049b      	lsls	r3, r3, #18
 800585c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005860:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005862:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005864:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005868:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	0159      	lsls	r1, r3, #5
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	440b      	add	r3, r1
 8005876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005880:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005886:	2b03      	cmp	r3, #3
 8005888:	d10f      	bne.n	80058aa <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3720      	adds	r7, #32
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08c      	sub	sp, #48	; 0x30
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80058cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02d      	beq.n	800593a <USB_HC_StartXfer+0x86>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	791b      	ldrb	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d129      	bne.n	800593a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d117      	bne.n	800591c <USB_HC_StartXfer+0x68>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	79db      	ldrb	r3, [r3, #7]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <USB_HC_StartXfer+0x48>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	79db      	ldrb	r3, [r3, #7]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d10f      	bne.n	800591c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	6a3a      	ldr	r2, [r7, #32]
 8005910:	440a      	add	r2, r1
 8005912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <USB_HC_StartXfer+0x86>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	795b      	ldrb	r3, [r3, #5]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d107      	bne.n	800593a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	4619      	mov	r1, r3
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fa2f 	bl	8005d94 <USB_DoPing>
      return HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	e0f8      	b.n	8005b2c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d018      	beq.n	8005974 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	8912      	ldrh	r2, [r2, #8]
 800594a:	4413      	add	r3, r2
 800594c:	3b01      	subs	r3, #1
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	8912      	ldrh	r2, [r2, #8]
 8005952:	fbb3 f3f2 	udiv	r3, r3, r2
 8005956:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005958:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800595a:	8b7b      	ldrh	r3, [r7, #26]
 800595c:	429a      	cmp	r2, r3
 800595e:	d90b      	bls.n	8005978 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005960:	8b7b      	ldrh	r3, [r7, #26]
 8005962:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	8912      	ldrh	r2, [r2, #8]
 800596a:	fb02 f203 	mul.w	r2, r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	611a      	str	r2, [r3, #16]
 8005972:	e001      	b.n	8005978 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005974:	2301      	movs	r3, #1
 8005976:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	78db      	ldrb	r3, [r3, #3]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	8912      	ldrh	r2, [r2, #8]
 8005986:	fb02 f203 	mul.w	r2, r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	611a      	str	r2, [r3, #16]
 800598e:	e003      	b.n	8005998 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059a2:	04d9      	lsls	r1, r3, #19
 80059a4:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <USB_HC_StartXfer+0x280>)
 80059a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	7a9b      	ldrb	r3, [r3, #10]
 80059ae:	075b      	lsls	r3, r3, #29
 80059b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059b4:	69f9      	ldr	r1, [r7, #28]
 80059b6:	0148      	lsls	r0, r1, #5
 80059b8:	6a39      	ldr	r1, [r7, #32]
 80059ba:	4401      	add	r1, r0
 80059bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80059c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059da:	460a      	mov	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf0c      	ite	eq
 80059ee:	2301      	moveq	r3, #1
 80059f0:	2300      	movne	r3, #0
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a14:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	7e7b      	ldrb	r3, [r7, #25]
 8005a26:	075b      	lsls	r3, r3, #29
 8005a28:	69f9      	ldr	r1, [r7, #28]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005a34:	4313      	orrs	r3, r2
 8005a36:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a4e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	78db      	ldrb	r3, [r3, #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d004      	beq.n	8005a62 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e003      	b.n	8005a6a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a68:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a70:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	461a      	mov	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e04e      	b.n	8005b2c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	78db      	ldrb	r3, [r3, #3]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d149      	bne.n	8005b2a <USB_HC_StartXfer+0x276>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d045      	beq.n	8005b2a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	79db      	ldrb	r3, [r3, #7]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d830      	bhi.n	8005b08 <USB_HC_StartXfer+0x254>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <USB_HC_StartXfer+0x1f8>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005ae1 	.word	0x08005ae1
 8005ab4:	08005abd 	.word	0x08005abd
 8005ab8:	08005ae1 	.word	0x08005ae1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	3303      	adds	r3, #3
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ac6:	8afa      	ldrh	r2, [r7, #22]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d91c      	bls.n	8005b0c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ade:	e015      	b.n	8005b0c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005aea:	8afa      	ldrh	r2, [r7, #22]
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d90a      	bls.n	8005b10 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b06:	e003      	b.n	8005b10 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b08:	bf00      	nop
 8005b0a:	e002      	b.n	8005b12 <USB_HC_StartXfer+0x25e>
        break;
 8005b0c:	bf00      	nop
 8005b0e:	e000      	b.n	8005b12 <USB_HC_StartXfer+0x25e>
        break;
 8005b10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	68d9      	ldr	r1, [r3, #12]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	785a      	ldrb	r2, [r3, #1]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2000      	movs	r0, #0
 8005b22:	9000      	str	r0, [sp, #0]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff fb53 	bl	80051d0 <USB_WritePacket>
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3728      	adds	r7, #40	; 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	1ff80000 	.word	0x1ff80000

08005b38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	b29b      	uxth	r3, r3
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b089      	sub	sp, #36	; 0x24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	0c9b      	lsrs	r3, r3, #18
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	0fdb      	lsrs	r3, r3, #31
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d104      	bne.n	8005bb4 <USB_HC_Halt+0x5a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e0e8      	b.n	8005d86 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <USB_HC_Halt+0x66>
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d173      	bne.n	8005ca8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f040 80cb 	bne.w	8005d84 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d143      	bne.n	8005c82 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c18:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	0151      	lsls	r1, r2, #5
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	440a      	add	r2, r1
 8005c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c58:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c66:	d81d      	bhi.n	8005ca4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7e:	d0ec      	beq.n	8005c5a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c80:	e080      	b.n	8005d84 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	0151      	lsls	r1, r2, #5
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	440a      	add	r2, r1
 8005c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ca2:	e06f      	b.n	8005d84 <USB_HC_Halt+0x22a>
            break;
 8005ca4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ca6:	e06d      	b.n	8005d84 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d143      	bne.n	8005d60 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d36:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d44:	d81d      	bhi.n	8005d82 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5c:	d0ec      	beq.n	8005d38 <USB_HC_Halt+0x1de>
 8005d5e:	e011      	b.n	8005d84 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e000      	b.n	8005d84 <USB_HC_Halt+0x22a>
          break;
 8005d82:	bf00      	nop
    }
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3724      	adds	r7, #36	; 0x24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005da8:	2301      	movs	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	04da      	lsls	r2, r3, #19
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <USB_DoPing+0x74>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ddc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005de4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df2:	461a      	mov	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	1ff80000 	.word	0x1ff80000

08005e0c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f935 	bl	800508c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005e22:	2110      	movs	r1, #16
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff f98f 	bl	8005148 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff f9b0 	bl	8005190 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e01f      	b.n	8005e76 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e4c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e5c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3301      	adds	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d9dc      	bls.n	8005e36 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
 8005e80:	e034      	b.n	8005eec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ea8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ec8:	d80c      	bhi.n	8005ee4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee0:	d0ec      	beq.n	8005ebc <USB_StopHost+0xb0>
 8005ee2:	e000      	b.n	8005ee6 <USB_StopHost+0xda>
        break;
 8005ee4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	2b0f      	cmp	r3, #15
 8005ef0:	d9c7      	bls.n	8005e82 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f04f 33ff 	mov.w	r3, #4294967295
 8005efe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295
 8005f06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff f8ae 	bl	800506a <USB_EnableGlobalInt>

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b089      	sub	sp, #36	; 0x24
 8005f1c:	af04      	add	r7, sp, #16
 8005f1e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f20:	2301      	movs	r3, #1
 8005f22:	2202      	movs	r2, #2
 8005f24:	2102      	movs	r1, #2
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fc66 	bl	80067f8 <USBH_FindInterface>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	2bff      	cmp	r3, #255	; 0xff
 8005f34:	d002      	beq.n	8005f3c <USBH_CDC_InterfaceInit+0x24>
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d901      	bls.n	8005f40 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e13d      	b.n	80061bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fc3b 	bl	80067c0 <USBH_SelectInterface>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005f54:	2302      	movs	r3, #2
 8005f56:	e131      	b.n	80061bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005f5e:	2050      	movs	r0, #80	; 0x50
 8005f60:	f002 fa00 	bl	8008364 <malloc>
 8005f64:	4603      	mov	r3, r0
 8005f66:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e11f      	b.n	80061bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005f7c:	2250      	movs	r2, #80	; 0x50
 8005f7e:	2100      	movs	r1, #0
 8005f80:	68b8      	ldr	r0, [r7, #8]
 8005f82:	f002 f9ff 	bl	8008384 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005f86:	7bfb      	ldrb	r3, [r7, #15]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	211a      	movs	r1, #26
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da15      	bge.n	8005fca <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	211a      	movs	r1, #26
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	4413      	add	r3, r2
 8005faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	211a      	movs	r1, #26
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fe32 	bl	8007c3a <USBH_AllocPipe>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	461a      	mov	r2, r3
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	7819      	ldrb	r1, [r3, #0]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	7858      	ldrb	r0, [r3, #1]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	8952      	ldrh	r2, [r2, #10]
 8005ff6:	9202      	str	r2, [sp, #8]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	9201      	str	r2, [sp, #4]
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4623      	mov	r3, r4
 8006000:	4602      	mov	r2, r0
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fdea 	bl	8007bdc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2200      	movs	r2, #0
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f002 f8f9 	bl	8008208 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006016:	2300      	movs	r3, #0
 8006018:	2200      	movs	r2, #0
 800601a:	210a      	movs	r1, #10
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fbeb 	bl	80067f8 <USBH_FindInterface>
 8006022:	4603      	mov	r3, r0
 8006024:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2bff      	cmp	r3, #255	; 0xff
 800602a:	d002      	beq.n	8006032 <USBH_CDC_InterfaceInit+0x11a>
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d901      	bls.n	8006036 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006032:	2302      	movs	r3, #2
 8006034:	e0c2      	b.n	80061bc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006036:	7bfb      	ldrb	r3, [r7, #15]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	211a      	movs	r1, #26
 800603c:	fb01 f303 	mul.w	r3, r1, r3
 8006040:	4413      	add	r3, r2
 8006042:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b25b      	sxtb	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	da16      	bge.n	800607c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	211a      	movs	r1, #26
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	4413      	add	r3, r2
 800605a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	211a      	movs	r1, #26
 800606a:	fb01 f303 	mul.w	r3, r1, r3
 800606e:	4413      	add	r3, r2
 8006070:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006074:	881a      	ldrh	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	835a      	strh	r2, [r3, #26]
 800607a:	e015      	b.n	80060a8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	211a      	movs	r1, #26
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	4413      	add	r3, r2
 8006088:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	211a      	movs	r1, #26
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	4413      	add	r3, r2
 800609e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060a2:	881a      	ldrh	r2, [r3, #0]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	211a      	movs	r1, #26
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	b25b      	sxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da16      	bge.n	80060ee <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	211a      	movs	r1, #26
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060d0:	781a      	ldrb	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	211a      	movs	r1, #26
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	835a      	strh	r2, [r3, #26]
 80060ec:	e015      	b.n	800611a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	211a      	movs	r1, #26
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	211a      	movs	r1, #26
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	4413      	add	r3, r2
 8006110:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	7b9b      	ldrb	r3, [r3, #14]
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 fd8a 	bl	8007c3a <USBH_AllocPipe>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	7bdb      	ldrb	r3, [r3, #15]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fd80 	bl	8007c3a <USBH_AllocPipe>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	7b59      	ldrb	r1, [r3, #13]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	7b98      	ldrb	r0, [r3, #14]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	8b12      	ldrh	r2, [r2, #24]
 800615a:	9202      	str	r2, [sp, #8]
 800615c:	2202      	movs	r2, #2
 800615e:	9201      	str	r2, [sp, #4]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4623      	mov	r3, r4
 8006164:	4602      	mov	r2, r0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fd38 	bl	8007bdc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	7b19      	ldrb	r1, [r3, #12]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	7bd8      	ldrb	r0, [r3, #15]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	8b52      	ldrh	r2, [r2, #26]
 8006184:	9202      	str	r2, [sp, #8]
 8006186:	2202      	movs	r2, #2
 8006188:	9201      	str	r2, [sp, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4623      	mov	r3, r4
 800618e:	4602      	mov	r2, r0
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f001 fd23 	bl	8007bdc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	7b5b      	ldrb	r3, [r3, #13]
 80061a2:	2200      	movs	r2, #0
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f002 f82e 	bl	8008208 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	7b1b      	ldrb	r3, [r3, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 f827 	bl	8008208 <USBH_LL_SetToggle>

  return USBH_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00e      	beq.n	80061fc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fd18 	bl	8007c1a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fd43 	bl	8007c7c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	7b1b      	ldrb	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	7b1b      	ldrb	r3, [r3, #12]
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fd05 	bl	8007c1a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	7b1b      	ldrb	r3, [r3, #12]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fd30 	bl	8007c7c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	7b5b      	ldrb	r3, [r3, #13]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	7b5b      	ldrb	r3, [r3, #13]
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f001 fcf2 	bl	8007c1a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	7b5b      	ldrb	r3, [r3, #13]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 fd1d 	bl	8007c7c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	4618      	mov	r0, r3
 800625e:	f002 f889 	bl	8008374 <free>
    phost->pActiveClass->pData = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006268:	2200      	movs	r2, #0
 800626a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3340      	adds	r3, #64	; 0x40
 800628c:	4619      	mov	r1, r3
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8b1 	bl	80063f6 <GetLineCoding>
 8006294:	4603      	mov	r3, r0
 8006296:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006298:	7afb      	ldrb	r3, [r7, #11]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062a4:	2102      	movs	r1, #2
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062aa:	7afb      	ldrb	r3, [r7, #11]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d877      	bhi.n	80063c8 <USBH_CDC_Process+0x114>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <USBH_CDC_Process+0x2c>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	080062f5 	.word	0x080062f5
 80062e4:	080062fb 	.word	0x080062fb
 80062e8:	0800632b 	.word	0x0800632b
 80062ec:	0800639f 	.word	0x0800639f
 80062f0:	080063ad 	.word	0x080063ad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
      break;
 80062f8:	e06d      	b.n	80063d6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f897 	bl	8006434 <SetLineCoding>
 8006306:	4603      	mov	r3, r0
 8006308:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d104      	bne.n	800631a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006318:	e058      	b.n	80063cc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d055      	beq.n	80063cc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2204      	movs	r2, #4
 8006324:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006328:	e050      	b.n	80063cc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3340      	adds	r3, #64	; 0x40
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f860 	bl	80063f6 <GetLineCoding>
 8006336:	4603      	mov	r3, r0
 8006338:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d126      	bne.n	800638e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	791b      	ldrb	r3, [r3, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d13b      	bne.n	80063d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006362:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006364:	429a      	cmp	r2, r3
 8006366:	d133      	bne.n	80063d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006372:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006374:	429a      	cmp	r2, r3
 8006376:	d12b      	bne.n	80063d0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006380:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006382:	429a      	cmp	r2, r3
 8006384:	d124      	bne.n	80063d0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f958 	bl	800663c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800638c:	e020      	b.n	80063d0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d01d      	beq.n	80063d0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2204      	movs	r2, #4
 8006398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800639c:	e018      	b.n	80063d0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f867 	bl	8006472 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8da 	bl	800655e <CDC_ProcessReception>
      break;
 80063aa:	e014      	b.n	80063d6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80063ac:	2100      	movs	r1, #0
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ffe3 	bl	800737a <USBH_ClrFeature>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063b8:	7bbb      	ldrb	r3, [r7, #14]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80063c6:	e005      	b.n	80063d4 <USBH_CDC_Process+0x120>

    default:
      break;
 80063c8:	bf00      	nop
 80063ca:	e004      	b.n	80063d6 <USBH_CDC_Process+0x122>
      break;
 80063cc:	bf00      	nop
 80063ce:	e002      	b.n	80063d6 <USBH_CDC_Process+0x122>
      break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <USBH_CDC_Process+0x122>
      break;
 80063d4:	bf00      	nop

  }

  return status;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	22a1      	movs	r2, #161	; 0xa1
 8006404:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2221      	movs	r2, #33	; 0x21
 800640a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2207      	movs	r2, #7
 800641c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2207      	movs	r2, #7
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 f988 	bl	800773a <USBH_CtlReq>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2221      	movs	r2, #33	; 0x21
 8006442:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2207      	movs	r2, #7
 800645a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2207      	movs	r2, #7
 8006460:	4619      	mov	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 f969 	bl	800773a <USBH_CtlReq>
 8006468:	4603      	mov	r3, r0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af02      	add	r7, sp, #8
 8006478:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006484:	2300      	movs	r3, #0
 8006486:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800648e:	2b01      	cmp	r3, #1
 8006490:	d002      	beq.n	8006498 <CDC_ProcessTransmission+0x26>
 8006492:	2b02      	cmp	r3, #2
 8006494:	d023      	beq.n	80064de <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006496:	e05e      	b.n	8006556 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	8b12      	ldrh	r2, [r2, #24]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d90b      	bls.n	80064bc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	69d9      	ldr	r1, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8b1a      	ldrh	r2, [r3, #24]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	7b5b      	ldrb	r3, [r3, #13]
 80064b0:	2001      	movs	r0, #1
 80064b2:	9000      	str	r0, [sp, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fb4e 	bl	8007b56 <USBH_BulkSendData>
 80064ba:	e00b      	b.n	80064d4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	7b5b      	ldrb	r3, [r3, #13]
 80064ca:	2001      	movs	r0, #1
 80064cc:	9000      	str	r0, [sp, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fb41 	bl	8007b56 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80064dc:	e03b      	b.n	8006556 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	7b5b      	ldrb	r3, [r3, #13]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fe65 	bl	80081b4 <USBH_LL_GetURBState>
 80064ea:	4603      	mov	r3, r0
 80064ec:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d128      	bne.n	8006546 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	8b12      	ldrh	r2, [r2, #24]
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d90e      	bls.n	800651e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	8b12      	ldrh	r2, [r2, #24]
 8006508:	1a9a      	subs	r2, r3, r2
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	8b12      	ldrh	r2, [r2, #24]
 8006516:	441a      	add	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	61da      	str	r2, [r3, #28]
 800651c:	e002      	b.n	8006524 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d004      	beq.n	8006536 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006534:	e00e      	b.n	8006554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f868 	bl	8006614 <USBH_CDC_TransmitCallback>
      break;
 8006544:	e006      	b.n	8006554 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d103      	bne.n	8006554 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006554:	bf00      	nop
  }
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006570:	2300      	movs	r3, #0
 8006572:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800657a:	2b03      	cmp	r3, #3
 800657c:	d002      	beq.n	8006584 <CDC_ProcessReception+0x26>
 800657e:	2b04      	cmp	r3, #4
 8006580:	d00e      	beq.n	80065a0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006582:	e043      	b.n	800660c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	6a19      	ldr	r1, [r3, #32]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	8b5a      	ldrh	r2, [r3, #26]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	7b1b      	ldrb	r3, [r3, #12]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fb05 	bl	8007ba0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	2204      	movs	r2, #4
 800659a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800659e:	e035      	b.n	800660c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	7b1b      	ldrb	r3, [r3, #12]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fe04 	bl	80081b4 <USBH_LL_GetURBState>
 80065ac:	4603      	mov	r3, r0
 80065ae:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80065b0:	7cfb      	ldrb	r3, [r7, #19]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d129      	bne.n	800660a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	7b1b      	ldrb	r3, [r3, #12]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f001 fd67 	bl	8008090 <USBH_LL_GetLastXferSize>
 80065c2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d016      	beq.n	80065fc <CDC_ProcessReception+0x9e>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	8b5b      	ldrh	r3, [r3, #26]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d910      	bls.n	80065fc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	6a1a      	ldr	r2, [r3, #32]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	441a      	add	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2203      	movs	r2, #3
 80065f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065fa:	e006      	b.n	800660a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f80f 	bl	8006628 <USBH_CDC_ReceiveCallback>
      break;
 800660a:	bf00      	nop
  }
}
 800660c:	bf00      	nop
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	e029      	b.n	80066bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	79fa      	ldrb	r2, [r7, #7]
 800666c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f81f 	bl	80066c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f001 fc37 	bl	8007f28 <USBH_LL_Init>

  return USBH_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e009      	b.n	80066ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	33e0      	adds	r3, #224	; 0xe0
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b0e      	cmp	r3, #14
 80066ee:	d9f2      	bls.n	80066d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e009      	b.n	800670a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006700:	2200      	movs	r2, #0
 8006702:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d3f1      	bcc.n	80066f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2240      	movs	r2, #64	; 0x40
 8006736:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d016      	beq.n	80067ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006790:	1c59      	adds	r1, r3, #1
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	33de      	adds	r3, #222	; 0xde
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e004      	b.n	80067b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e001      	b.n	80067b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d204      	bcs.n	80067e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80067e4:	e001      	b.n	80067ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80067e6:	2302      	movs	r3, #2
 80067e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	461a      	mov	r2, r3
 8006806:	4603      	mov	r3, r0
 8006808:	70fb      	strb	r3, [r7, #3]
 800680a:	460b      	mov	r3, r1
 800680c:	70bb      	strb	r3, [r7, #2]
 800680e:	4613      	mov	r3, r2
 8006810:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006816:	2300      	movs	r3, #0
 8006818:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006820:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006822:	e025      	b.n	8006870 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	221a      	movs	r2, #26
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	3308      	adds	r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	3302      	adds	r3, #2
 8006834:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	795b      	ldrb	r3, [r3, #5]
 800683a:	78fa      	ldrb	r2, [r7, #3]
 800683c:	429a      	cmp	r2, r3
 800683e:	d002      	beq.n	8006846 <USBH_FindInterface+0x4e>
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	2bff      	cmp	r3, #255	; 0xff
 8006844:	d111      	bne.n	800686a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800684a:	78ba      	ldrb	r2, [r7, #2]
 800684c:	429a      	cmp	r2, r3
 800684e:	d002      	beq.n	8006856 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006850:	78bb      	ldrb	r3, [r7, #2]
 8006852:	2bff      	cmp	r3, #255	; 0xff
 8006854:	d109      	bne.n	800686a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800685a:	787a      	ldrb	r2, [r7, #1]
 800685c:	429a      	cmp	r2, r3
 800685e:	d002      	beq.n	8006866 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006860:	787b      	ldrb	r3, [r7, #1]
 8006862:	2bff      	cmp	r3, #255	; 0xff
 8006864:	d101      	bne.n	800686a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	e006      	b.n	8006878 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	3301      	adds	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d9d6      	bls.n	8006824 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006876:	23ff      	movs	r3, #255	; 0xff
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fb87 	bl	8007fa0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006892:	2101      	movs	r1, #1
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fca0 	bl	80081da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af04      	add	r7, sp, #16
 80068aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80068ac:	2302      	movs	r3, #2
 80068ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d102      	bne.n	80068c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2203      	movs	r2, #3
 80068c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b0b      	cmp	r3, #11
 80068ce:	f200 81b3 	bhi.w	8006c38 <USBH_Process+0x394>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <USBH_Process+0x34>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	08006909 	.word	0x08006909
 80068dc:	0800693b 	.word	0x0800693b
 80068e0:	080069a3 	.word	0x080069a3
 80068e4:	08006bd3 	.word	0x08006bd3
 80068e8:	08006c39 	.word	0x08006c39
 80068ec:	08006a47 	.word	0x08006a47
 80068f0:	08006b79 	.word	0x08006b79
 80068f4:	08006a7d 	.word	0x08006a7d
 80068f8:	08006a9d 	.word	0x08006a9d
 80068fc:	08006abd 	.word	0x08006abd
 8006900:	08006aeb 	.word	0x08006aeb
 8006904:	08006bbb 	.word	0x08006bbb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8193 	beq.w	8006c3c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800691c:	20c8      	movs	r0, #200	; 0xc8
 800691e:	f001 fca3 	bl	8008268 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fb99 	bl	800805a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006938:	e180      	b.n	8006c3c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006940:	2b01      	cmp	r3, #1
 8006942:	d107      	bne.n	8006954 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006952:	e182      	b.n	8006c5a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800695a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695e:	d914      	bls.n	800698a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006976:	2b03      	cmp	r3, #3
 8006978:	d903      	bls.n	8006982 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	220d      	movs	r2, #13
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e16b      	b.n	8006c5a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
      break;
 8006988:	e167      	b.n	8006c5a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006990:	f103 020a 	add.w	r2, r3, #10
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800699a:	200a      	movs	r0, #10
 800699c:	f001 fc64 	bl	8008268 <USBH_Delay>
      break;
 80069a0:	e15b      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069b2:	2104      	movs	r1, #4
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80069b8:	2064      	movs	r0, #100	; 0x64
 80069ba:	f001 fc55 	bl	8008268 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fb24 	bl	800800c <USBH_LL_GetSpeed>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2205      	movs	r2, #5
 80069d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80069d4:	2100      	movs	r1, #0
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f92f 	bl	8007c3a <USBH_AllocPipe>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80069e4:	2180      	movs	r1, #128	; 0x80
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 f927 	bl	8007c3a <USBH_AllocPipe>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7919      	ldrb	r1, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	9202      	str	r2, [sp, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9201      	str	r2, [sp, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4603      	mov	r3, r0
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f001 f8e0 	bl	8007bdc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	7959      	ldrb	r1, [r3, #5]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006a30:	b292      	uxth	r2, r2
 8006a32:	9202      	str	r2, [sp, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	9201      	str	r2, [sp, #4]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 f8cc 	bl	8007bdc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a44:	e109      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f90c 	bl	8006c64 <USBH_HandleEnum>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f040 80f3 	bne.w	8006c40 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d103      	bne.n	8006a74 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a72:	e0e5      	b.n	8006c40 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2207      	movs	r2, #7
 8006a78:	701a      	strb	r2, [r3, #0]
      break;
 8006a7a:	e0e1      	b.n	8006c40 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80de 	beq.w	8006c44 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a8e:	2101      	movs	r1, #1
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2208      	movs	r2, #8
 8006a98:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006a9a:	e0d3      	b.n	8006c44 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fc20 	bl	80072ec <USBH_SetCfg>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 80ca 	bne.w	8006c48 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2209      	movs	r2, #9
 8006ab8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006aba:	e0c5      	b.n	8006c48 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc30 	bl	8007332 <USBH_SetFeature>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 80b9 	bne.w	8006c4c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220a      	movs	r2, #10
 8006ade:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ae0:	e0b4      	b.n	8006c4c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	e0b0      	b.n	8006c4c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 80ad 	beq.w	8006c50 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	e016      	b.n	8006b32 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006b04:	7bfa      	ldrb	r2, [r7, #15]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	32de      	adds	r2, #222	; 0xde
 8006b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0e:	791a      	ldrb	r2, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d108      	bne.n	8006b2c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32de      	adds	r2, #222	; 0xde
 8006b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006b2a:	e005      	b.n	8006b38 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0e5      	beq.n	8006b04 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d109      	bne.n	8006b68 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2206      	movs	r2, #6
 8006b58:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b60:	2103      	movs	r1, #3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b66:	e073      	b.n	8006c50 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	220d      	movs	r2, #13
 8006b6c:	701a      	strb	r2, [r3, #0]
      break;
 8006b6e:	e06f      	b.n	8006c50 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220d      	movs	r2, #13
 8006b74:	701a      	strb	r2, [r3, #0]
      break;
 8006b76:	e06b      	b.n	8006c50 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b92:	7bbb      	ldrb	r3, [r7, #14]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d103      	bne.n	8006ba2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	220b      	movs	r2, #11
 8006b9e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ba0:	e058      	b.n	8006c54 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d154      	bne.n	8006c54 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	220d      	movs	r2, #13
 8006bae:	701a      	strb	r2, [r3, #0]
      break;
 8006bb0:	e050      	b.n	8006c54 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220d      	movs	r2, #13
 8006bb6:	701a      	strb	r2, [r3, #0]
      break;
 8006bb8:	e04c      	b.n	8006c54 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d049      	beq.n	8006c58 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
      }
      break;
 8006bd0:	e042      	b.n	8006c58 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fd72 	bl	80066c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d005      	beq.n	8006c14 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c0e:	2105      	movs	r1, #5
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d107      	bne.n	8006c30 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff fe2b 	bl	8006884 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c2e:	e014      	b.n	8006c5a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f9b5 	bl	8007fa0 <USBH_LL_Start>
      break;
 8006c36:	e010      	b.n	8006c5a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c38:	bf00      	nop
 8006c3a:	e00e      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c3c:	bf00      	nop
 8006c3e:	e00c      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c40:	bf00      	nop
 8006c42:	e00a      	b.n	8006c5a <USBH_Process+0x3b6>
    break;
 8006c44:	bf00      	nop
 8006c46:	e008      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c48:	bf00      	nop
 8006c4a:	e006      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c4c:	bf00      	nop
 8006c4e:	e004      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c50:	bf00      	nop
 8006c52:	e002      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c54:	bf00      	nop
 8006c56:	e000      	b.n	8006c5a <USBH_Process+0x3b6>
      break;
 8006c58:	bf00      	nop
  }
  return USBH_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af04      	add	r7, sp, #16
 8006c6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	785b      	ldrb	r3, [r3, #1]
 8006c78:	2b07      	cmp	r3, #7
 8006c7a:	f200 81c1 	bhi.w	8007000 <USBH_HandleEnum+0x39c>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USBH_HandleEnum+0x20>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006ca5 	.word	0x08006ca5
 8006c88:	08006d63 	.word	0x08006d63
 8006c8c:	08006dcd 	.word	0x08006dcd
 8006c90:	08006e5b 	.word	0x08006e5b
 8006c94:	08006ec5 	.word	0x08006ec5
 8006c98:	08006f35 	.word	0x08006f35
 8006c9c:	08006f7b 	.word	0x08006f7b
 8006ca0:	08006fc1 	.word	0x08006fc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006ca4:	2108      	movs	r1, #8
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fa50 	bl	800714c <USBH_Get_DevDesc>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d130      	bne.n	8006d18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	7919      	ldrb	r1, [r3, #4]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006cda:	b292      	uxth	r2, r2
 8006cdc:	9202      	str	r2, [sp, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	9201      	str	r2, [sp, #4]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 ff77 	bl	8007bdc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7959      	ldrb	r1, [r3, #5]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d02:	b292      	uxth	r2, r2
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	9201      	str	r2, [sp, #4]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 ff63 	bl	8007bdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d16:	e175      	b.n	8007004 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	f040 8172 	bne.w	8007004 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d26:	3301      	adds	r3, #1
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d903      	bls.n	8006d42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	220d      	movs	r2, #13
 8006d3e:	701a      	strb	r2, [r3, #0]
      break;
 8006d40:	e160      	b.n	8007004 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	795b      	ldrb	r3, [r3, #5]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 ff97 	bl	8007c7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 ff91 	bl	8007c7c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
      break;
 8006d60:	e150      	b.n	8007004 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d62:	2112      	movs	r1, #18
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9f1 	bl	800714c <USBH_Get_DevDesc>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d7a:	e145      	b.n	8007008 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d7c:	7bbb      	ldrb	r3, [r7, #14]
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	f040 8142 	bne.w	8007008 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d903      	bls.n	8006da6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
      break;
 8006da4:	e130      	b.n	8007008 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	795b      	ldrb	r3, [r3, #5]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 ff65 	bl	8007c7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	791b      	ldrb	r3, [r3, #4]
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 ff5f 	bl	8007c7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
      break;
 8006dca:	e11d      	b.n	8007008 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa68 	bl	80072a4 <USBH_SetAddress>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d132      	bne.n	8006e44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006dde:	2002      	movs	r0, #2
 8006de0:	f001 fa42 	bl	8008268 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2203      	movs	r2, #3
 8006df0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7919      	ldrb	r1, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006e06:	b292      	uxth	r2, r2
 8006e08:	9202      	str	r2, [sp, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	9201      	str	r2, [sp, #4]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4603      	mov	r3, r0
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fee1 	bl	8007bdc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7959      	ldrb	r1, [r3, #5]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e2e:	b292      	uxth	r2, r2
 8006e30:	9202      	str	r2, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	9201      	str	r2, [sp, #4]
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fecd 	bl	8007bdc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e42:	e0e3      	b.n	800700c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	f040 80e0 	bne.w	800700c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	220d      	movs	r2, #13
 8006e50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	705a      	strb	r2, [r3, #1]
      break;
 8006e58:	e0d8      	b.n	800700c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e5a:	2109      	movs	r1, #9
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f99d 	bl	800719c <USBH_Get_CfgDesc>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e72:	e0cd      	b.n	8007010 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 80ca 	bne.w	8007010 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d903      	bls.n	8006e9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220d      	movs	r2, #13
 8006e9a:	701a      	strb	r2, [r3, #0]
      break;
 8006e9c:	e0b8      	b.n	8007010 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fee9 	bl	8007c7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fee3 	bl	8007c7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e0a5      	b.n	8007010 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f965 	bl	800719c <USBH_Get_CfgDesc>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d103      	bne.n	8006ee4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2205      	movs	r2, #5
 8006ee0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ee2:	e097      	b.n	8007014 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ee4:	7bbb      	ldrb	r3, [r7, #14]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	f040 8094 	bne.w	8007014 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d903      	bls.n	8006f0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	220d      	movs	r2, #13
 8006f0a:	701a      	strb	r2, [r3, #0]
      break;
 8006f0c:	e082      	b.n	8007014 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 feb1 	bl	8007c7c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	791b      	ldrb	r3, [r3, #4]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 feab 	bl	8007c7c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	701a      	strb	r2, [r3, #0]
      break;
 8006f32:	e06f      	b.n	8007014 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d019      	beq.n	8006f72 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f4a:	23ff      	movs	r3, #255	; 0xff
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f949 	bl	80071e4 <USBH_Get_StringDesc>
 8006f52:	4603      	mov	r3, r0
 8006f54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f56:	7bbb      	ldrb	r3, [r7, #14]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2206      	movs	r2, #6
 8006f60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f62:	e059      	b.n	8007018 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f64:	7bbb      	ldrb	r3, [r7, #14]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d156      	bne.n	8007018 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2206      	movs	r2, #6
 8006f6e:	705a      	strb	r2, [r3, #1]
      break;
 8006f70:	e052      	b.n	8007018 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2206      	movs	r2, #6
 8006f76:	705a      	strb	r2, [r3, #1]
      break;
 8006f78:	e04e      	b.n	8007018 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d019      	beq.n	8006fb8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f90:	23ff      	movs	r3, #255	; 0xff
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f926 	bl	80071e4 <USBH_Get_StringDesc>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d103      	bne.n	8006faa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fa8:	e038      	b.n	800701c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d135      	bne.n	800701c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2207      	movs	r2, #7
 8006fb4:	705a      	strb	r2, [r3, #1]
      break;
 8006fb6:	e031      	b.n	800701c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2207      	movs	r2, #7
 8006fbc:	705a      	strb	r2, [r3, #1]
      break;
 8006fbe:	e02d      	b.n	800701c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d017      	beq.n	8006ffa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006fd6:	23ff      	movs	r3, #255	; 0xff
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f903 	bl	80071e4 <USBH_Get_StringDesc>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fe2:	7bbb      	ldrb	r3, [r7, #14]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006fec:	e018      	b.n	8007020 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d115      	bne.n	8007020 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff8:	e012      	b.n	8007020 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e00f      	b.n	8007020 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007000:	bf00      	nop
 8007002:	e00e      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007004:	bf00      	nop
 8007006:	e00c      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007008:	bf00      	nop
 800700a:	e00a      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 800700c:	bf00      	nop
 800700e:	e008      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007010:	bf00      	nop
 8007012:	e006      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <USBH_HandleEnum+0x3be>
      break;
 8007020:	bf00      	nop
  }
  return Status;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800703e:	bf00      	nop
 8007040:	370c      	adds	r7, #12
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr

0800704a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f804 	bl	800706e <USBH_HandleSof>
}
 8007066:	bf00      	nop
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b0b      	cmp	r3, #11
 800707e:	d10a      	bne.n	8007096 <USBH_HandleSof+0x28>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80070ae:	bf00      	nop
}
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80070ca:	bf00      	nop
}
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 ff56 	bl	8007fd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fda3 	bl	8007c7c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	795b      	ldrb	r3, [r3, #5]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fd9d 	bl	8007c7c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	b29b      	uxth	r3, r3
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800716a:	2100      	movs	r1, #0
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f864 	bl	800723a <USBH_GetDescriptor>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007188:	78fa      	ldrb	r2, [r7, #3]
 800718a:	b292      	uxth	r2, r2
 800718c:	4619      	mov	r1, r3
 800718e:	f000 f918 	bl	80073c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007192:	7bfb      	ldrb	r3, [r7, #15]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	331c      	adds	r3, #28
 80071ac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80071ae:	887b      	ldrh	r3, [r7, #2]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f83d 	bl	800723a <USBH_GetDescriptor>
 80071c0:	4603      	mov	r3, r0
 80071c2:	72fb      	strb	r3, [r7, #11]
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071d0:	887a      	ldrh	r2, [r7, #2]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f964 	bl	80074a2 <USBH_ParseCfgDesc>
  }

  return status;
 80071da:	7afb      	ldrb	r3, [r7, #11]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af02      	add	r7, sp, #8
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	460b      	mov	r3, r1
 80071f2:	72fb      	strb	r3, [r7, #11]
 80071f4:	4613      	mov	r3, r2
 80071f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007200:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007208:	893b      	ldrh	r3, [r7, #8]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	460b      	mov	r3, r1
 800720e:	2100      	movs	r1, #0
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f812 	bl	800723a <USBH_GetDescriptor>
 8007216:	4603      	mov	r3, r0
 8007218:	75fb      	strb	r3, [r7, #23]
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007226:	893a      	ldrh	r2, [r7, #8]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fa37 	bl	800769e <USBH_ParseStringDesc>
  }

  return status;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	72fb      	strb	r3, [r7, #11]
 8007248:	4613      	mov	r3, r2
 800724a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	789b      	ldrb	r3, [r3, #2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d11c      	bne.n	800728e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2206      	movs	r2, #6
 8007264:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	893a      	ldrh	r2, [r7, #8]
 800726a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007276:	d104      	bne.n	8007282 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f240 4209 	movw	r2, #1033	; 0x409
 800727e:	829a      	strh	r2, [r3, #20]
 8007280:	e002      	b.n	8007288 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8b3a      	ldrh	r2, [r7, #24]
 800728c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800728e:	8b3b      	ldrh	r3, [r7, #24]
 8007290:	461a      	mov	r2, r3
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 fa50 	bl	800773a <USBH_CtlReq>
 800729a:	4603      	mov	r3, r0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	789b      	ldrb	r3, [r3, #2]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10f      	bne.n	80072d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2205      	movs	r2, #5
 80072c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fa2c 	bl	800773a <USBH_CtlReq>
 80072e2:	4603      	mov	r3, r0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	789b      	ldrb	r3, [r3, #2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d10e      	bne.n	800731e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2209      	movs	r2, #9
 800730a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	887a      	ldrh	r2, [r7, #2]
 8007310:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800731e:	2200      	movs	r2, #0
 8007320:	2100      	movs	r1, #0
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa09 	bl	800773a <USBH_CtlReq>
 8007328:	4603      	mov	r3, r0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	789b      	ldrb	r3, [r3, #2]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d10f      	bne.n	8007366 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2203      	movs	r2, #3
 8007350:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	b29a      	uxth	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9e5 	bl	800773a <USBH_CtlReq>
 8007370:	4603      	mov	r3, r0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	789b      	ldrb	r3, [r3, #2]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10f      	bne.n	80073ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9c1 	bl	800773a <USBH_CtlReq>
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	785a      	ldrb	r2, [r3, #1]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3302      	adds	r3, #2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	4313      	orrs	r3, r2
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	791a      	ldrb	r2, [r3, #4]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	795a      	ldrb	r2, [r3, #5]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	799a      	ldrb	r2, [r3, #6]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	79da      	ldrb	r2, [r3, #7]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	2b08      	cmp	r3, #8
 8007420:	d939      	bls.n	8007496 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	3308      	adds	r3, #8
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b29a      	uxth	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3309      	adds	r3, #9
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b29b      	uxth	r3, r3
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	4313      	orrs	r3, r2
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	330a      	adds	r3, #10
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b29a      	uxth	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	330b      	adds	r3, #11
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	b29b      	uxth	r3, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	330c      	adds	r3, #12
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	b29a      	uxth	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	330d      	adds	r3, #13
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	021b      	lsls	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	7b9a      	ldrb	r2, [r3, #14]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7bda      	ldrb	r2, [r3, #15]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7c1a      	ldrb	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	7c5a      	ldrb	r2, [r3, #17]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	745a      	strb	r2, [r3, #17]
  }
}
 8007496:	bf00      	nop
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b08a      	sub	sp, #40	; 0x28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785a      	ldrb	r2, [r3, #1]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3302      	adds	r3, #2
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3303      	adds	r3, #3
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4313      	orrs	r3, r2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791a      	ldrb	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	795a      	ldrb	r2, [r3, #5]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	799a      	ldrb	r2, [r3, #6]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	79da      	ldrb	r2, [r3, #7]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	7a1a      	ldrb	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	2b09      	cmp	r3, #9
 800751c:	d95f      	bls.n	80075de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800751e:	2309      	movs	r3, #9
 8007520:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007522:	2300      	movs	r3, #0
 8007524:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007526:	e051      	b.n	80075cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007528:	f107 0316 	add.w	r3, r7, #22
 800752c:	4619      	mov	r1, r3
 800752e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007530:	f000 f8e8 	bl	8007704 <USBH_GetNextDesc>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	785b      	ldrb	r3, [r3, #1]
 800753a:	2b04      	cmp	r3, #4
 800753c:	d146      	bne.n	80075cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800753e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007542:	221a      	movs	r2, #26
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	3308      	adds	r3, #8
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4413      	add	r3, r2
 800754e:	3302      	adds	r3, #2
 8007550:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007554:	69f8      	ldr	r0, [r7, #28]
 8007556:	f000 f846 	bl	80075e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007564:	e022      	b.n	80075ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007566:	f107 0316 	add.w	r3, r7, #22
 800756a:	4619      	mov	r1, r3
 800756c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800756e:	f000 f8c9 	bl	8007704 <USBH_GetNextDesc>
 8007572:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b05      	cmp	r3, #5
 800757a:	d117      	bne.n	80075ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800757c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007580:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007584:	3201      	adds	r2, #1
 8007586:	00d2      	lsls	r2, r2, #3
 8007588:	211a      	movs	r1, #26
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	3308      	adds	r3, #8
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	3304      	adds	r3, #4
 8007598:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800759a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800759c:	69b8      	ldr	r0, [r7, #24]
 800759e:	f000 f851 	bl	8007644 <USBH_ParseEPDesc>
            ep_ix++;
 80075a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80075a6:	3301      	adds	r3, #1
 80075a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	791b      	ldrb	r3, [r3, #4]
 80075b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d204      	bcs.n	80075c2 <USBH_ParseCfgDesc+0x120>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	885a      	ldrh	r2, [r3, #2]
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d8d1      	bhi.n	8007566 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80075c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c6:	3301      	adds	r3, #1
 80075c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d804      	bhi.n	80075de <USBH_ParseCfgDesc+0x13c>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	885a      	ldrh	r2, [r3, #2]
 80075d8:	8afb      	ldrh	r3, [r7, #22]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d8a4      	bhi.n	8007528 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80075de:	bf00      	nop
 80075e0:	3728      	adds	r7, #40	; 0x28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	785a      	ldrb	r2, [r3, #1]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	789a      	ldrb	r2, [r3, #2]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	78da      	ldrb	r2, [r3, #3]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	791a      	ldrb	r2, [r3, #4]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	795a      	ldrb	r2, [r3, #5]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	799a      	ldrb	r2, [r3, #6]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	79da      	ldrb	r2, [r3, #7]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	7a1a      	ldrb	r2, [r3, #8]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	721a      	strb	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785a      	ldrb	r2, [r3, #1]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	789a      	ldrb	r2, [r3, #2]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	78da      	ldrb	r2, [r3, #3]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	3304      	adds	r3, #4
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	3305      	adds	r3, #5
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	799a      	ldrb	r2, [r3, #6]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	719a      	strb	r2, [r3, #6]
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d120      	bne.n	80076f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	1e9a      	subs	r2, r3, #2
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	4293      	cmp	r3, r2
 80076c0:	bf28      	it	cs
 80076c2:	4613      	movcs	r3, r2
 80076c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3302      	adds	r3, #2
 80076ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80076cc:	2300      	movs	r3, #0
 80076ce:	82fb      	strh	r3, [r7, #22]
 80076d0:	e00b      	b.n	80076ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80076d2:	8afb      	ldrh	r3, [r7, #22]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80076e4:	8afb      	ldrh	r3, [r7, #22]
 80076e6:	3302      	adds	r3, #2
 80076e8:	82fb      	strh	r3, [r7, #22]
 80076ea:	8afa      	ldrh	r2, [r7, #22]
 80076ec:	8abb      	ldrh	r3, [r7, #20]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d3ef      	bcc.n	80076d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
  }
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	881a      	ldrh	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b29b      	uxth	r3, r3
 8007718:	4413      	add	r3, r2
 800771a:	b29a      	uxth	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4413      	add	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800772c:	68fb      	ldr	r3, [r7, #12]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007748:	2301      	movs	r3, #1
 800774a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d002      	beq.n	800775a <USBH_CtlReq+0x20>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d00f      	beq.n	8007778 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007758:	e027      	b.n	80077aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2202      	movs	r2, #2
 8007770:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007772:	2301      	movs	r3, #1
 8007774:	75fb      	strb	r3, [r7, #23]
      break;
 8007776:	e018      	b.n	80077aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f81b 	bl	80077b4 <USBH_HandleControl>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <USBH_CtlReq+0x54>
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d106      	bne.n	800779c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	761a      	strb	r2, [r3, #24]
      break;
 800779a:	e005      	b.n	80077a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d102      	bne.n	80077a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	709a      	strb	r2, [r3, #2]
      break;
 80077a8:	bf00      	nop
  }
  return status;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b086      	sub	sp, #24
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7e1b      	ldrb	r3, [r3, #24]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	2b0a      	cmp	r3, #10
 80077cc:	f200 8156 	bhi.w	8007a7c <USBH_HandleControl+0x2c8>
 80077d0:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <USBH_HandleControl+0x24>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781f 	.word	0x0800781f
 80077e0:	08007889 	.word	0x08007889
 80077e4:	080078af 	.word	0x080078af
 80077e8:	080078e7 	.word	0x080078e7
 80077ec:	08007911 	.word	0x08007911
 80077f0:	08007963 	.word	0x08007963
 80077f4:	08007985 	.word	0x08007985
 80077f8:	080079c1 	.word	0x080079c1
 80077fc:	080079e7 	.word	0x080079e7
 8007800:	08007a25 	.word	0x08007a25
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0110 	add.w	r1, r3, #16
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	795b      	ldrb	r3, [r3, #5]
 800780e:	461a      	mov	r2, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f943 	bl	8007a9c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	761a      	strb	r2, [r3, #24]
      break;
 800781c:	e139      	b.n	8007a92 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	795b      	ldrb	r3, [r3, #5]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fcc5 	bl	80081b4 <USBH_LL_GetURBState>
 800782a:	4603      	mov	r3, r0
 800782c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d11e      	bne.n	8007872 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7c1b      	ldrb	r3, [r3, #16]
 8007838:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800783c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8adb      	ldrh	r3, [r3, #22]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007846:	7b7b      	ldrb	r3, [r7, #13]
 8007848:	2b80      	cmp	r3, #128	; 0x80
 800784a:	d103      	bne.n	8007854 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2203      	movs	r2, #3
 8007850:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007852:	e115      	b.n	8007a80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	761a      	strb	r2, [r3, #24]
      break;
 800785a:	e111      	b.n	8007a80 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800785c:	7b7b      	ldrb	r3, [r7, #13]
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d103      	bne.n	800786a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2209      	movs	r2, #9
 8007866:	761a      	strb	r2, [r3, #24]
      break;
 8007868:	e10a      	b.n	8007a80 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2207      	movs	r2, #7
 800786e:	761a      	strb	r2, [r3, #24]
      break;
 8007870:	e106      	b.n	8007a80 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d003      	beq.n	8007880 <USBH_HandleControl+0xcc>
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	2b02      	cmp	r3, #2
 800787c:	f040 8100 	bne.w	8007a80 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	220b      	movs	r2, #11
 8007884:	761a      	strb	r2, [r3, #24]
      break;
 8007886:	e0fb      	b.n	8007a80 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6899      	ldr	r1, [r3, #8]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	899a      	ldrh	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	791b      	ldrb	r3, [r3, #4]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f93a 	bl	8007b1a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2204      	movs	r2, #4
 80078aa:	761a      	strb	r2, [r3, #24]
      break;
 80078ac:	e0f1      	b.n	8007a92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fc7d 	bl	80081b4 <USBH_LL_GetURBState>
 80078ba:	4603      	mov	r3, r0
 80078bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d102      	bne.n	80078ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2209      	movs	r2, #9
 80078c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d102      	bne.n	80078d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80078d0:	2303      	movs	r3, #3
 80078d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80078d4:	e0d6      	b.n	8007a84 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b04      	cmp	r3, #4
 80078da:	f040 80d3 	bne.w	8007a84 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	220b      	movs	r2, #11
 80078e2:	761a      	strb	r2, [r3, #24]
      break;
 80078e4:	e0ce      	b.n	8007a84 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6899      	ldr	r1, [r3, #8]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	899a      	ldrh	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	2001      	movs	r0, #1
 80078f4:	9000      	str	r0, [sp, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f8ea 	bl	8007ad0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007902:	b29a      	uxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2206      	movs	r2, #6
 800790c:	761a      	strb	r2, [r3, #24]
      break;
 800790e:	e0c0      	b.n	8007a92 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	795b      	ldrb	r3, [r3, #5]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fc4c 	bl	80081b4 <USBH_LL_GetURBState>
 800791c:	4603      	mov	r3, r0
 800791e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d103      	bne.n	800792e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2207      	movs	r2, #7
 800792a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800792c:	e0ac      	b.n	8007a88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b05      	cmp	r3, #5
 8007932:	d105      	bne.n	8007940 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220c      	movs	r2, #12
 8007938:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800793a:	2303      	movs	r3, #3
 800793c:	73fb      	strb	r3, [r7, #15]
      break;
 800793e:	e0a3      	b.n	8007a88 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d103      	bne.n	800794e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2205      	movs	r2, #5
 800794a:	761a      	strb	r2, [r3, #24]
      break;
 800794c:	e09c      	b.n	8007a88 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b04      	cmp	r3, #4
 8007952:	f040 8099 	bne.w	8007a88 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	220b      	movs	r2, #11
 800795a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800795c:	2302      	movs	r3, #2
 800795e:	73fb      	strb	r3, [r7, #15]
      break;
 8007960:	e092      	b.n	8007a88 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	2100      	movs	r1, #0
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8d5 	bl	8007b1a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2208      	movs	r2, #8
 8007980:	761a      	strb	r2, [r3, #24]

      break;
 8007982:	e086      	b.n	8007a92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc12 	bl	80081b4 <USBH_LL_GetURBState>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d105      	bne.n	80079a6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220d      	movs	r2, #13
 800799e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079a4:	e072      	b.n	8007a8c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220b      	movs	r2, #11
 80079b0:	761a      	strb	r2, [r3, #24]
      break;
 80079b2:	e06b      	b.n	8007a8c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d168      	bne.n	8007a8c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
      break;
 80079be:	e065      	b.n	8007a8c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	795b      	ldrb	r3, [r3, #5]
 80079c4:	2201      	movs	r2, #1
 80079c6:	9200      	str	r2, [sp, #0]
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f87f 	bl	8007ad0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079d8:	b29a      	uxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	220a      	movs	r2, #10
 80079e2:	761a      	strb	r2, [r3, #24]
      break;
 80079e4:	e055      	b.n	8007a92 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fbe1 	bl	80081b4 <USBH_LL_GetURBState>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d105      	bne.n	8007a08 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	220d      	movs	r2, #13
 8007a04:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a06:	e043      	b.n	8007a90 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d103      	bne.n	8007a16 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2209      	movs	r2, #9
 8007a12:	761a      	strb	r2, [r3, #24]
      break;
 8007a14:	e03c      	b.n	8007a90 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d139      	bne.n	8007a90 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	220b      	movs	r2, #11
 8007a20:	761a      	strb	r2, [r3, #24]
      break;
 8007a22:	e035      	b.n	8007a90 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7e5b      	ldrb	r3, [r3, #25]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	765a      	strb	r2, [r3, #25]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7e5b      	ldrb	r3, [r3, #25]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d806      	bhi.n	8007a46 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a44:	e025      	b.n	8007a92 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a4c:	2106      	movs	r1, #6
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	795b      	ldrb	r3, [r3, #5]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f90c 	bl	8007c7c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f906 	bl	8007c7c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7a:	e00a      	b.n	8007a92 <USBH_HandleControl+0x2de>

    default:
      break;
 8007a7c:	bf00      	nop
 8007a7e:	e008      	b.n	8007a92 <USBH_HandleControl+0x2de>
      break;
 8007a80:	bf00      	nop
 8007a82:	e006      	b.n	8007a92 <USBH_HandleControl+0x2de>
      break;
 8007a84:	bf00      	nop
 8007a86:	e004      	b.n	8007a92 <USBH_HandleControl+0x2de>
      break;
 8007a88:	bf00      	nop
 8007a8a:	e002      	b.n	8007a92 <USBH_HandleControl+0x2de>
      break;
 8007a8c:	bf00      	nop
 8007a8e:	e000      	b.n	8007a92 <USBH_HandleControl+0x2de>
      break;
 8007a90:	bf00      	nop
  }

  return status;
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af04      	add	r7, sp, #16
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007aaa:	79f9      	ldrb	r1, [r7, #7]
 8007aac:	2300      	movs	r3, #0
 8007aae:	9303      	str	r3, [sp, #12]
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	9302      	str	r3, [sp, #8]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fb46 	bl	8008152 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af04      	add	r7, sp, #16
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	460b      	mov	r3, r1
 8007ae0:	80fb      	strh	r3, [r7, #6]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007af4:	7979      	ldrb	r1, [r7, #5]
 8007af6:	7e3b      	ldrb	r3, [r7, #24]
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	2301      	movs	r3, #1
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	2300      	movs	r3, #0
 8007b08:	2200      	movs	r2, #0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 fb21 	bl	8008152 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b088      	sub	sp, #32
 8007b1e:	af04      	add	r7, sp, #16
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	4611      	mov	r1, r2
 8007b26:	461a      	mov	r2, r3
 8007b28:	460b      	mov	r3, r1
 8007b2a:	80fb      	strh	r3, [r7, #6]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b30:	7979      	ldrb	r1, [r7, #5]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9303      	str	r3, [sp, #12]
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	9301      	str	r3, [sp, #4]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	2300      	movs	r3, #0
 8007b44:	2201      	movs	r2, #1
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fb03 	bl	8008152 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007b4c:	2300      	movs	r3, #0

}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b088      	sub	sp, #32
 8007b5a:	af04      	add	r7, sp, #16
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	4611      	mov	r1, r2
 8007b62:	461a      	mov	r2, r3
 8007b64:	460b      	mov	r3, r1
 8007b66:	80fb      	strh	r3, [r7, #6]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b7a:	7979      	ldrb	r1, [r7, #5]
 8007b7c:	7e3b      	ldrb	r3, [r7, #24]
 8007b7e:	9303      	str	r3, [sp, #12]
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 fade 	bl	8008152 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	4611      	mov	r1, r2
 8007bac:	461a      	mov	r2, r3
 8007bae:	460b      	mov	r3, r1
 8007bb0:	80fb      	strh	r3, [r7, #6]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bb6:	7979      	ldrb	r1, [r7, #5]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	88fb      	ldrh	r3, [r7, #6]
 8007bbe:	9302      	str	r3, [sp, #8]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	2302      	movs	r3, #2
 8007bca:	2201      	movs	r2, #1
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fac0 	bl	8008152 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af04      	add	r7, sp, #16
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	4608      	mov	r0, r1
 8007be6:	4611      	mov	r1, r2
 8007be8:	461a      	mov	r2, r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	70fb      	strb	r3, [r7, #3]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70bb      	strb	r3, [r7, #2]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007bf6:	7878      	ldrb	r0, [r7, #1]
 8007bf8:	78ba      	ldrb	r2, [r7, #2]
 8007bfa:	78f9      	ldrb	r1, [r7, #3]
 8007bfc:	8b3b      	ldrh	r3, [r7, #24]
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	7d3b      	ldrb	r3, [r7, #20]
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	7c3b      	ldrb	r3, [r7, #16]
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	4603      	mov	r3, r0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa53 	bl	80080b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa72 	bl	8008114 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f836 	bl	8007cb8 <USBH_GetFreePipe>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c50:	89fb      	ldrh	r3, [r7, #14]
 8007c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00a      	beq.n	8007c70 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	89fb      	ldrh	r3, [r7, #14]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	33e0      	adds	r3, #224	; 0xe0
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	b2db      	uxtb	r3, r3
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2b0a      	cmp	r3, #10
 8007c8c:	d80d      	bhi.n	8007caa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	33e0      	adds	r3, #224	; 0xe0
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	33e0      	adds	r3, #224	; 0xe0
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
 8007cc8:	e00f      	b.n	8007cea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	33e0      	adds	r3, #224	; 0xe0
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	e007      	b.n	8007cf4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b0a      	cmp	r3, #10
 8007cee:	d9ec      	bls.n	8007cca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d04:	2201      	movs	r2, #1
 8007d06:	490e      	ldr	r1, [pc, #56]	; (8007d40 <MX_USB_HOST_Init+0x40>)
 8007d08:	480e      	ldr	r0, [pc, #56]	; (8007d44 <MX_USB_HOST_Init+0x44>)
 8007d0a:	f7fe fca1 	bl	8006650 <USBH_Init>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d14:	f7f8 fe7e 	bl	8000a14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d18:	490b      	ldr	r1, [pc, #44]	; (8007d48 <MX_USB_HOST_Init+0x48>)
 8007d1a:	480a      	ldr	r0, [pc, #40]	; (8007d44 <MX_USB_HOST_Init+0x44>)
 8007d1c:	f7fe fd26 	bl	800676c <USBH_RegisterClass>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d26:	f7f8 fe75 	bl	8000a14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d2a:	4806      	ldr	r0, [pc, #24]	; (8007d44 <MX_USB_HOST_Init+0x44>)
 8007d2c:	f7fe fdaa 	bl	8006884 <USBH_Start>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d36:	f7f8 fe6d 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d3a:	bf00      	nop
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	20000214 	.word	0x20000214
 8007d48:	20000014 	.word	0x20000014

08007d4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d50:	4802      	ldr	r0, [pc, #8]	; (8007d5c <MX_USB_HOST_Process+0x10>)
 8007d52:	f7fe fda7 	bl	80068a4 <USBH_Process>
}
 8007d56:	bf00      	nop
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000214 	.word	0x20000214

08007d60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	d819      	bhi.n	8007da8 <USBH_UserProcess+0x48>
 8007d74:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <USBH_UserProcess+0x1c>)
 8007d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7a:	bf00      	nop
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007d99 	.word	0x08007d99
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007da1 	.word	0x08007da1
 8007d8c:	08007d91 	.word	0x08007d91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <USBH_UserProcess+0x58>)
 8007d92:	2203      	movs	r2, #3
 8007d94:	701a      	strb	r2, [r3, #0]
  break;
 8007d96:	e008      	b.n	8007daa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <USBH_UserProcess+0x58>)
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	701a      	strb	r2, [r3, #0]
  break;
 8007d9e:	e004      	b.n	8007daa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <USBH_UserProcess+0x58>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
  break;
 8007da6:	e000      	b.n	8007daa <USBH_UserProcess+0x4a>

  default:
  break;
 8007da8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	200000c8 	.word	0x200000c8

08007dbc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	605a      	str	r2, [r3, #4]
 8007dce:	609a      	str	r2, [r3, #8]
 8007dd0:	60da      	str	r2, [r3, #12]
 8007dd2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ddc:	d147      	bne.n	8007e6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dde:	2300      	movs	r3, #0
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	4a24      	ldr	r2, [pc, #144]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007de8:	f043 0301 	orr.w	r3, r3, #1
 8007dec:	6313      	str	r3, [r2, #48]	; 0x30
 8007dee:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	613b      	str	r3, [r7, #16]
 8007df8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	481b      	ldr	r0, [pc, #108]	; (8007e7c <HAL_HCD_MspInit+0xc0>)
 8007e10:	f7f9 fa46 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e22:	2300      	movs	r3, #0
 8007e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e26:	230a      	movs	r3, #10
 8007e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e2a:	f107 0314 	add.w	r3, r7, #20
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4812      	ldr	r0, [pc, #72]	; (8007e7c <HAL_HCD_MspInit+0xc0>)
 8007e32:	f7f9 fa35 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	4a0f      	ldr	r2, [pc, #60]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e40:	6353      	str	r3, [r2, #52]	; 0x34
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	4a0b      	ldr	r2, [pc, #44]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e50:	6453      	str	r3, [r2, #68]	; 0x44
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <HAL_HCD_MspInit+0xbc>)
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2100      	movs	r1, #0
 8007e62:	2043      	movs	r0, #67	; 0x43
 8007e64:	f7f9 f9e5 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e68:	2043      	movs	r0, #67	; 0x43
 8007e6a:	f7f9 f9fe 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e6e:	bf00      	nop
 8007e70:	3728      	adds	r7, #40	; 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	40020000 	.word	0x40020000

08007e80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff f8db 	bl	800704a <USBH_LL_IncTimer>
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff f913 	bl	80070d6 <USBH_LL_Connect>
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7ff f91c 	bl	8007104 <USBH_LL_Disconnect>
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7ff f8cd 	bl	800709e <USBH_LL_PortEnabled>
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff f8cd 	bl	80070ba <USBH_LL_PortDisabled>
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d12a      	bne.n	8007f90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f3a:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a15      	ldr	r2, [pc, #84]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f54:	2208      	movs	r2, #8
 8007f56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007f58:	4b10      	ldr	r3, [pc, #64]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f5e:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f66:	2202      	movs	r2, #2
 8007f68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007f70:	480a      	ldr	r0, [pc, #40]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f72:	f7f9 fb7d 	bl	8001670 <HAL_HCD_Init>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007f7c:	f7f8 fd4a 	bl	8000a14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007f80:	4806      	ldr	r0, [pc, #24]	; (8007f9c <USBH_LL_Init+0x74>)
 8007f82:	f7f9 ff60 	bl	8001e46 <HAL_HCD_GetCurrentFrame>
 8007f86:	4603      	mov	r3, r0
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff f84e 	bl	800702c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	200005ec 	.word	0x200005ec

08007fa0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7f9 fecf 	bl	8001d5a <HAL_HCD_Start>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f95c 	bl	8008280 <USBH_Get_USB_Status>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f9 fed7 	bl	8001da0 <HAL_HCD_Stop>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f941 	bl	8008280 <USBH_Get_USB_Status>
 8007ffe:	4603      	mov	r3, r0
 8008000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008002:	7bbb      	ldrb	r3, [r7, #14]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800801e:	4618      	mov	r0, r3
 8008020:	f7f9 ff1f 	bl	8001e62 <HAL_HCD_GetCurrentSpeed>
 8008024:	4603      	mov	r3, r0
 8008026:	2b02      	cmp	r3, #2
 8008028:	d00c      	beq.n	8008044 <USBH_LL_GetSpeed+0x38>
 800802a:	2b02      	cmp	r3, #2
 800802c:	d80d      	bhi.n	800804a <USBH_LL_GetSpeed+0x3e>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <USBH_LL_GetSpeed+0x2c>
 8008032:	2b01      	cmp	r3, #1
 8008034:	d003      	beq.n	800803e <USBH_LL_GetSpeed+0x32>
 8008036:	e008      	b.n	800804a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008038:	2300      	movs	r3, #0
 800803a:	73fb      	strb	r3, [r7, #15]
    break;
 800803c:	e008      	b.n	8008050 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800803e:	2301      	movs	r3, #1
 8008040:	73fb      	strb	r3, [r7, #15]
    break;
 8008042:	e005      	b.n	8008050 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008044:	2302      	movs	r3, #2
 8008046:	73fb      	strb	r3, [r7, #15]
    break;
 8008048:	e002      	b.n	8008050 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
    break;
 800804e:	bf00      	nop
  }
  return  speed;
 8008050:	7bfb      	ldrb	r3, [r7, #15]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008070:	4618      	mov	r0, r3
 8008072:	f7f9 feb2 	bl	8001dda <HAL_HCD_ResetPort>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f8ff 	bl	8008280 <USBH_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 feb9 	bl	8001e1e <HAL_HCD_HC_GetXferCount>
 80080ac:	4603      	mov	r3, r0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080b6:	b590      	push	{r4, r7, lr}
 80080b8:	b089      	sub	sp, #36	; 0x24
 80080ba:	af04      	add	r7, sp, #16
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	4608      	mov	r0, r1
 80080c0:	4611      	mov	r1, r2
 80080c2:	461a      	mov	r2, r3
 80080c4:	4603      	mov	r3, r0
 80080c6:	70fb      	strb	r3, [r7, #3]
 80080c8:	460b      	mov	r3, r1
 80080ca:	70bb      	strb	r3, [r7, #2]
 80080cc:	4613      	mov	r3, r2
 80080ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080de:	787c      	ldrb	r4, [r7, #1]
 80080e0:	78ba      	ldrb	r2, [r7, #2]
 80080e2:	78f9      	ldrb	r1, [r7, #3]
 80080e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080e6:	9302      	str	r3, [sp, #8]
 80080e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	4623      	mov	r3, r4
 80080f6:	f7f9 fb1d 	bl	8001734 <HAL_HCD_HC_Init>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f8bd 	bl	8008280 <USBH_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	bd90      	pop	{r4, r7, pc}

08008114 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7f9 fb8d 	bl	8001852 <HAL_HCD_HC_Halt>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f89e 	bl	8008280 <USBH_Get_USB_Status>
 8008144:	4603      	mov	r3, r0
 8008146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008148:	7bbb      	ldrb	r3, [r7, #14]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008152:	b590      	push	{r4, r7, lr}
 8008154:	b089      	sub	sp, #36	; 0x24
 8008156:	af04      	add	r7, sp, #16
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	461a      	mov	r2, r3
 8008160:	4603      	mov	r3, r0
 8008162:	70fb      	strb	r3, [r7, #3]
 8008164:	460b      	mov	r3, r1
 8008166:	70bb      	strb	r3, [r7, #2]
 8008168:	4613      	mov	r3, r2
 800816a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800817a:	787c      	ldrb	r4, [r7, #1]
 800817c:	78ba      	ldrb	r2, [r7, #2]
 800817e:	78f9      	ldrb	r1, [r7, #3]
 8008180:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008184:	9303      	str	r3, [sp, #12]
 8008186:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008188:	9302      	str	r3, [sp, #8]
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	4623      	mov	r3, r4
 8008196:	f7f9 fb7f 	bl	8001898 <HAL_HCD_HC_SubmitRequest>
 800819a:	4603      	mov	r3, r0
 800819c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f86d 	bl	8008280 <USBH_Get_USB_Status>
 80081a6:	4603      	mov	r3, r0
 80081a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd90      	pop	{r4, r7, pc}

080081b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7f9 fe13 	bl	8001df6 <HAL_HCD_HC_GetURBState>
 80081d0:	4603      	mov	r3, r0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	460b      	mov	r3, r1
 80081e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d103      	bne.n	80081f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f870 	bl	80082d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80081f8:	20c8      	movs	r0, #200	; 0xc8
 80081fa:	f7f8 ff1b 	bl	8001034 <HAL_Delay>
  return USBH_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
 8008214:	4613      	mov	r3, r2
 8008216:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800821e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	212c      	movs	r1, #44	; 0x2c
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	4413      	add	r3, r2
 800822c:	333b      	adds	r3, #59	; 0x3b
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d009      	beq.n	8008248 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008234:	78fb      	ldrb	r3, [r7, #3]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	212c      	movs	r1, #44	; 0x2c
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	4413      	add	r3, r2
 8008240:	3354      	adds	r3, #84	; 0x54
 8008242:	78ba      	ldrb	r2, [r7, #2]
 8008244:	701a      	strb	r2, [r3, #0]
 8008246:	e008      	b.n	800825a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	212c      	movs	r1, #44	; 0x2c
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	4413      	add	r3, r2
 8008254:	3355      	adds	r3, #85	; 0x55
 8008256:	78ba      	ldrb	r2, [r7, #2]
 8008258:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7f8 fedf 	bl	8001034 <HAL_Delay>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	2b03      	cmp	r3, #3
 8008292:	d817      	bhi.n	80082c4 <USBH_Get_USB_Status+0x44>
 8008294:	a201      	add	r2, pc, #4	; (adr r2, 800829c <USBH_Get_USB_Status+0x1c>)
 8008296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829a:	bf00      	nop
 800829c:	080082ad 	.word	0x080082ad
 80082a0:	080082b3 	.word	0x080082b3
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082bf 	.word	0x080082bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
    break;
 80082b0:	e00b      	b.n	80082ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082b2:	2302      	movs	r3, #2
 80082b4:	73fb      	strb	r3, [r7, #15]
    break;
 80082b6:	e008      	b.n	80082ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	e005      	b.n	80082ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082be:	2302      	movs	r3, #2
 80082c0:	73fb      	strb	r3, [r7, #15]
    break;
 80082c2:	e002      	b.n	80082ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082c4:	2302      	movs	r3, #2
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	bf00      	nop
  }
  return usb_status;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80082ec:	2300      	movs	r3, #0
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e001      	b.n	80082f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80082f2:	2301      	movs	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	461a      	mov	r2, r3
 80082fa:	2101      	movs	r1, #1
 80082fc:	4803      	ldr	r0, [pc, #12]	; (800830c <MX_DriverVbusFS+0x34>)
 80082fe:	f7f9 f96b 	bl	80015d8 <HAL_GPIO_WritePin>
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	40020800 	.word	0x40020800

08008310 <__errno>:
 8008310:	4b01      	ldr	r3, [pc, #4]	; (8008318 <__errno+0x8>)
 8008312:	6818      	ldr	r0, [r3, #0]
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	20000034 	.word	0x20000034

0800831c <__libc_init_array>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	4d0d      	ldr	r5, [pc, #52]	; (8008354 <__libc_init_array+0x38>)
 8008320:	4c0d      	ldr	r4, [pc, #52]	; (8008358 <__libc_init_array+0x3c>)
 8008322:	1b64      	subs	r4, r4, r5
 8008324:	10a4      	asrs	r4, r4, #2
 8008326:	2600      	movs	r6, #0
 8008328:	42a6      	cmp	r6, r4
 800832a:	d109      	bne.n	8008340 <__libc_init_array+0x24>
 800832c:	4d0b      	ldr	r5, [pc, #44]	; (800835c <__libc_init_array+0x40>)
 800832e:	4c0c      	ldr	r4, [pc, #48]	; (8008360 <__libc_init_array+0x44>)
 8008330:	f000 f8f8 	bl	8008524 <_init>
 8008334:	1b64      	subs	r4, r4, r5
 8008336:	10a4      	asrs	r4, r4, #2
 8008338:	2600      	movs	r6, #0
 800833a:	42a6      	cmp	r6, r4
 800833c:	d105      	bne.n	800834a <__libc_init_array+0x2e>
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	f855 3b04 	ldr.w	r3, [r5], #4
 8008344:	4798      	blx	r3
 8008346:	3601      	adds	r6, #1
 8008348:	e7ee      	b.n	8008328 <__libc_init_array+0xc>
 800834a:	f855 3b04 	ldr.w	r3, [r5], #4
 800834e:	4798      	blx	r3
 8008350:	3601      	adds	r6, #1
 8008352:	e7f2      	b.n	800833a <__libc_init_array+0x1e>
 8008354:	08008560 	.word	0x08008560
 8008358:	08008560 	.word	0x08008560
 800835c:	08008560 	.word	0x08008560
 8008360:	08008564 	.word	0x08008564

08008364 <malloc>:
 8008364:	4b02      	ldr	r3, [pc, #8]	; (8008370 <malloc+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 b863 	b.w	8008434 <_malloc_r>
 800836e:	bf00      	nop
 8008370:	20000034 	.word	0x20000034

08008374 <free>:
 8008374:	4b02      	ldr	r3, [pc, #8]	; (8008380 <free+0xc>)
 8008376:	4601      	mov	r1, r0
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	f000 b80b 	b.w	8008394 <_free_r>
 800837e:	bf00      	nop
 8008380:	20000034 	.word	0x20000034

08008384 <memset>:
 8008384:	4402      	add	r2, r0
 8008386:	4603      	mov	r3, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <_free_r>:
 8008394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008396:	2900      	cmp	r1, #0
 8008398:	d048      	beq.n	800842c <_free_r+0x98>
 800839a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839e:	9001      	str	r0, [sp, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f1a1 0404 	sub.w	r4, r1, #4
 80083a6:	bfb8      	it	lt
 80083a8:	18e4      	addlt	r4, r4, r3
 80083aa:	f000 f8ad 	bl	8008508 <__malloc_lock>
 80083ae:	4a20      	ldr	r2, [pc, #128]	; (8008430 <_free_r+0x9c>)
 80083b0:	9801      	ldr	r0, [sp, #4]
 80083b2:	6813      	ldr	r3, [r2, #0]
 80083b4:	4615      	mov	r5, r2
 80083b6:	b933      	cbnz	r3, 80083c6 <_free_r+0x32>
 80083b8:	6063      	str	r3, [r4, #4]
 80083ba:	6014      	str	r4, [r2, #0]
 80083bc:	b003      	add	sp, #12
 80083be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083c2:	f000 b8a7 	b.w	8008514 <__malloc_unlock>
 80083c6:	42a3      	cmp	r3, r4
 80083c8:	d90b      	bls.n	80083e2 <_free_r+0x4e>
 80083ca:	6821      	ldr	r1, [r4, #0]
 80083cc:	1862      	adds	r2, r4, r1
 80083ce:	4293      	cmp	r3, r2
 80083d0:	bf04      	itt	eq
 80083d2:	681a      	ldreq	r2, [r3, #0]
 80083d4:	685b      	ldreq	r3, [r3, #4]
 80083d6:	6063      	str	r3, [r4, #4]
 80083d8:	bf04      	itt	eq
 80083da:	1852      	addeq	r2, r2, r1
 80083dc:	6022      	streq	r2, [r4, #0]
 80083de:	602c      	str	r4, [r5, #0]
 80083e0:	e7ec      	b.n	80083bc <_free_r+0x28>
 80083e2:	461a      	mov	r2, r3
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	b10b      	cbz	r3, 80083ec <_free_r+0x58>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d9fa      	bls.n	80083e2 <_free_r+0x4e>
 80083ec:	6811      	ldr	r1, [r2, #0]
 80083ee:	1855      	adds	r5, r2, r1
 80083f0:	42a5      	cmp	r5, r4
 80083f2:	d10b      	bne.n	800840c <_free_r+0x78>
 80083f4:	6824      	ldr	r4, [r4, #0]
 80083f6:	4421      	add	r1, r4
 80083f8:	1854      	adds	r4, r2, r1
 80083fa:	42a3      	cmp	r3, r4
 80083fc:	6011      	str	r1, [r2, #0]
 80083fe:	d1dd      	bne.n	80083bc <_free_r+0x28>
 8008400:	681c      	ldr	r4, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	6053      	str	r3, [r2, #4]
 8008406:	4421      	add	r1, r4
 8008408:	6011      	str	r1, [r2, #0]
 800840a:	e7d7      	b.n	80083bc <_free_r+0x28>
 800840c:	d902      	bls.n	8008414 <_free_r+0x80>
 800840e:	230c      	movs	r3, #12
 8008410:	6003      	str	r3, [r0, #0]
 8008412:	e7d3      	b.n	80083bc <_free_r+0x28>
 8008414:	6825      	ldr	r5, [r4, #0]
 8008416:	1961      	adds	r1, r4, r5
 8008418:	428b      	cmp	r3, r1
 800841a:	bf04      	itt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	bf04      	itt	eq
 8008424:	1949      	addeq	r1, r1, r5
 8008426:	6021      	streq	r1, [r4, #0]
 8008428:	6054      	str	r4, [r2, #4]
 800842a:	e7c7      	b.n	80083bc <_free_r+0x28>
 800842c:	b003      	add	sp, #12
 800842e:	bd30      	pop	{r4, r5, pc}
 8008430:	200000cc 	.word	0x200000cc

08008434 <_malloc_r>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	1ccd      	adds	r5, r1, #3
 8008438:	f025 0503 	bic.w	r5, r5, #3
 800843c:	3508      	adds	r5, #8
 800843e:	2d0c      	cmp	r5, #12
 8008440:	bf38      	it	cc
 8008442:	250c      	movcc	r5, #12
 8008444:	2d00      	cmp	r5, #0
 8008446:	4606      	mov	r6, r0
 8008448:	db01      	blt.n	800844e <_malloc_r+0x1a>
 800844a:	42a9      	cmp	r1, r5
 800844c:	d903      	bls.n	8008456 <_malloc_r+0x22>
 800844e:	230c      	movs	r3, #12
 8008450:	6033      	str	r3, [r6, #0]
 8008452:	2000      	movs	r0, #0
 8008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008456:	f000 f857 	bl	8008508 <__malloc_lock>
 800845a:	4921      	ldr	r1, [pc, #132]	; (80084e0 <_malloc_r+0xac>)
 800845c:	680a      	ldr	r2, [r1, #0]
 800845e:	4614      	mov	r4, r2
 8008460:	b99c      	cbnz	r4, 800848a <_malloc_r+0x56>
 8008462:	4f20      	ldr	r7, [pc, #128]	; (80084e4 <_malloc_r+0xb0>)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	b923      	cbnz	r3, 8008472 <_malloc_r+0x3e>
 8008468:	4621      	mov	r1, r4
 800846a:	4630      	mov	r0, r6
 800846c:	f000 f83c 	bl	80084e8 <_sbrk_r>
 8008470:	6038      	str	r0, [r7, #0]
 8008472:	4629      	mov	r1, r5
 8008474:	4630      	mov	r0, r6
 8008476:	f000 f837 	bl	80084e8 <_sbrk_r>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d123      	bne.n	80084c6 <_malloc_r+0x92>
 800847e:	230c      	movs	r3, #12
 8008480:	6033      	str	r3, [r6, #0]
 8008482:	4630      	mov	r0, r6
 8008484:	f000 f846 	bl	8008514 <__malloc_unlock>
 8008488:	e7e3      	b.n	8008452 <_malloc_r+0x1e>
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	1b5b      	subs	r3, r3, r5
 800848e:	d417      	bmi.n	80084c0 <_malloc_r+0x8c>
 8008490:	2b0b      	cmp	r3, #11
 8008492:	d903      	bls.n	800849c <_malloc_r+0x68>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	441c      	add	r4, r3
 8008498:	6025      	str	r5, [r4, #0]
 800849a:	e004      	b.n	80084a6 <_malloc_r+0x72>
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	42a2      	cmp	r2, r4
 80084a0:	bf0c      	ite	eq
 80084a2:	600b      	streq	r3, [r1, #0]
 80084a4:	6053      	strne	r3, [r2, #4]
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 f834 	bl	8008514 <__malloc_unlock>
 80084ac:	f104 000b 	add.w	r0, r4, #11
 80084b0:	1d23      	adds	r3, r4, #4
 80084b2:	f020 0007 	bic.w	r0, r0, #7
 80084b6:	1ac2      	subs	r2, r0, r3
 80084b8:	d0cc      	beq.n	8008454 <_malloc_r+0x20>
 80084ba:	1a1b      	subs	r3, r3, r0
 80084bc:	50a3      	str	r3, [r4, r2]
 80084be:	e7c9      	b.n	8008454 <_malloc_r+0x20>
 80084c0:	4622      	mov	r2, r4
 80084c2:	6864      	ldr	r4, [r4, #4]
 80084c4:	e7cc      	b.n	8008460 <_malloc_r+0x2c>
 80084c6:	1cc4      	adds	r4, r0, #3
 80084c8:	f024 0403 	bic.w	r4, r4, #3
 80084cc:	42a0      	cmp	r0, r4
 80084ce:	d0e3      	beq.n	8008498 <_malloc_r+0x64>
 80084d0:	1a21      	subs	r1, r4, r0
 80084d2:	4630      	mov	r0, r6
 80084d4:	f000 f808 	bl	80084e8 <_sbrk_r>
 80084d8:	3001      	adds	r0, #1
 80084da:	d1dd      	bne.n	8008498 <_malloc_r+0x64>
 80084dc:	e7cf      	b.n	800847e <_malloc_r+0x4a>
 80084de:	bf00      	nop
 80084e0:	200000cc 	.word	0x200000cc
 80084e4:	200000d0 	.word	0x200000d0

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d06      	ldr	r5, [pc, #24]	; (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7f8 fcba 	bl	8000e6c <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200008f0 	.word	0x200008f0

08008508 <__malloc_lock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__malloc_lock+0x8>)
 800850a:	f000 b809 	b.w	8008520 <__retarget_lock_acquire_recursive>
 800850e:	bf00      	nop
 8008510:	200008f8 	.word	0x200008f8

08008514 <__malloc_unlock>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__malloc_unlock+0x8>)
 8008516:	f000 b804 	b.w	8008522 <__retarget_lock_release_recursive>
 800851a:	bf00      	nop
 800851c:	200008f8 	.word	0x200008f8

08008520 <__retarget_lock_acquire_recursive>:
 8008520:	4770      	bx	lr

08008522 <__retarget_lock_release_recursive>:
 8008522:	4770      	bx	lr

08008524 <_init>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr

08008530 <_fini>:
 8008530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008532:	bf00      	nop
 8008534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008536:	bc08      	pop	{r3}
 8008538:	469e      	mov	lr, r3
 800853a:	4770      	bx	lr
