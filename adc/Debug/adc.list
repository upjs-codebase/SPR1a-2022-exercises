
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009680  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009810  08009810  00019810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009878  08009878  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009880  08009880  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009880  08009880  00019880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009884  08009884  00019884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc90  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d59  00000000  00000000  0003bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a0  00000000  00000000  00040cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c09  00000000  00000000  00041d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c4f  00000000  00000000  00067969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d88ca  00000000  00000000  000805b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00158e82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000514c  00000000  00000000  00158ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097f8 	.word	0x080097f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080097f8 	.word	0x080097f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <write_debug>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void write_debug(const char *text, ...)
{
 8000ef4:	b40f      	push	{r0, r1, r2, r3}
 8000ef6:	b5b0      	push	{r4, r5, r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	466b      	mov	r3, sp
 8000efe:	461d      	mov	r5, r3
    unsigned int MAX_LINE_LENGTH = 1024;
 8000f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f04:	60fb      	str	r3, [r7, #12]
    char buffer[MAX_LINE_LENGTH];
 8000f06:	68fc      	ldr	r4, [r7, #12]
 8000f08:	4623      	mov	r3, r4
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f04f 0100 	mov.w	r1, #0
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	00cb      	lsls	r3, r1, #3
 8000f1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f22:	00c2      	lsls	r2, r0, #3
 8000f24:	4620      	mov	r0, r4
 8000f26:	f04f 0100 	mov.w	r1, #0
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	00cb      	lsls	r3, r1, #3
 8000f34:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f38:	00c2      	lsls	r2, r0, #3
 8000f3a:	1de3      	adds	r3, r4, #7
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	ebad 0d03 	sub.w	sp, sp, r3
 8000f44:	466b      	mov	r3, sp
 8000f46:	3300      	adds	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
    memset(buffer, 0, MAX_LINE_LENGTH);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f007 ff7f 	bl	8008e54 <memset>

    va_list ap;
    va_start(ap, text);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	603b      	str	r3, [r7, #0]
    vsnprintf (buffer, MAX_LINE_LENGTH, text, ap);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	6a3a      	ldr	r2, [r7, #32]
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	f008 f864 	bl	8009030 <vsniprintf>
    va_end(ap);

    asm volatile (
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f04f 0004 	mov.w	r0, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	beab      	bkpt	0x00ab
 8000f72:	46ad      	mov	sp, r5
    " bkpt #0xAB"
    :
    : [msg] "r" (buffer)
    : "r0", "r1"
    );
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f7e:	b004      	add	sp, #16
 8000f80:	4770      	bx	lr
	...

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f000 fccf 	bl	800192c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f879 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 f9c7 	bl	8001324 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f96:	f000 f931 	bl	80011fc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f9a:	f000 f95d 	bl	8001258 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f98b 	bl	80012b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000fa2:	f007 fc15 	bl	80087d0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000fa6:	f000 f8d7 	bl	8001158 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000faa:	482e      	ldr	r0, [pc, #184]	; (8001064 <main+0xe0>)
 8000fac:	f000 fd98 	bl	8001ae0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	482b      	ldr	r0, [pc, #172]	; (8001064 <main+0xe0>)
 8000fb6:	f000 fe65 	bl	8001c84 <HAL_ADC_PollForConversion>
	  	  uint16_t raw_temp = HAL_ADC_GetValue(&hadc1);
 8000fba:	482a      	ldr	r0, [pc, #168]	; (8001064 <main+0xe0>)
 8000fbc:	f000 feed 	bl	8001d9a <HAL_ADC_GetValue>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	817b      	strh	r3, [r7, #10]

	  	  float temp = (((((float)raw_temp/4095)*3000)-760)/2.5) + 25;
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001068 <main+0xe4>
 8000fd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800106c <main+0xe8>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001070 <main+0xec>
 8000fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe6:	ee17 0a90 	vmov	r0, s15
 8000fea:	f7ff faa5 	bl	8000538 <__aeabi_f2d>
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <main+0xf0>)
 8000ff4:	f7ff fc22 	bl	800083c <__aeabi_ddiv>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <main+0xf4>)
 8001006:	f7ff f939 	bl	800027c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fda3 	bl	8000b5c <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	607b      	str	r3, [r7, #4]

	  	  write_debug("RT: %u, %u Celsius \n", raw_temp, (uint16_t)floor(temp));
 800101a:	897c      	ldrh	r4, [r7, #10]
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fa8b 	bl	8000538 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	ec43 2b10 	vmov	d0, r2, r3
 800102a:	f008 fb65 	bl	80096f8 <floor>
 800102e:	ec53 2b10 	vmov	r2, r3, d0
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fd71 	bl	8000b1c <__aeabi_d2uiz>
 800103a:	4603      	mov	r3, r0
 800103c:	b29b      	uxth	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	4621      	mov	r1, r4
 8001042:	480e      	ldr	r0, [pc, #56]	; (800107c <main+0xf8>)
 8001044:	f7ff ff56 	bl	8000ef4 <write_debug>
	  	  int counter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
	  	  while(counter < 1000000){
 800104c:	e002      	b.n	8001054 <main+0xd0>
	  		  counter++;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3301      	adds	r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
	  	  while(counter < 1000000){
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <main+0xfc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	ddf8      	ble.n	800104e <main+0xca>
	  	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800105c:	f007 fbde 	bl	800881c <MX_USB_HOST_Process>
  {
 8001060:	e7a6      	b.n	8000fb0 <main+0x2c>
 8001062:	bf00      	nop
 8001064:	20000110 	.word	0x20000110
 8001068:	457ff000 	.word	0x457ff000
 800106c:	453b8000 	.word	0x453b8000
 8001070:	443e0000 	.word	0x443e0000
 8001074:	40040000 	.word	0x40040000
 8001078:	40390000 	.word	0x40390000
 800107c:	08009810 	.word	0x08009810
 8001080:	000f423f 	.word	0x000f423f

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fede 	bl	8008e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <SystemClock_Config+0xcc>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <SystemClock_Config+0xcc>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <SystemClock_Config+0xd0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a21      	ldr	r2, [pc, #132]	; (8001154 <SystemClock_Config+0xd0>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <SystemClock_Config+0xd0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001102:	2307      	movs	r3, #7
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fe8c 	bl	8004e28 <HAL_RCC_OscConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001116:	f000 fa03 	bl	8001520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111a:	230f      	movs	r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111e:	2302      	movs	r3, #2
 8001120:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001126:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2105      	movs	r1, #5
 8001138:	4618      	mov	r0, r3
 800113a:	f004 f8ed 	bl	8005318 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001144:	f000 f9ec 	bl	8001520 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3750      	adds	r7, #80	; 0x50
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40007000 	.word	0x40007000

08001158 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_ADC1_Init+0x98>)
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <MX_ADC1_Init+0x9c>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001176:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <MX_ADC1_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001186:	2201      	movs	r2, #1
 8001188:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_ADC1_Init+0x98>)
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <MX_ADC1_Init+0xa0>)
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011ba:	f000 fc4d 	bl	8001a58 <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011c4:	f000 f9ac 	bl	8001520 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011c8:	2310      	movs	r3, #16
 80011ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011d0:	2307      	movs	r3, #7
 80011d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0x98>)
 80011da:	f000 fdeb 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011e4:	f000 f99c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000110 	.word	0x20000110
 80011f4:	40012000 	.word	0x40012000
 80011f8:	0f000001 	.word	0x0f000001

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_I2C1_Init+0x50>)
 8001202:	4a13      	ldr	r2, [pc, #76]	; (8001250 <MX_I2C1_Init+0x54>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_I2C1_Init+0x50>)
 8001208:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_I2C1_Init+0x58>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_I2C1_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_I2C1_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_I2C1_Init+0x50>)
 800121a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_I2C1_Init+0x50>)
 800123a:	f003 f811 	bl	8004260 <HAL_I2C_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001244:	f000 f96c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000bc 	.word	0x200000bc
 8001250:	40005400 	.word	0x40005400
 8001254:	000186a0 	.word	0x000186a0

08001258 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <MX_I2S3_Init+0x54>)
 800125e:	4a14      	ldr	r2, [pc, #80]	; (80012b0 <MX_I2S3_Init+0x58>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001262:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2S3_Init+0x54>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_I2S3_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2S3_Init+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <MX_I2S3_Init+0x54>)
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_I2S3_Init+0x54>)
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <MX_I2S3_Init+0x5c>)
 8001282:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2S3_Init+0x54>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_I2S3_Init+0x54>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2S3_Init+0x54>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_I2S3_Init+0x54>)
 8001298:	f003 f926 	bl	80044e8 <HAL_I2S_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80012a2:	f000 f93d 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001b0 	.word	0x200001b0
 80012b0:	40003c00 	.word	0x40003c00
 80012b4:	00017700 	.word	0x00017700

080012b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_SPI1_Init+0x64>)
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <MX_SPI1_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_SPI1_Init+0x64>)
 80012c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x64>)
 8001304:	220a      	movs	r2, #10
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_SPI1_Init+0x64>)
 800130a:	f004 fb2d 	bl	8005968 <HAL_SPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001314:	f000 f904 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000158 	.word	0x20000158
 8001320:	40013000 	.word	0x40013000

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	4b72      	ldr	r3, [pc, #456]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a71      	ldr	r2, [pc, #452]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b6f      	ldr	r3, [pc, #444]	; (8001508 <MX_GPIO_Init+0x1e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	4b6b      	ldr	r3, [pc, #428]	; (8001508 <MX_GPIO_Init+0x1e4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a6a      	ldr	r2, [pc, #424]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b68      	ldr	r3, [pc, #416]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b64      	ldr	r3, [pc, #400]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a63      	ldr	r2, [pc, #396]	; (8001508 <MX_GPIO_Init+0x1e4>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b61      	ldr	r3, [pc, #388]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a5c      	ldr	r2, [pc, #368]	; (8001508 <MX_GPIO_Init+0x1e4>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a55      	ldr	r2, [pc, #340]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a4e      	ldr	r2, [pc, #312]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b4c      	ldr	r3, [pc, #304]	; (8001508 <MX_GPIO_Init+0x1e4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	4849      	ldr	r0, [pc, #292]	; (800150c <MX_GPIO_Init+0x1e8>)
 80013e8:	f001 f9b0 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2101      	movs	r1, #1
 80013f0:	4847      	ldr	r0, [pc, #284]	; (8001510 <MX_GPIO_Init+0x1ec>)
 80013f2:	f001 f9ab 	bl	800274c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80013f6:	2200      	movs	r2, #0
 80013f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80013fc:	4845      	ldr	r0, [pc, #276]	; (8001514 <MX_GPIO_Init+0x1f0>)
 80013fe:	f001 f9a5 	bl	800274c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001402:	2308      	movs	r3, #8
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	483c      	ldr	r0, [pc, #240]	; (800150c <MX_GPIO_Init+0x1e8>)
 800141a:	f000 fffb 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4836      	ldr	r0, [pc, #216]	; (8001510 <MX_GPIO_Init+0x1ec>)
 8001436:	f000 ffed 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800143a:	2308      	movs	r3, #8
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800144a:	2305      	movs	r3, #5
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	482e      	ldr	r0, [pc, #184]	; (8001510 <MX_GPIO_Init+0x1ec>)
 8001456:	f000 ffdd 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800145e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	482a      	ldr	r0, [pc, #168]	; (8001518 <MX_GPIO_Init+0x1f4>)
 8001470:	f000 ffd0 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001474:	2304      	movs	r3, #4
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	4825      	ldr	r0, [pc, #148]	; (800151c <MX_GPIO_Init+0x1f8>)
 8001488:	f000 ffc4 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800148c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800149e:	2305      	movs	r3, #5
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	481c      	ldr	r0, [pc, #112]	; (800151c <MX_GPIO_Init+0x1f8>)
 80014aa:	f000 ffb3 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ae:	f24f 0310 	movw	r3, #61456	; 0xf010
 80014b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4813      	ldr	r0, [pc, #76]	; (8001514 <MX_GPIO_Init+0x1f0>)
 80014c8:	f000 ffa4 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80014cc:	2320      	movs	r3, #32
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_GPIO_Init+0x1f0>)
 80014e0:	f000 ff98 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014e8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_GPIO_Init+0x1e8>)
 80014fa:	f000 ff8b 	bl	8002414 <HAL_GPIO_Init>

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40021000 	.word	0x40021000
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001540:	6453      	str	r3, [r2, #68]	; 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800156a:	2007      	movs	r0, #7
 800156c:	f000 ff10 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_ADC_MspInit+0x3c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10d      	bne.n	80015aa <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_ADC_MspInit+0x40>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_ADC_MspInit+0x40>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_ADC_MspInit+0x40>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40012000 	.word	0x40012000
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <HAL_I2C_MspInit+0x84>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_I2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80015fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001604:	2312      	movs	r3, #18
 8001606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001608:	2301      	movs	r3, #1
 800160a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001610:	2304      	movs	r3, #4
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <HAL_I2C_MspInit+0x8c>)
 800161c:	f000 fefa 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_I2C_MspInit+0x88>)
 800162a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_I2C_MspInit+0x88>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40005400 	.word	0x40005400
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	; 0x38
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_I2S_MspInit+0xf0>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d15a      	bne.n	8001736 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001680:	2301      	movs	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f004 f829 	bl	80056e8 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800169c:	f7ff ff40 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a26      	ldr	r2, [pc, #152]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6313      	str	r3, [r2, #48]	; 0x30
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_I2S_MspInit+0xf4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80016f4:	2310      	movs	r3, #16
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001704:	2306      	movs	r3, #6
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <HAL_I2S_MspInit+0xf8>)
 8001710:	f000 fe80 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001714:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001726:	2306      	movs	r3, #6
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_I2S_MspInit+0xfc>)
 8001732:	f000 fe6f 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40003c00 	.word	0x40003c00
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020800 	.word	0x40020800

08001750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 800177c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80017aa:	23e0      	movs	r3, #224	; 0xe0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_SPI_MspInit+0x8c>)
 80017c6:	f000 fe25 	bl	8002414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f8d0 	bl	80019d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001838:	4802      	ldr	r0, [pc, #8]	; (8001844 <OTG_FS_IRQHandler+0x10>)
 800183a:	f001 fa0b 	bl	8002c54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200005d4 	.word	0x200005d4

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f007 fab2 	bl	8008de0 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20020000 	.word	0x20020000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	200000ac 	.word	0x200000ac
 80018b0:	200008e8 	.word	0x200008e8

080018b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	; (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001902:	f7ff ffd7 	bl	80018b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f007 fa71 	bl	8008dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff fb3b 	bl	8000f84 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800191c:	08009888 	.word	0x08009888
  ldr r2, =_sbss
 8001920:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001924:	200008e8 	.word	0x200008e8

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>
	...

0800192c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001930:	4b0e      	ldr	r3, [pc, #56]	; (800196c <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0d      	ldr	r2, [pc, #52]	; (800196c <HAL_Init+0x40>)
 8001936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_Init+0x40>)
 8001942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_Init+0x40>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 fd1b 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f808 	bl	8001970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001960:	f7ff fde4 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00

08001970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x54>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <HAL_InitTick+0x58>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4619      	mov	r1, r3
 8001982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001986:	fbb3 f3f1 	udiv	r3, r3, r1
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fd33 	bl	80023fa <HAL_SYSTICK_Config>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e00e      	b.n	80019bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b0f      	cmp	r3, #15
 80019a2:	d80a      	bhi.n	80019ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a4:	2200      	movs	r2, #0
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ac:	f000 fcfb 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <HAL_InitTick+0x5c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000004 	.word	0x20000004

080019d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x20>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_IncTick+0x24>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_IncTick+0x24>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	200001f8 	.word	0x200001f8

080019f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return uwTick;
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetTick+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200001f8 	.word	0x200001f8

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff ffee 	bl	80019f8 <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffde 	bl	80019f8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000008 	.word	0x20000008

08001a58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e033      	b.n	8001ad6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fd80 	bl	800157c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 faa4 	bl	8001ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac6:	e001      	b.n	8001acc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Start+0x1a>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e0b2      	b.n	8001c60 <HAL_ADC_Start+0x180>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d018      	beq.n	8001b42 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b20:	4b52      	ldr	r3, [pc, #328]	; (8001c6c <HAL_ADC_Start+0x18c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_ADC_Start+0x190>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9a      	lsrs	r2, r3, #18
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f9      	bne.n	8001b36 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d17a      	bne.n	8001c46 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f023 0206 	bic.w	r2, r3, #6
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_ADC_Start+0x194>)
 8001bae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d12a      	bne.n	8001c1c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <HAL_ADC_Start+0x198>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d015      	beq.n	8001bfc <HAL_ADC_Start+0x11c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <HAL_ADC_Start+0x19c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d105      	bne.n	8001be6 <HAL_ADC_Start+0x106>
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_ADC_Start+0x194>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_ADC_Start+0x1a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d136      	bne.n	8001c5e <HAL_ADC_Start+0x17e>
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_ADC_Start+0x194>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d130      	bne.n	8001c5e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d129      	bne.n	8001c5e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	e020      	b.n	8001c5e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_ADC_Start+0x198>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d11b      	bne.n	8001c5e <HAL_ADC_Start+0x17e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d114      	bne.n	8001c5e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	e00b      	b.n	8001c5e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	40012300 	.word	0x40012300
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	40012100 	.word	0x40012100
 8001c80:	40012200 	.word	0x40012200

08001c84 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca0:	d113      	bne.n	8001cca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cb0:	d10b      	bne.n	8001cca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f043 0220 	orr.w	r2, r3, #32
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e063      	b.n	8001d92 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cca:	f7ff fe95 	bl	80019f8 <HAL_GetTick>
 8001cce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd0:	e021      	b.n	8001d16 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d01d      	beq.n	8001d16 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x6c>
 8001ce0:	f7ff fe8a 	bl	80019f8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d212      	bcs.n	8001d16 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d00b      	beq.n	8001d16 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e03d      	b.n	8001d92 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d1d6      	bne.n	8001cd2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0212 	mvn.w	r2, #18
 8001d2c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d123      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11f      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e105      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x228>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d925      	bls.n	8001e2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	3b1e      	subs	r3, #30
 8001df6:	2207      	movs	r2, #7
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68d9      	ldr	r1, [r3, #12]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4403      	add	r3, r0
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	409a      	lsls	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	e022      	b.n	8001e72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	2207      	movs	r2, #7
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	4603      	mov	r3, r0
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4403      	add	r3, r0
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d824      	bhi.n	8001ec4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	400a      	ands	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b05      	subs	r3, #5
 8001eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec2:	e04c      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b0c      	cmp	r3, #12
 8001eca:	d824      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b23      	subs	r3, #35	; 0x23
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b23      	subs	r3, #35	; 0x23
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	e023      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b41      	subs	r3, #65	; 0x41
 8001f28:	221f      	movs	r2, #31
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	400a      	ands	r2, r1
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	4618      	mov	r0, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b41      	subs	r3, #65	; 0x41
 8001f52:	fa00 f203 	lsl.w	r2, r0, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_ADC_ConfigChannel+0x234>)
 8001f60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d105      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_ADC_ConfigChannel+0x238>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d123      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x1e6>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d11b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_ADC_ConfigChannel+0x23c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a10      	ldr	r2, [pc, #64]	; (8001ff4 <HAL_ADC_ConfigChannel+0x240>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9a      	lsrs	r2, r3, #18
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fc4:	e002      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f9      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	40012300 	.word	0x40012300
 8001fec:	40012000 	.word	0x40012000
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002000:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <ADC_Init+0x1f0>)
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800202c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6899      	ldr	r1, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <ADC_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	e00f      	b.n	80020f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0202 	bic.w	r2, r2, #2
 8002104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6899      	ldr	r1, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7e1b      	ldrb	r3, [r3, #24]
 8002110:	005a      	lsls	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002132:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002142:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	3b01      	subs	r3, #1
 8002150:	035a      	lsls	r2, r3, #13
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	e007      	b.n	800216c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	3b01      	subs	r3, #1
 8002188:	051a      	lsls	r2, r3, #20
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ae:	025a      	lsls	r2, r3, #9
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6899      	ldr	r1, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	029a      	lsls	r2, r3, #10
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40012300 	.word	0x40012300
 80021ec:	0f000001 	.word	0x0f000001

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e16b      	b.n	8002708 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 815a 	bne.w	8002702 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80b4 	beq.w	8002702 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b60      	ldr	r3, [pc, #384]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	4a5f      	ldr	r2, [pc, #380]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	; 0x44
 80025aa:	4b5d      	ldr	r3, [pc, #372]	; (8002720 <HAL_GPIO_Init+0x30c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a5b      	ldr	r2, [pc, #364]	; (8002724 <HAL_GPIO_Init+0x310>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	; (8002728 <HAL_GPIO_Init+0x314>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d02b      	beq.n	800263a <HAL_GPIO_Init+0x226>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a51      	ldr	r2, [pc, #324]	; (800272c <HAL_GPIO_Init+0x318>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d025      	beq.n	8002636 <HAL_GPIO_Init+0x222>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a50      	ldr	r2, [pc, #320]	; (8002730 <HAL_GPIO_Init+0x31c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <HAL_GPIO_Init+0x21e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_GPIO_Init+0x320>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d019      	beq.n	800262e <HAL_GPIO_Init+0x21a>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4e      	ldr	r2, [pc, #312]	; (8002738 <HAL_GPIO_Init+0x324>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_GPIO_Init+0x216>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4d      	ldr	r2, [pc, #308]	; (800273c <HAL_GPIO_Init+0x328>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_GPIO_Init+0x212>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_GPIO_Init+0x32c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d007      	beq.n	8002622 <HAL_GPIO_Init+0x20e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4b      	ldr	r2, [pc, #300]	; (8002744 <HAL_GPIO_Init+0x330>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d101      	bne.n	800261e <HAL_GPIO_Init+0x20a>
 800261a:	2307      	movs	r3, #7
 800261c:	e00e      	b.n	800263c <HAL_GPIO_Init+0x228>
 800261e:	2308      	movs	r3, #8
 8002620:	e00c      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002622:	2306      	movs	r3, #6
 8002624:	e00a      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002626:	2305      	movs	r3, #5
 8002628:	e008      	b.n	800263c <HAL_GPIO_Init+0x228>
 800262a:	2304      	movs	r3, #4
 800262c:	e006      	b.n	800263c <HAL_GPIO_Init+0x228>
 800262e:	2303      	movs	r3, #3
 8002630:	e004      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002632:	2302      	movs	r3, #2
 8002634:	e002      	b.n	800263c <HAL_GPIO_Init+0x228>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x228>
 800263a:	2300      	movs	r3, #0
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	f002 0203 	and.w	r2, r2, #3
 8002642:	0092      	lsls	r2, r2, #2
 8002644:	4093      	lsls	r3, r2
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800264c:	4935      	ldr	r1, [pc, #212]	; (8002724 <HAL_GPIO_Init+0x310>)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_GPIO_Init+0x334>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267e:	4a32      	ldr	r2, [pc, #200]	; (8002748 <HAL_GPIO_Init+0x334>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002684:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_GPIO_Init+0x334>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_GPIO_Init+0x334>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_GPIO_Init+0x334>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a1d      	ldr	r2, [pc, #116]	; (8002748 <HAL_GPIO_Init+0x334>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_GPIO_Init+0x334>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_GPIO_Init+0x334>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3301      	adds	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b0f      	cmp	r3, #15
 800270c:	f67f ae90 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40023800 	.word	0x40023800
 8002724:	40013800 	.word	0x40013800
 8002728:	40020000 	.word	0x40020000
 800272c:	40020400 	.word	0x40020400
 8002730:	40020800 	.word	0x40020800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40021000 	.word	0x40021000
 800273c:	40021400 	.word	0x40021400
 8002740:	40021800 	.word	0x40021800
 8002744:	40021c00 	.word	0x40021c00
 8002748:	40013c00 	.word	0x40013c00

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800277e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002780:	b08f      	sub	sp, #60	; 0x3c
 8002782:	af0a      	add	r7, sp, #40	; 0x28
 8002784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e054      	b.n	800283a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f006 f86e 	bl	800888c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2203      	movs	r2, #3
 80027b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 f9c5 	bl	8005b5e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	687e      	ldr	r6, [r7, #4]
 80027dc:	466d      	mov	r5, sp
 80027de:	f106 0410 	add.w	r4, r6, #16
 80027e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f2:	1d33      	adds	r3, r6, #4
 80027f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	f003 f93f 	bl	8005a7a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f9bc 	bl	8005b80 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	687e      	ldr	r6, [r7, #4]
 8002810:	466d      	mov	r5, sp
 8002812:	f106 0410 	add.w	r4, r6, #16
 8002816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002822:	e885 0003 	stmia.w	r5, {r0, r1}
 8002826:	1d33      	adds	r3, r6, #4
 8002828:	cb0e      	ldmia	r3, {r1, r2, r3}
 800282a:	6838      	ldr	r0, [r7, #0]
 800282c:	f003 fb22 	bl	8005e74 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002842 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002842:	b590      	push	{r4, r7, lr}
 8002844:	b089      	sub	sp, #36	; 0x24
 8002846:	af04      	add	r7, sp, #16
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	461a      	mov	r2, r3
 8002850:	4603      	mov	r3, r0
 8002852:	70fb      	strb	r3, [r7, #3]
 8002854:	460b      	mov	r3, r1
 8002856:	70bb      	strb	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_HCD_HC_Init+0x28>
 8002866:	2302      	movs	r3, #2
 8002868:	e076      	b.n	8002958 <HAL_HCD_HC_Init+0x116>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333d      	adds	r3, #61	; 0x3d
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	3338      	adds	r3, #56	; 0x38
 8002892:	787a      	ldrb	r2, [r7, #1]
 8002894:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3340      	adds	r3, #64	; 0x40
 80028a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028a6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3339      	adds	r3, #57	; 0x39
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80028cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	78ba      	ldrb	r2, [r7, #2]
 80028d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028d6:	b2d0      	uxtb	r0, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	333a      	adds	r3, #58	; 0x3a
 80028e4:	4602      	mov	r2, r0
 80028e6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80028e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da09      	bge.n	8002904 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	333b      	adds	r3, #59	; 0x3b
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e008      	b.n	8002916 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333b      	adds	r3, #59	; 0x3b
 8002912:	2200      	movs	r2, #0
 8002914:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	333c      	adds	r3, #60	; 0x3c
 8002924:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002928:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	787c      	ldrb	r4, [r7, #1]
 8002930:	78ba      	ldrb	r2, [r7, #2]
 8002932:	78f9      	ldrb	r1, [r7, #3]
 8002934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002936:	9302      	str	r3, [sp, #8]
 8002938:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4623      	mov	r3, r4
 8002946:	f003 fc0f 	bl	8006168 <USB_HC_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}

08002960 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_HCD_HC_Halt+0x1e>
 800297a:	2302      	movs	r3, #2
 800297c:	e00f      	b.n	800299e <HAL_HCD_HC_Halt+0x3e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f003 fe4b 	bl	800662a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4603      	mov	r3, r0
 80029b8:	70fb      	strb	r3, [r7, #3]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70bb      	strb	r3, [r7, #2]
 80029be:	4613      	mov	r3, r2
 80029c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	333b      	adds	r3, #59	; 0x3b
 80029d0:	78ba      	ldrb	r2, [r7, #2]
 80029d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	333f      	adds	r3, #63	; 0x3f
 80029e2:	787a      	ldrb	r2, [r7, #1]
 80029e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80029e6:	7c3b      	ldrb	r3, [r7, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d112      	bne.n	8002a12 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3342      	adds	r3, #66	; 0x42
 80029fa:	2203      	movs	r2, #3
 80029fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	333d      	adds	r3, #61	; 0x3d
 8002a0c:	7f3a      	ldrb	r2, [r7, #28]
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e008      	b.n	8002a24 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3342      	adds	r3, #66	; 0x42
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	f200 80c6 	bhi.w	8002bb8 <HAL_HCD_HC_SubmitRequest+0x210>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002ba5 	.word	0x08002ba5
 8002a3c:	08002aa9 	.word	0x08002aa9
 8002a40:	08002b27 	.word	0x08002b27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a44:	7c3b      	ldrb	r3, [r7, #16]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 80b8 	bne.w	8002bbc <HAL_HCD_HC_SubmitRequest+0x214>
 8002a4c:	78bb      	ldrb	r3, [r7, #2]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f040 80b4 	bne.w	8002bbc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002a54:	8b3b      	ldrh	r3, [r7, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3355      	adds	r3, #85	; 0x55
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3355      	adds	r3, #85	; 0x55
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3342      	adds	r3, #66	; 0x42
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a92:	e093      	b.n	8002bbc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3342      	adds	r3, #66	; 0x42
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]
      break;
 8002aa6:	e089      	b.n	8002bbc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d11d      	bne.n	8002aea <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3355      	adds	r3, #85	; 0x55
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3342      	adds	r3, #66	; 0x42
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ad4:	e073      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3342      	adds	r3, #66	; 0x42
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]
      break;
 8002ae8:	e069      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3354      	adds	r3, #84	; 0x54
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3342      	adds	r3, #66	; 0x42
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
      break;
 8002b10:	e055      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3342      	adds	r3, #66	; 0x42
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
      break;
 8002b24:	e04b      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b26:	78bb      	ldrb	r3, [r7, #2]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11d      	bne.n	8002b68 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3355      	adds	r3, #85	; 0x55
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3342      	adds	r3, #66	; 0x42
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b52:	e034      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3342      	adds	r3, #66	; 0x42
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
      break;
 8002b66:	e02a      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3354      	adds	r3, #84	; 0x54
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d109      	bne.n	8002b90 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3342      	adds	r3, #66	; 0x42
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
      break;
 8002b8e:	e016      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3342      	adds	r3, #66	; 0x42
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	701a      	strb	r2, [r3, #0]
      break;
 8002ba2:	e00c      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3342      	adds	r3, #66	; 0x42
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002bbc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3344      	adds	r3, #68	; 0x44
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	8b3a      	ldrh	r2, [r7, #24]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	202c      	movs	r0, #44	; 0x2c
 8002bd8:	fb00 f303 	mul.w	r3, r0, r3
 8002bdc:	440b      	add	r3, r1
 8002bde:	334c      	adds	r3, #76	; 0x4c
 8002be0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	3350      	adds	r3, #80	; 0x50
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3339      	adds	r3, #57	; 0x39
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	222c      	movs	r2, #44	; 0x2c
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	3338      	adds	r3, #56	; 0x38
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	18d1      	adds	r1, r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	f003 fb9e 	bl	8006384 <USB_HC_StartXfer>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop

08002c54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 f8c1 	bl	8005df2 <USB_GetMode>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	f040 80f6 	bne.w	8002e64 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 f8a5 	bl	8005dcc <USB_ReadInterrupts>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80ec 	beq.w	8002e62 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f89c 	bl	8005dcc <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c9e:	d104      	bne.n	8002caa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 f88c 	bl	8005dcc <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cbe:	d104      	bne.n	8002cca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 f87c 	bl	8005dcc <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cde:	d104      	bne.n	8002cea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 f86c 	bl	8005dcc <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d103      	bne.n	8002d06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2202      	movs	r2, #2
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 f85e 	bl	8005dcc <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d1a:	d11c      	bne.n	8002d56 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10f      	bne.n	8002d56 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d36:	2110      	movs	r1, #16
 8002d38:	6938      	ldr	r0, [r7, #16]
 8002d3a:	f002 ff6d 	bl	8005c18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d3e:	6938      	ldr	r0, [r7, #16]
 8002d40:	f002 ff8e 	bl	8005c60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f003 f946 	bl	8005fdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f005 fe19 	bl	8008988 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f836 	bl	8005dcc <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d6a:	d102      	bne.n	8002d72 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f001 fa03 	bl	8004178 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f828 	bl	8005dcc <USB_ReadInterrupts>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d106      	bne.n	8002d94 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f005 fde2 	bl	8008950 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 f817 	bl	8005dcc <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d101      	bne.n	8002dac <HAL_HCD_IRQHandler+0x158>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_HCD_IRQHandler+0x15a>
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699a      	ldr	r2, [r3, #24]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0210 	bic.w	r2, r2, #16
 8002dc0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f001 f906 	bl	8003fd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0210 	orr.w	r2, r2, #16
 8002dd6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 fff5 	bl	8005dcc <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dec:	d13a      	bne.n	8002e64 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fc08 	bl	8006608 <USB_HC_ReadInterrupt>
 8002df8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	e025      	b.n	8002e4c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d018      	beq.n	8002e46 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2a:	d106      	bne.n	8002e3a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8ab 	bl	8002f8e <HCD_HC_IN_IRQHandler>
 8002e38:	e005      	b.n	8002e46 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fcc6 	bl	80037d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3d4      	bcc.n	8002e00 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	e000      	b.n	8002e64 <HAL_HCD_IRQHandler+0x210>
      return;
 8002e62:	bf00      	nop
    }
  }
}
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_HCD_Start+0x16>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e013      	b.n	8002ea8 <HAL_HCD_Start+0x3e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 f908 	bl	80060a4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fe4f 	bl	8005b3c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_HCD_Stop+0x16>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e00d      	b.n	8002ee2 <HAL_HCD_Stop+0x32>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fd02 	bl	80068dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 f8aa 	bl	8006050 <USB_ResetPort>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3360      	adds	r3, #96	; 0x60
 8002f20:	781b      	ldrb	r3, [r3, #0]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3350      	adds	r3, #80	; 0x50
 8002f48:	681b      	ldr	r3, [r3, #0]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 f8ee 	bl	8006144 <USB_GetCurrentFrame>
 8002f68:	4603      	mov	r3, r0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 f8c9 	bl	8006116 <USB_GetHostSpeed>
 8002f84:	4603      	mov	r3, r0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d119      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2304      	movs	r3, #4
 8002fce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	0151      	lsls	r1, r2, #5
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fea:	f043 0302 	orr.w	r3, r3, #2
 8002fee:	60d3      	str	r3, [r2, #12]
 8002ff0:	e101      	b.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003008:	d12b      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	461a      	mov	r2, r3
 8003018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800301c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3361      	adds	r3, #97	; 0x61
 800302c:	2207      	movs	r2, #7
 800302e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	440a      	add	r2, r1
 8003046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fae5 	bl	800662a <USB_HC_Halt>
 8003060:	e0c9      	b.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d109      	bne.n	800308c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2320      	movs	r3, #32
 8003088:	6093      	str	r3, [r2, #8]
 800308a:	e0b4      	b.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d133      	bne.n	800310a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	0151      	lsls	r1, r2, #5
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	440a      	add	r2, r1
 80030b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3361      	adds	r3, #97	; 0x61
 80030d0:	2205      	movs	r2, #5
 80030d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	2310      	movs	r3, #16
 80030e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	2308      	movs	r3, #8
 80030f6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fa91 	bl	800662a <USB_HC_Halt>
 8003108:	e075      	b.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003120:	d134      	bne.n	800318c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	0151      	lsls	r1, r2, #5
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	440a      	add	r2, r1
 8003138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3361      	adds	r3, #97	; 0x61
 8003150:	2208      	movs	r2, #8
 8003152:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	461a      	mov	r2, r3
 8003162:	2310      	movs	r3, #16
 8003164:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003178:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fa50 	bl	800662a <USB_HC_Halt>
 800318a:	e034      	b.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319e:	2b80      	cmp	r3, #128	; 0x80
 80031a0:	d129      	bne.n	80031f6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	0151      	lsls	r1, r2, #5
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	440a      	add	r2, r1
 80031b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3361      	adds	r3, #97	; 0x61
 80031d0:	2206      	movs	r2, #6
 80031d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fa23 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320c:	d122      	bne.n	8003254 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	440a      	add	r2, r1
 8003224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f003 f9f6 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003250:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003252:	e2ba      	b.n	80037ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	f040 811b 	bne.w	80034a2 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d019      	beq.n	80032a8 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3348      	adds	r3, #72	; 0x48
 8003282:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	440b      	add	r3, r1
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003296:	1ad2      	subs	r2, r2, r3
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	202c      	movs	r0, #44	; 0x2c
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	440b      	add	r3, r1
 80032a4:	3350      	adds	r3, #80	; 0x50
 80032a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3361      	adds	r3, #97	; 0x61
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	335c      	adds	r3, #92	; 0x5c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	333f      	adds	r3, #63	; 0x3f
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	333f      	adds	r3, #63	; 0x3f
 8003300:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003302:	2b02      	cmp	r3, #2
 8003304:	d121      	bne.n	800334a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	440a      	add	r2, r1
 800331c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f003 f97a 	bl	800662a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	461a      	mov	r2, r3
 8003344:	2310      	movs	r3, #16
 8003346:	6093      	str	r3, [r2, #8]
 8003348:	e066      	b.n	8003418 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	333f      	adds	r3, #63	; 0x3f
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d127      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	440a      	add	r2, r1
 8003374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800337c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3360      	adds	r3, #96	; 0x60
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	b2d9      	uxtb	r1, r3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	202c      	movs	r0, #44	; 0x2c
 800339a:	fb00 f303 	mul.w	r3, r0, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3360      	adds	r3, #96	; 0x60
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f005 fafc 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033ac:	e034      	b.n	8003418 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	333f      	adds	r3, #63	; 0x3f
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d12a      	bne.n	8003418 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	3360      	adds	r3, #96	; 0x60
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	f083 0301 	eor.w	r3, r3, #1
 80033e8:	b2d8      	uxtb	r0, r3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3354      	adds	r3, #84	; 0x54
 80033f8:	4602      	mov	r2, r0
 80033fa:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	202c      	movs	r0, #44	; 0x2c
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	4413      	add	r3, r2
 800340c:	3360      	adds	r3, #96	; 0x60
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f005 fac6 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d12b      	bne.n	8003478 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3348      	adds	r3, #72	; 0x48
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	202c      	movs	r0, #44	; 0x2c
 8003436:	fb00 f202 	mul.w	r2, r0, r2
 800343a:	440a      	add	r2, r1
 800343c:	3240      	adds	r2, #64	; 0x40
 800343e:	8812      	ldrh	r2, [r2, #0]
 8003440:	fbb3 f3f2 	udiv	r3, r3, r2
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 81be 	beq.w	80037ca <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3354      	adds	r3, #84	; 0x54
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3354      	adds	r3, #84	; 0x54
 8003472:	4602      	mov	r2, r0
 8003474:	701a      	strb	r2, [r3, #0]
}
 8003476:	e1a8      	b.n	80037ca <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3354      	adds	r3, #84	; 0x54
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b2d8      	uxtb	r0, r3
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	4413      	add	r3, r2
 800349a:	3354      	adds	r3, #84	; 0x54
 800349c:	4602      	mov	r2, r0
 800349e:	701a      	strb	r2, [r3, #0]
}
 80034a0:	e193      	b.n	80037ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f040 8106 	bne.w	80036c6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d4:	f023 0302 	bic.w	r3, r3, #2
 80034d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	3361      	adds	r3, #97	; 0x61
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d109      	bne.n	8003502 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e0c9      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	3361      	adds	r3, #97	; 0x61
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d109      	bne.n	800352a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3360      	adds	r3, #96	; 0x60
 8003524:	2205      	movs	r2, #5
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e0b5      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	3361      	adds	r3, #97	; 0x61
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d009      	beq.n	8003552 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	3361      	adds	r3, #97	; 0x61
 800354c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800354e:	2b08      	cmp	r3, #8
 8003550:	d150      	bne.n	80035f4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	335c      	adds	r3, #92	; 0x5c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	202c      	movs	r0, #44	; 0x2c
 800356a:	fb00 f303 	mul.w	r3, r0, r3
 800356e:	440b      	add	r3, r1
 8003570:	335c      	adds	r3, #92	; 0x5c
 8003572:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	335c      	adds	r3, #92	; 0x5c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d912      	bls.n	80035ae <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	212c      	movs	r1, #44	; 0x2c
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	3360      	adds	r3, #96	; 0x60
 80035a8:	2204      	movs	r2, #4
 80035aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035ac:	e073      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	212c      	movs	r1, #44	; 0x2c
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	3360      	adds	r3, #96	; 0x60
 80035bc:	2202      	movs	r2, #2
 80035be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035de:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035f2:	e050      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3361      	adds	r3, #97	; 0x61
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d122      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3360      	adds	r3, #96	; 0x60
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003630:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003638:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e023      	b.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b07      	cmp	r3, #7
 8003660:	d119      	bne.n	8003696 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	335c      	adds	r3, #92	; 0x5c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	202c      	movs	r0, #44	; 0x2c
 800367a:	fb00 f303 	mul.w	r3, r0, r3
 800367e:	440b      	add	r3, r1
 8003680:	335c      	adds	r3, #92	; 0x5c
 8003682:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3360      	adds	r3, #96	; 0x60
 8003692:	2204      	movs	r2, #4
 8003694:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2302      	movs	r3, #2
 80036a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	b2d9      	uxtb	r1, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	202c      	movs	r0, #44	; 0x2c
 80036b2:	fb00 f303 	mul.w	r3, r0, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3360      	adds	r3, #96	; 0x60
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f005 f970 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036c4:	e081      	b.n	80037ca <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d176      	bne.n	80037ca <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	212c      	movs	r1, #44	; 0x2c
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	4413      	add	r3, r2
 80036e8:	333f      	adds	r3, #63	; 0x3f
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d121      	bne.n	8003734 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	212c      	movs	r1, #44	; 0x2c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	335c      	adds	r3, #92	; 0x5c
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	440a      	add	r2, r1
 8003718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f002 ff7c 	bl	800662a <USB_HC_Halt>
 8003732:	e041      	b.n	80037b8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	333f      	adds	r3, #63	; 0x3f
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d009      	beq.n	800375c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	333f      	adds	r3, #63	; 0x3f
 8003756:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003758:	2b02      	cmp	r3, #2
 800375a:	d12d      	bne.n	80037b8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	335c      	adds	r3, #92	; 0x5c
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d120      	bne.n	80037b8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3361      	adds	r3, #97	; 0x61
 8003784:	2203      	movs	r2, #3
 8003786:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	0151      	lsls	r1, r2, #5
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	440a      	add	r2, r1
 800379e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037a2:	f043 0302 	orr.w	r3, r3, #2
 80037a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 ff39 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2310      	movs	r3, #16
 80037c8:	6093      	str	r3, [r2, #8]
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b088      	sub	sp, #32
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	460b      	mov	r3, r1
 80037dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d119      	bne.n	8003836 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	2304      	movs	r3, #4
 8003812:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003834:	e3ca      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4413      	add	r3, r2
 800383e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b20      	cmp	r3, #32
 800384a:	d13e      	bne.n	80038ca <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	461a      	mov	r2, r3
 800385a:	2320      	movs	r3, #32
 800385c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	333d      	adds	r3, #61	; 0x3d
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 83ac 	bne.w	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	333d      	adds	r3, #61	; 0x3d
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	3360      	adds	r3, #96	; 0x60
 8003894:	2202      	movs	r2, #2
 8003896:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b2:	f043 0302 	orr.w	r3, r3, #2
 80038b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 feb1 	bl	800662a <USB_HC_Halt>
}
 80038c8:	e380      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e0:	d122      	bne.n	8003928 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fc:	f043 0302 	orr.w	r3, r3, #2
 8003900:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fe8c 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003924:	6093      	str	r3, [r2, #8]
}
 8003926:	e351      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d150      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	212c      	movs	r1, #44	; 0x2c
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	4413      	add	r3, r2
 800394a:	335c      	adds	r3, #92	; 0x5c
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d111      	bne.n	800398a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	333d      	adds	r3, #61	; 0x3d
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2340      	movs	r3, #64	; 0x40
 8003988:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f002 fe38 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	461a      	mov	r2, r3
 80039c8:	2301      	movs	r3, #1
 80039ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3361      	adds	r3, #97	; 0x61
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
}
 80039de:	e2f5      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d13c      	bne.n	8003a70 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	212c      	movs	r1, #44	; 0x2c
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	3361      	adds	r3, #97	; 0x61
 8003a04:	2204      	movs	r2, #4
 8003a06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	333d      	adds	r3, #61	; 0x3d
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	335c      	adds	r3, #92	; 0x5c
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	0151      	lsls	r1, r2, #5
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	440a      	add	r2, r1
 8003a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a46:	f043 0302 	orr.w	r3, r3, #2
 8003a4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 fde7 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2340      	movs	r3, #64	; 0x40
 8003a6c:	6093      	str	r3, [r2, #8]
}
 8003a6e:	e2ad      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d12a      	bne.n	8003adc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2308      	movs	r3, #8
 8003a96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fdb1 	bl	800662a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3361      	adds	r3, #97	; 0x61
 8003ad6:	2205      	movs	r2, #5
 8003ad8:	701a      	strb	r2, [r3, #0]
}
 8003ada:	e277      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d150      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	335c      	adds	r3, #92	; 0x5c
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	2203      	movs	r2, #3
 8003b14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	333d      	adds	r3, #61	; 0x3d
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d112      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	333c      	adds	r3, #60	; 0x3c
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	333d      	adds	r3, #61	; 0x3d
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	0151      	lsls	r1, r2, #5
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	440a      	add	r2, r1
 8003b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6a:	f043 0302 	orr.w	r3, r3, #2
 8003b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 fd55 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2310      	movs	r3, #16
 8003b90:	6093      	str	r3, [r2, #8]
}
 8003b92:	e21b      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d174      	bne.n	8003c94 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d121      	bne.n	8003bf6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3361      	adds	r3, #97	; 0x61
 8003bc0:	2206      	movs	r2, #6
 8003bc2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	0151      	lsls	r1, r2, #5
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	440a      	add	r2, r1
 8003bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bde:	f043 0302 	orr.w	r3, r3, #2
 8003be2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fd1b 	bl	800662a <USB_HC_Halt>
 8003bf4:	e044      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	335c      	adds	r3, #92	; 0x5c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	440b      	add	r3, r1
 8003c14:	335c      	adds	r3, #92	; 0x5c
 8003c16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	335c      	adds	r3, #92	; 0x5c
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d920      	bls.n	8003c6e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	212c      	movs	r1, #44	; 0x2c
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	4413      	add	r3, r2
 8003c38:	335c      	adds	r3, #92	; 0x5c
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3360      	adds	r3, #96	; 0x60
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	b2d9      	uxtb	r1, r3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	202c      	movs	r0, #44	; 0x2c
 8003c5a:	fb00 f303 	mul.w	r3, r0, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3360      	adds	r3, #96	; 0x60
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f004 fe9c 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c6c:	e008      	b.n	8003c80 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	3360      	adds	r3, #96	; 0x60
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	6093      	str	r3, [r2, #8]
}
 8003c92:	e19b      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d134      	bne.n	8003d16 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fca7 	bl	800662a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	2310      	movs	r3, #16
 8003cec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	212c      	movs	r1, #44	; 0x2c
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	3361      	adds	r3, #97	; 0x61
 8003d10:	2208      	movs	r2, #8
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	e15a      	b.n	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	f040 814f 	bne.w	8003fcc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d48:	f023 0302 	bic.w	r3, r3, #2
 8003d4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d17d      	bne.n	8003e5e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	2201      	movs	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	333f      	adds	r3, #63	; 0x3f
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d00a      	beq.n	8003d9e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	333f      	adds	r3, #63	; 0x3f
 8003d96:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	f040 8100 	bne.w	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	3355      	adds	r3, #85	; 0x55
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2d8      	uxtb	r0, r3
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3355      	adds	r3, #85	; 0x55
 8003dca:	4602      	mov	r2, r0
 8003dcc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	f040 80e3 	bne.w	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	212c      	movs	r1, #44	; 0x2c
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	334c      	adds	r3, #76	; 0x4c
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80d8 	beq.w	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	334c      	adds	r3, #76	; 0x4c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	202c      	movs	r0, #44	; 0x2c
 8003e04:	fb00 f202 	mul.w	r2, r0, r2
 8003e08:	440a      	add	r2, r1
 8003e0a:	3240      	adds	r2, #64	; 0x40
 8003e0c:	8812      	ldrh	r2, [r2, #0]
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b01      	subs	r3, #1
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	202c      	movs	r0, #44	; 0x2c
 8003e18:	fb00 f202 	mul.w	r2, r0, r2
 8003e1c:	440a      	add	r2, r1
 8003e1e:	3240      	adds	r2, #64	; 0x40
 8003e20:	8812      	ldrh	r2, [r2, #0]
 8003e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80b5 	beq.w	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3355      	adds	r3, #85	; 0x55
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2d8      	uxtb	r0, r3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	3355      	adds	r3, #85	; 0x55
 8003e58:	4602      	mov	r2, r0
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e09f      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	212c      	movs	r1, #44	; 0x2c
 8003e64:	fb01 f303 	mul.w	r3, r1, r3
 8003e68:	4413      	add	r3, r2
 8003e6a:	3361      	adds	r3, #97	; 0x61
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d109      	bne.n	8003e86 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	212c      	movs	r1, #44	; 0x2c
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3360      	adds	r3, #96	; 0x60
 8003e80:	2202      	movs	r2, #2
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e08b      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	3361      	adds	r3, #97	; 0x61
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d109      	bne.n	8003eae <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e077      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3361      	adds	r3, #97	; 0x61
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d109      	bne.n	8003ed6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3360      	adds	r3, #96	; 0x60
 8003ed0:	2205      	movs	r2, #5
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e063      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3361      	adds	r3, #97	; 0x61
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d009      	beq.n	8003efe <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3361      	adds	r3, #97	; 0x61
 8003ef8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d14f      	bne.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	212c      	movs	r1, #44	; 0x2c
 8003f04:	fb01 f303 	mul.w	r3, r1, r3
 8003f08:	4413      	add	r3, r2
 8003f0a:	335c      	adds	r3, #92	; 0x5c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	202c      	movs	r0, #44	; 0x2c
 8003f16:	fb00 f303 	mul.w	r3, r0, r3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	335c      	adds	r3, #92	; 0x5c
 8003f1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	335c      	adds	r3, #92	; 0x5c
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d912      	bls.n	8003f5a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	335c      	adds	r3, #92	; 0x5c
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	212c      	movs	r1, #44	; 0x2c
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	3360      	adds	r3, #96	; 0x60
 8003f54:	2204      	movs	r2, #4
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e021      	b.n	8003f9e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	212c      	movs	r1, #44	; 0x2c
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	3360      	adds	r3, #96	; 0x60
 8003f68:	2202      	movs	r2, #2
 8003f6a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f82:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f8a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003faa:	461a      	mov	r2, r3
 8003fac:	2302      	movs	r3, #2
 8003fae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	b2d9      	uxtb	r1, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	202c      	movs	r0, #44	; 0x2c
 8003fba:	fb00 f303 	mul.w	r3, r0, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3360      	adds	r3, #96	; 0x60
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f004 fcec 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fcc:	bf00      	nop
 8003fce:	3720      	adds	r7, #32
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08a      	sub	sp, #40	; 0x28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	0c5b      	lsrs	r3, r3, #17
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	091b      	lsrs	r3, r3, #4
 8004004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004008:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d004      	beq.n	800401a <HCD_RXQLVL_IRQHandler+0x46>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b05      	cmp	r3, #5
 8004014:	f000 80a9 	beq.w	800416a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004018:	e0aa      	b.n	8004170 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a6 	beq.w	800416e <HCD_RXQLVL_IRQHandler+0x19a>
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	212c      	movs	r1, #44	; 0x2c
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	4413      	add	r3, r2
 800402e:	3344      	adds	r3, #68	; 0x44
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 809b 	beq.w	800416e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3350      	adds	r3, #80	; 0x50
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	441a      	add	r2, r3
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	202c      	movs	r0, #44	; 0x2c
 8004052:	fb00 f303 	mul.w	r3, r0, r3
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	; 0x4c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d87a      	bhi.n	8004156 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3344      	adds	r3, #68	; 0x44
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	b292      	uxth	r2, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f001 fe4f 	bl	8005d1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	212c      	movs	r1, #44	; 0x2c
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3344      	adds	r3, #68	; 0x44
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	441a      	add	r2, r3
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	202c      	movs	r0, #44	; 0x2c
 8004098:	fb00 f303 	mul.w	r3, r0, r3
 800409c:	440b      	add	r3, r1
 800409e:	3344      	adds	r3, #68	; 0x44
 80040a0:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	212c      	movs	r1, #44	; 0x2c
 80040a8:	fb01 f303 	mul.w	r3, r1, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	3350      	adds	r3, #80	; 0x50
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	441a      	add	r2, r3
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	202c      	movs	r0, #44	; 0x2c
 80040bc:	fb00 f303 	mul.w	r3, r0, r3
 80040c0:	440b      	add	r3, r1
 80040c2:	3350      	adds	r3, #80	; 0x50
 80040c4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	0cdb      	lsrs	r3, r3, #19
 80040d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040da:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	212c      	movs	r1, #44	; 0x2c
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	3340      	adds	r3, #64	; 0x40
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d13c      	bne.n	800416e <HCD_RXQLVL_IRQHandler+0x19a>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d039      	beq.n	800416e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004110:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004118:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	212c      	movs	r1, #44	; 0x2c
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	3354      	adds	r3, #84	; 0x54
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	f083 0301 	eor.w	r3, r3, #1
 8004140:	b2d8      	uxtb	r0, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	212c      	movs	r1, #44	; 0x2c
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3354      	adds	r3, #84	; 0x54
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
      break;
 8004154:	e00b      	b.n	800416e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3360      	adds	r3, #96	; 0x60
 8004164:	2204      	movs	r2, #4
 8004166:	701a      	strb	r2, [r3, #0]
      break;
 8004168:	e001      	b.n	800416e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800416e:	bf00      	nop
  }
}
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d10b      	bne.n	80041c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d102      	bne.n	80041c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f004 fbd6 	bl	800896c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f043 0302 	orr.w	r3, r3, #2
 80041c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d132      	bne.n	8004238 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d126      	bne.n	8004232 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d113      	bne.n	8004214 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041f6:	d106      	bne.n	8004206 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 feec 	bl	8005fdc <USB_InitFSLSPClkSel>
 8004204:	e011      	b.n	800422a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2101      	movs	r1, #1
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fee5 	bl	8005fdc <USB_InitFSLSPClkSel>
 8004212:	e00a      	b.n	800422a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d106      	bne.n	800422a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004222:	461a      	mov	r2, r3
 8004224:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004228:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f004 fbc8 	bl	80089c0 <HAL_HCD_PortEnabled_Callback>
 8004230:	e002      	b.n	8004238 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f004 fbd2 	bl	80089dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b20      	cmp	r3, #32
 8004240:	d103      	bne.n	800424a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f043 0320 	orr.w	r3, r3, #32
 8004248:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e12b      	b.n	80044ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fd f99a 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	; 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c4:	f001 f9fc 	bl	80056c0 <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a81      	ldr	r2, [pc, #516]	; (80044d4 <HAL_I2C_Init+0x274>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d807      	bhi.n	80042e4 <HAL_I2C_Init+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_I2C_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e006      	b.n	80042f2 <HAL_I2C_Init+0x92>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <HAL_I2C_Init+0x27c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0e7      	b.n	80044ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a78      	ldr	r2, [pc, #480]	; (80044e0 <HAL_I2C_Init+0x280>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9b      	lsrs	r3, r3, #18
 8004304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6a      	ldr	r2, [pc, #424]	; (80044d4 <HAL_I2C_Init+0x274>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xd4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xe8>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a69      	ldr	r2, [pc, #420]	; (80044e4 <HAL_I2C_Init+0x284>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	495c      	ldr	r1, [pc, #368]	; (80044d4 <HAL_I2C_Init+0x274>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d819      	bhi.n	800439c <HAL_I2C_Init+0x13c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	f640 73fc 	movw	r3, #4092	; 0xffc
 800437c:	400b      	ands	r3, r1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_I2C_Init+0x138>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e59      	subs	r1, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	e051      	b.n	800443c <HAL_I2C_Init+0x1dc>
 8004398:	2304      	movs	r3, #4
 800439a:	e04f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_I2C_Init+0x168>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Init+0x18e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x196>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_I2C_Init+0x1dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_I2C_Init+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441a:	e00f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800446a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6911      	ldr	r1, [r2, #16]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000186a0 	.word	0x000186a0
 80044d8:	001e847f 	.word	0x001e847f
 80044dc:	003d08ff 	.word	0x003d08ff
 80044e0:	431bde83 	.word	0x431bde83
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e128      	b.n	800474c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a90      	ldr	r2, [pc, #576]	; (8004754 <HAL_I2S_Init+0x26c>)
 8004512:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fd f89b 	bl	8001650 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2202      	movs	r2, #2
 800453c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d060      	beq.n	8004608 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800454e:	2310      	movs	r3, #16
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e001      	b.n	8004558 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004554:	2320      	movs	r3, #32
 8004556:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b20      	cmp	r3, #32
 800455e:	d802      	bhi.n	8004566 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004566:	2001      	movs	r0, #1
 8004568:	f001 f9a0 	bl	80058ac <HAL_RCCEx_GetPeriphCLKFreq>
 800456c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004576:	d125      	bne.n	80045c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	fbb2 f2f3 	udiv	r2, r2, r3
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	3305      	adds	r3, #5
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	e01f      	b.n	80045e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	3305      	adds	r3, #5
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e00e      	b.n	80045e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	3305      	adds	r3, #5
 80045e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4a5c      	ldr	r2, [pc, #368]	; (8004758 <HAL_I2S_Init+0x270>)
 80045e6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	085b      	lsrs	r3, r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e003      	b.n	8004610 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004608:	2302      	movs	r3, #2
 800460a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d902      	bls.n	800461c <HAL_I2S_Init+0x134>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2bff      	cmp	r3, #255	; 0xff
 800461a:	d907      	bls.n	800462c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	f043 0210 	orr.w	r2, r3, #16
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e08f      	b.n	800474c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	ea42 0103 	orr.w	r1, r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	430a      	orrs	r2, r1
 800463e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800464a:	f023 030f 	bic.w	r3, r3, #15
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6851      	ldr	r1, [r2, #4]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6892      	ldr	r2, [r2, #8]
 8004656:	4311      	orrs	r1, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68d2      	ldr	r2, [r2, #12]
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6992      	ldr	r2, [r2, #24]
 8004662:	430a      	orrs	r2, r1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d161      	bne.n	800473c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a38      	ldr	r2, [pc, #224]	; (800475c <HAL_I2S_Init+0x274>)
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a37      	ldr	r2, [pc, #220]	; (8004760 <HAL_I2S_Init+0x278>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d101      	bne.n	800468c <HAL_I2S_Init+0x1a4>
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_I2S_Init+0x27c>)
 800468a:	e001      	b.n	8004690 <HAL_I2S_Init+0x1a8>
 800468c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	4932      	ldr	r1, [pc, #200]	; (8004760 <HAL_I2S_Init+0x278>)
 8004698:	428a      	cmp	r2, r1
 800469a:	d101      	bne.n	80046a0 <HAL_I2S_Init+0x1b8>
 800469c:	4a31      	ldr	r2, [pc, #196]	; (8004764 <HAL_I2S_Init+0x27c>)
 800469e:	e001      	b.n	80046a4 <HAL_I2S_Init+0x1bc>
 80046a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80046a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80046a8:	f023 030f 	bic.w	r3, r3, #15
 80046ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2b      	ldr	r2, [pc, #172]	; (8004760 <HAL_I2S_Init+0x278>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_I2S_Init+0x1d4>
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_I2S_Init+0x27c>)
 80046ba:	e001      	b.n	80046c0 <HAL_I2S_Init+0x1d8>
 80046bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c0:	2202      	movs	r2, #2
 80046c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a25      	ldr	r2, [pc, #148]	; (8004760 <HAL_I2S_Init+0x278>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d101      	bne.n	80046d2 <HAL_I2S_Init+0x1ea>
 80046ce:	4b25      	ldr	r3, [pc, #148]	; (8004764 <HAL_I2S_Init+0x27c>)
 80046d0:	e001      	b.n	80046d6 <HAL_I2S_Init+0x1ee>
 80046d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e2:	d003      	beq.n	80046ec <HAL_I2S_Init+0x204>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d103      	bne.n	80046f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	e001      	b.n	80046f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004702:	4313      	orrs	r3, r2
 8004704:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800470c:	4313      	orrs	r3, r2
 800470e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004716:	4313      	orrs	r3, r2
 8004718:	b29a      	uxth	r2, r3
 800471a:	897b      	ldrh	r3, [r7, #10]
 800471c:	4313      	orrs	r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004724:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <HAL_I2S_Init+0x278>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_I2S_Init+0x24c>
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_I2S_Init+0x27c>)
 8004732:	e001      	b.n	8004738 <HAL_I2S_Init+0x250>
 8004734:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004738:	897a      	ldrh	r2, [r7, #10]
 800473a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0800485f 	.word	0x0800485f
 8004758:	cccccccd 	.word	0xcccccccd
 800475c:	08004975 	.word	0x08004975
 8004760:	40003800 	.word	0x40003800
 8004764:	40003400 	.word	0x40003400

08004768 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10e      	bne.n	80047f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7ff ffb8 	bl	8004768 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	b292      	uxth	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	1c9a      	adds	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10e      	bne.n	8004856 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004846:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff ff93 	bl	800477c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b04      	cmp	r3, #4
 8004878:	d13a      	bne.n	80048f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d109      	bne.n	8004898 <I2S_IRQHandler+0x3a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b40      	cmp	r3, #64	; 0x40
 8004890:	d102      	bne.n	8004898 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ffb4 	bl	8004800 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d126      	bne.n	80048f0 <I2S_IRQHandler+0x92>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d11f      	bne.n	80048f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff50 	bl	8004790 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d136      	bne.n	800496a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d109      	bne.n	800491a <I2S_IRQHandler+0xbc>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d102      	bne.n	800491a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff45 	bl	80047a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d122      	bne.n	800496a <I2S_IRQHandler+0x10c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d11b      	bne.n	800496a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004940:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	f043 0204 	orr.w	r2, r3, #4
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff13 	bl	8004790 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800496a:	bf00      	nop
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4aa2      	ldr	r2, [pc, #648]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800498e:	4ba2      	ldr	r3, [pc, #648]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004990:	e001      	b.n	8004996 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a9b      	ldr	r2, [pc, #620]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d101      	bne.n	80049b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80049ac:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80049ae:	e001      	b.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80049b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c0:	d004      	beq.n	80049cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 8099 	bne.w	8004afe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d107      	bne.n	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f925 	bl	8004c30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9c8 	bl	8004d90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d13a      	bne.n	8004a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d035      	beq.n	8004a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a7e      	ldr	r2, [pc, #504]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a1e:	4b7e      	ldr	r3, [pc, #504]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a20:	e001      	b.n	8004a26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4979      	ldr	r1, [pc, #484]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a2e:	428b      	cmp	r3, r1
 8004a30:	d101      	bne.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a32:	4b79      	ldr	r3, [pc, #484]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a34:	e001      	b.n	8004a3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0202 	orr.w	r2, r3, #2
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff fe88 	bl	8004790 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b08      	cmp	r3, #8
 8004a88:	f040 80be 	bne.w	8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80b8 	beq.w	8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aa6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a59      	ldr	r2, [pc, #356]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ab4:	e001      	b.n	8004aba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4954      	ldr	r1, [pc, #336]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ac2:	428b      	cmp	r3, r1
 8004ac4:	d101      	bne.n	8004aca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004ac6:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ac8:	e001      	b.n	8004ace <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ad2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f043 0204 	orr.w	r2, r3, #4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fe4a 	bl	8004790 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004afc:	e084      	b.n	8004c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d107      	bne.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f8be 	bl	8004c94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8fd 	bl	8004d2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	d12f      	bne.n	8004b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02a      	beq.n	8004b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2e      	ldr	r2, [pc, #184]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d101      	bne.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b62:	e001      	b.n	8004b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4929      	ldr	r1, [pc, #164]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b70:	428b      	cmp	r3, r1
 8004b72:	d101      	bne.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b74:	4b28      	ldr	r3, [pc, #160]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b76:	e001      	b.n	8004b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fdfa 	bl	8004790 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d131      	bne.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d02c      	beq.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bbc:	e001      	b.n	8004bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4912      	ldr	r1, [pc, #72]	; (8004c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bca:	428b      	cmp	r3, r1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bd0:	e001      	b.n	8004bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff fdc5 	bl	8004790 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	e000      	b.n	8004c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c08:	bf00      	nop
}
 8004c0a:	bf00      	nop
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40003800 	.word	0x40003800
 8004c18:	40003400 	.word	0x40003400

08004c1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c99      	adds	r1, r3, #2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6251      	str	r1, [r2, #36]	; 0x24
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d113      	bne.n	8004c8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffc9 	bl	8004c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	1c99      	adds	r1, r3, #2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ca6:	8819      	ldrh	r1, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <I2SEx_TxISR_I2SExt+0x90>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <I2SEx_TxISR_I2SExt+0x22>
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <I2SEx_TxISR_I2SExt+0x94>)
 8004cb4:	e001      	b.n	8004cba <I2SEx_TxISR_I2SExt+0x26>
 8004cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cba:	460a      	mov	r2, r1
 8004cbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <I2SEx_TxISR_I2SExt+0x90>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <I2SEx_TxISR_I2SExt+0x50>
 8004ce0:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <I2SEx_TxISR_I2SExt+0x94>)
 8004ce2:	e001      	b.n	8004ce8 <I2SEx_TxISR_I2SExt+0x54>
 8004ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	490d      	ldr	r1, [pc, #52]	; (8004d24 <I2SEx_TxISR_I2SExt+0x90>)
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d101      	bne.n	8004cf8 <I2SEx_TxISR_I2SExt+0x64>
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <I2SEx_TxISR_I2SExt+0x94>)
 8004cf6:	e001      	b.n	8004cfc <I2SEx_TxISR_I2SExt+0x68>
 8004cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff81 	bl	8004c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40003800 	.word	0x40003800
 8004d28:	40003400 	.word	0x40003400

08004d2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68d8      	ldr	r0, [r3, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	1c99      	adds	r1, r3, #2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d44:	b282      	uxth	r2, r0
 8004d46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d113      	bne.n	8004d88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff4a 	bl	8004c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <I2SEx_RxISR_I2SExt+0x90>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <I2SEx_RxISR_I2SExt+0x16>
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <I2SEx_RxISR_I2SExt+0x94>)
 8004da4:	e001      	b.n	8004daa <I2SEx_RxISR_I2SExt+0x1a>
 8004da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004daa:	68d8      	ldr	r0, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db0:	1c99      	adds	r1, r3, #2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004db6:	b282      	uxth	r2, r0
 8004db8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d121      	bne.n	8004e16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <I2SEx_RxISR_I2SExt+0x90>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <I2SEx_RxISR_I2SExt+0x50>
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <I2SEx_RxISR_I2SExt+0x94>)
 8004dde:	e001      	b.n	8004de4 <I2SEx_RxISR_I2SExt+0x54>
 8004de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	490d      	ldr	r1, [pc, #52]	; (8004e20 <I2SEx_RxISR_I2SExt+0x90>)
 8004dec:	428b      	cmp	r3, r1
 8004dee:	d101      	bne.n	8004df4 <I2SEx_RxISR_I2SExt+0x64>
 8004df0:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <I2SEx_RxISR_I2SExt+0x94>)
 8004df2:	e001      	b.n	8004df8 <I2SEx_RxISR_I2SExt+0x68>
 8004df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004dfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d106      	bne.n	8004e16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff03 	bl	8004c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40003800 	.word	0x40003800
 8004e24:	40003400 	.word	0x40003400

08004e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e264      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d075      	beq.n	8004f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e46:	4ba3      	ldr	r3, [pc, #652]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00c      	beq.n	8004e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e52:	4ba0      	ldr	r3, [pc, #640]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e5a:	2b08      	cmp	r3, #8
 8004e5c:	d112      	bne.n	8004e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5e:	4b9d      	ldr	r3, [pc, #628]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6a:	d10b      	bne.n	8004e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6c:	4b99      	ldr	r3, [pc, #612]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05b      	beq.n	8004f30 <HAL_RCC_OscConfig+0x108>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d157      	bne.n	8004f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e23f      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_OscConfig+0x74>
 8004e8e:	4b91      	ldr	r3, [pc, #580]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a90      	ldr	r2, [pc, #576]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e01d      	b.n	8004ed8 <HAL_RCC_OscConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x98>
 8004ea6:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a8a      	ldr	r2, [pc, #552]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a87      	ldr	r2, [pc, #540]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0xb0>
 8004ec0:	4b84      	ldr	r3, [pc, #528]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a83      	ldr	r2, [pc, #524]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a80      	ldr	r2, [pc, #512]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fd8a 	bl	80019f8 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee8:	f7fc fd86 	bl	80019f8 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e204      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xc0>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fc fd76 	bl	80019f8 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fc fd72 	bl	80019f8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e1f0      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0xe8>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d063      	beq.n	8005006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3e:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4a:	4b62      	ldr	r3, [pc, #392]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d11c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f56:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d116      	bne.n	8004f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	4b5c      	ldr	r3, [pc, #368]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCC_OscConfig+0x152>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e1c4      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7a:	4b56      	ldr	r3, [pc, #344]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	4952      	ldr	r1, [pc, #328]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	e03a      	b.n	8005006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d020      	beq.n	8004fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCC_OscConfig+0x2b0>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fc fd2b 	bl	80019f8 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fa6:	f7fc fd27 	bl	80019f8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e1a5      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	4b46      	ldr	r3, [pc, #280]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4940      	ldr	r1, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]
 8004fd8:	e015      	b.n	8005006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fda:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <HAL_RCC_OscConfig+0x2b0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fc fd0a 	bl	80019f8 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe8:	f7fc fd06 	bl	80019f8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e184      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d030      	beq.n	8005074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <HAL_RCC_OscConfig+0x2b4>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fc fcea 	bl	80019f8 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005028:	f7fc fce6 	bl	80019f8 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e164      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x200>
 8005046:	e015      	b.n	8005074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005048:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_RCC_OscConfig+0x2b4>)
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504e:	f7fc fcd3 	bl	80019f8 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005056:	f7fc fccf 	bl	80019f8 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e14d      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 800506a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80a0 	beq.w	80051c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10f      	bne.n	80050b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6413      	str	r3, [r2, #64]	; 0x40
 80050a2:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_OscConfig+0x2b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d121      	bne.n	8005102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <HAL_RCC_OscConfig+0x2b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a07      	ldr	r2, [pc, #28]	; (80050e0 <HAL_RCC_OscConfig+0x2b8>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ca:	f7fc fc95 	bl	80019f8 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d0:	e011      	b.n	80050f6 <HAL_RCC_OscConfig+0x2ce>
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	42470000 	.word	0x42470000
 80050dc:	42470e80 	.word	0x42470e80
 80050e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e4:	f7fc fc88 	bl	80019f8 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e106      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCC_OscConfig+0x4e4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0f0      	beq.n	80050e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d106      	bne.n	8005118 <HAL_RCC_OscConfig+0x2f0>
 800510a:	4b81      	ldr	r3, [pc, #516]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a80      	ldr	r2, [pc, #512]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
 8005116:	e01c      	b.n	8005152 <HAL_RCC_OscConfig+0x32a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b05      	cmp	r3, #5
 800511e:	d10c      	bne.n	800513a <HAL_RCC_OscConfig+0x312>
 8005120:	4b7b      	ldr	r3, [pc, #492]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a7a      	ldr	r2, [pc, #488]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005126:	f043 0304 	orr.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	4b78      	ldr	r3, [pc, #480]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a77      	ldr	r2, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	e00b      	b.n	8005152 <HAL_RCC_OscConfig+0x32a>
 800513a:	4b75      	ldr	r3, [pc, #468]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a74      	ldr	r2, [pc, #464]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	4b72      	ldr	r3, [pc, #456]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a71      	ldr	r2, [pc, #452]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d015      	beq.n	8005186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515a:	f7fc fc4d 	bl	80019f8 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fc fc49 	bl	80019f8 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0c5      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	4b65      	ldr	r3, [pc, #404]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RCC_OscConfig+0x33a>
 8005184:	e014      	b.n	80051b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005186:	f7fc fc37 	bl	80019f8 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fc fc33 	bl	80019f8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0af      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a4:	4b5a      	ldr	r3, [pc, #360]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1ee      	bne.n	800518e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b6:	4b56      	ldr	r3, [pc, #344]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a55      	ldr	r2, [pc, #340]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 80051bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 809b 	beq.w	8005302 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d05c      	beq.n	8005292 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d141      	bne.n	8005264 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e0:	4b4c      	ldr	r3, [pc, #304]	; (8005314 <HAL_RCC_OscConfig+0x4ec>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fc fc07 	bl	80019f8 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ee:	f7fc fc03 	bl	80019f8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e081      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005200:	4b43      	ldr	r3, [pc, #268]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f0      	bne.n	80051ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	019b      	lsls	r3, r3, #6
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	3b01      	subs	r3, #1
 8005226:	041b      	lsls	r3, r3, #16
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	061b      	lsls	r3, r3, #24
 8005230:	4937      	ldr	r1, [pc, #220]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005236:	4b37      	ldr	r3, [pc, #220]	; (8005314 <HAL_RCC_OscConfig+0x4ec>)
 8005238:	2201      	movs	r2, #1
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc fbdc 	bl	80019f8 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fbd8 	bl	80019f8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e056      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x41c>
 8005262:	e04e      	b.n	8005302 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005264:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <HAL_RCC_OscConfig+0x4ec>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7fc fbc5 	bl	80019f8 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005272:	f7fc fbc1 	bl	80019f8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e03f      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCC_OscConfig+0x44a>
 8005290:	e037      	b.n	8005302 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e032      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800529e:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <HAL_RCC_OscConfig+0x4e8>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d028      	beq.n	80052fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d121      	bne.n	80052fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d11a      	bne.n	80052fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052ce:	4013      	ands	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d111      	bne.n	80052fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d107      	bne.n	80052fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d001      	beq.n	8005302 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40007000 	.word	0x40007000
 8005310:	40023800 	.word	0x40023800
 8005314:	42470060 	.word	0x42470060

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0cc      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b68      	ldr	r3, [pc, #416]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d90c      	bls.n	8005354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b65      	ldr	r3, [pc, #404]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005342:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e0b8      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d020      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800536c:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a58      	ldr	r2, [pc, #352]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0308 	and.w	r3, r3, #8
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005384:	4b53      	ldr	r3, [pc, #332]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	4a52      	ldr	r2, [pc, #328]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800538e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	494d      	ldr	r1, [pc, #308]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d044      	beq.n	8005438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b47      	ldr	r3, [pc, #284]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d119      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e07f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e6:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e067      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f023 0203 	bic.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4934      	ldr	r1, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	4313      	orrs	r3, r2
 8005406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005408:	f7fc faf6 	bl	80019f8 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	e00a      	b.n	8005426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005410:	f7fc faf2 	bl	80019f8 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04f      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 020c 	and.w	r2, r3, #12
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	429a      	cmp	r2, r3
 8005436:	d1eb      	bne.n	8005410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d20c      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e032      	b.n	80054c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4916      	ldr	r1, [pc, #88]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548a:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	490e      	ldr	r1, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800549e:	f000 f821 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80054a2:	4602      	mov	r2, r0
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	490a      	ldr	r1, [pc, #40]	; (80054d8 <HAL_RCC_ClockConfig+0x1c0>)
 80054b0:	5ccb      	ldrb	r3, [r1, r3]
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1c4>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc fa56 	bl	8001970 <HAL_InitTick>

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023c00 	.word	0x40023c00
 80054d4:	40023800 	.word	0x40023800
 80054d8:	0800982c 	.word	0x0800982c
 80054dc:	20000000 	.word	0x20000000
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	607b      	str	r3, [r7, #4]
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054fc:	4b67      	ldr	r3, [pc, #412]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 030c 	and.w	r3, r3, #12
 8005504:	2b08      	cmp	r3, #8
 8005506:	d00d      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x40>
 8005508:	2b08      	cmp	r3, #8
 800550a:	f200 80bd 	bhi.w	8005688 <HAL_RCC_GetSysClockFreq+0x1a4>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x34>
 8005512:	2b04      	cmp	r3, #4
 8005514:	d003      	beq.n	800551e <HAL_RCC_GetSysClockFreq+0x3a>
 8005516:	e0b7      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005518:	4b61      	ldr	r3, [pc, #388]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800551a:	60bb      	str	r3, [r7, #8]
       break;
 800551c:	e0b7      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800551e:	4b61      	ldr	r3, [pc, #388]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005520:	60bb      	str	r3, [r7, #8]
      break;
 8005522:	e0b4      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005524:	4b5d      	ldr	r3, [pc, #372]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800552c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800552e:	4b5b      	ldr	r3, [pc, #364]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d04d      	beq.n	80055d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b58      	ldr	r3, [pc, #352]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	461a      	mov	r2, r3
 8005542:	f04f 0300 	mov.w	r3, #0
 8005546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	ea02 0800 	and.w	r8, r2, r0
 8005552:	ea03 0901 	and.w	r9, r3, r1
 8005556:	4640      	mov	r0, r8
 8005558:	4649      	mov	r1, r9
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	014b      	lsls	r3, r1, #5
 8005564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005568:	0142      	lsls	r2, r0, #5
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	ebb0 0008 	subs.w	r0, r0, r8
 8005572:	eb61 0109 	sbc.w	r1, r1, r9
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	018b      	lsls	r3, r1, #6
 8005580:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005584:	0182      	lsls	r2, r0, #6
 8005586:	1a12      	subs	r2, r2, r0
 8005588:	eb63 0301 	sbc.w	r3, r3, r1
 800558c:	f04f 0000 	mov.w	r0, #0
 8005590:	f04f 0100 	mov.w	r1, #0
 8005594:	00d9      	lsls	r1, r3, #3
 8005596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800559a:	00d0      	lsls	r0, r2, #3
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	eb12 0208 	adds.w	r2, r2, r8
 80055a4:	eb43 0309 	adc.w	r3, r3, r9
 80055a8:	f04f 0000 	mov.w	r0, #0
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	0259      	lsls	r1, r3, #9
 80055b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055b6:	0250      	lsls	r0, r2, #9
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4610      	mov	r0, r2
 80055be:	4619      	mov	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	f7fb fb18 	bl	8000bfc <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4613      	mov	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e04a      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d6:	4b31      	ldr	r3, [pc, #196]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	461a      	mov	r2, r3
 80055de:	f04f 0300 	mov.w	r3, #0
 80055e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055e6:	f04f 0100 	mov.w	r1, #0
 80055ea:	ea02 0400 	and.w	r4, r2, r0
 80055ee:	ea03 0501 	and.w	r5, r3, r1
 80055f2:	4620      	mov	r0, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	014b      	lsls	r3, r1, #5
 8005600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005604:	0142      	lsls	r2, r0, #5
 8005606:	4610      	mov	r0, r2
 8005608:	4619      	mov	r1, r3
 800560a:	1b00      	subs	r0, r0, r4
 800560c:	eb61 0105 	sbc.w	r1, r1, r5
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	018b      	lsls	r3, r1, #6
 800561a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800561e:	0182      	lsls	r2, r0, #6
 8005620:	1a12      	subs	r2, r2, r0
 8005622:	eb63 0301 	sbc.w	r3, r3, r1
 8005626:	f04f 0000 	mov.w	r0, #0
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	00d9      	lsls	r1, r3, #3
 8005630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005634:	00d0      	lsls	r0, r2, #3
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	1912      	adds	r2, r2, r4
 800563c:	eb45 0303 	adc.w	r3, r5, r3
 8005640:	f04f 0000 	mov.w	r0, #0
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	0299      	lsls	r1, r3, #10
 800564a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800564e:	0290      	lsls	r0, r2, #10
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4610      	mov	r0, r2
 8005656:	4619      	mov	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	461a      	mov	r2, r3
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	f7fb facc 	bl	8000bfc <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4613      	mov	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	3301      	adds	r3, #1
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	60bb      	str	r3, [r7, #8]
      break;
 8005686:	e002      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800568a:	60bb      	str	r3, [r7, #8]
      break;
 800568c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568e:	68bb      	ldr	r3, [r7, #8]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	007a1200 	.word	0x007a1200

080056a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RCC_GetHCLKFreq+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000000 	.word	0x20000000

080056c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056c4:	f7ff fff0 	bl	80056a8 <HAL_RCC_GetHCLKFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	0a9b      	lsrs	r3, r3, #10
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	4903      	ldr	r1, [pc, #12]	; (80056e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40023800 	.word	0x40023800
 80056e4:	0800983c 	.word	0x0800983c

080056e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800570c:	2b00      	cmp	r3, #0
 800570e:	d035      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005710:	4b62      	ldr	r3, [pc, #392]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005716:	f7fc f96f 	bl	80019f8 <HAL_GetTick>
 800571a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800571c:	e008      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800571e:	f7fc f96b 	bl	80019f8 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0b0      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005730:	4b5b      	ldr	r3, [pc, #364]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	019a      	lsls	r2, r3, #6
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	071b      	lsls	r3, r3, #28
 8005748:	4955      	ldr	r1, [pc, #340]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005750:	4b52      	ldr	r3, [pc, #328]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005752:	2201      	movs	r2, #1
 8005754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005756:	f7fc f94f 	bl	80019f8 <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800575e:	f7fc f94b 	bl	80019f8 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e090      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005770:	4b4b      	ldr	r3, [pc, #300]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8083 	beq.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	4a43      	ldr	r2, [pc, #268]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005798:	6413      	str	r3, [r2, #64]	; 0x40
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80057a6:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3e      	ldr	r2, [pc, #248]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057b2:	f7fc f921 	bl	80019f8 <HAL_GetTick>
 80057b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fc f91d 	bl	80019f8 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e062      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d8:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d02f      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d028      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005800:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005806:	4b28      	ldr	r3, [pc, #160]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005812:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b01      	cmp	r3, #1
 800581c:	d114      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800581e:	f7fc f8eb 	bl	80019f8 <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	e00a      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005826:	f7fc f8e7 	bl	80019f8 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	f241 3288 	movw	r2, #5000	; 0x1388
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e02a      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583c:	4b18      	ldr	r3, [pc, #96]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0ee      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005854:	d10d      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	490d      	ldr	r1, [pc, #52]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800586c:	4313      	orrs	r3, r2
 800586e:	608b      	str	r3, [r1, #8]
 8005870:	e005      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005872:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005878:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800588a:	4905      	ldr	r1, [pc, #20]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588c:	4313      	orrs	r3, r2
 800588e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	42470068 	.word	0x42470068
 80058a0:	40023800 	.word	0x40023800
 80058a4:	40007000 	.word	0x40007000
 80058a8:	42470e40 	.word	0x42470e40

080058ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d13e      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d12f      	bne.n	8005940 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058e0:	4b1e      	ldr	r3, [pc, #120]	; (800595c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058e2:	617b      	str	r3, [r7, #20]
          break;
 80058e4:	e02f      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058e6:	4b1c      	ldr	r3, [pc, #112]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f2:	d108      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058fc:	4a18      	ldr	r2, [pc, #96]	; (8005960 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e007      	b.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800590e:	4a15      	ldr	r2, [pc, #84]	; (8005964 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005910:	fbb2 f3f3 	udiv	r3, r2, r3
 8005914:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005916:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800591c:	099b      	lsrs	r3, r3, #6
 800591e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	fb02 f303 	mul.w	r3, r2, r3
 8005928:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800592c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005930:	0f1b      	lsrs	r3, r3, #28
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
          break;
 800593e:	e002      	b.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
          break;
 8005944:	bf00      	nop
        }
      }
      break;
 8005946:	bf00      	nop
    }
  }
  return frequency;
 8005948:	697b      	ldr	r3, [r7, #20]
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40023800 	.word	0x40023800
 800595c:	00bb8000 	.word	0x00bb8000
 8005960:	007a1200 	.word	0x007a1200
 8005964:	00f42400 	.word	0x00f42400

08005968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07b      	b.n	8005a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d108      	bne.n	8005994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800598a:	d009      	beq.n	80059a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]
 8005992:	e005      	b.n	80059a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fec8 	bl	8001750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a24:	ea42 0103 	orr.w	r1, r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	f003 0104 	and.w	r1, r3, #4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0210 	and.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	f107 001c 	add.w	r0, r7, #28
 8005a88:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d122      	bne.n	8005ad8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d105      	bne.n	8005acc <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f99f 	bl	8005e10 <USB_CoreReset>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
 8005ad6:	e01a      	b.n	8005b0e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f993 	bl	8005e10 <USB_CoreReset>
 8005aea:	4603      	mov	r3, r0
 8005aec:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d106      	bne.n	8005b02 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
 8005b00:	e005      	b.n	8005b0e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10b      	bne.n	8005b2c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f043 0206 	orr.w	r2, r3, #6
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b38:	b004      	add	sp, #16
 8005b3a:	4770      	bx	lr

08005b3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f043 0201 	orr.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d115      	bne.n	8005bce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bae:	2001      	movs	r0, #1
 8005bb0:	f7fb ff2e 	bl	8001a10 <HAL_Delay>
      ms++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f919 	bl	8005df2 <USB_GetMode>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d01e      	beq.n	8005c04 <USB_SetCurrentMode+0x84>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b31      	cmp	r3, #49	; 0x31
 8005bca:	d9f0      	bls.n	8005bae <USB_SetCurrentMode+0x2e>
 8005bcc:	e01a      	b.n	8005c04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d115      	bne.n	8005c00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005be0:	2001      	movs	r0, #1
 8005be2:	f7fb ff15 	bl	8001a10 <HAL_Delay>
      ms++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f900 	bl	8005df2 <USB_GetMode>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <USB_SetCurrentMode+0x84>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b31      	cmp	r3, #49	; 0x31
 8005bfc:	d9f0      	bls.n	8005be0 <USB_SetCurrentMode+0x60>
 8005bfe:	e001      	b.n	8005c04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e005      	b.n	8005c10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b32      	cmp	r3, #50	; 0x32
 8005c08:	d101      	bne.n	8005c0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	019b      	lsls	r3, r3, #6
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <USB_FlushTxFifo+0x44>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e006      	b.n	8005c50 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d0f1      	beq.n	8005c32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	00030d40 	.word	0x00030d40

08005c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2210      	movs	r2, #16
 8005c70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <USB_FlushRxFifo+0x3c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d0f1      	beq.n	8005c72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	460b      	mov	r3, r1
 8005cb0:	71fb      	strb	r3, [r7, #7]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d123      	bne.n	8005d0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cc6:	88bb      	ldrh	r3, [r7, #4]
 8005cc8:	3303      	adds	r3, #3
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e018      	b.n	8005d06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	031a      	lsls	r2, r3, #12
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	3301      	adds	r3, #1
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3e2      	bcc.n	8005cd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3724      	adds	r7, #36	; 0x24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b08b      	sub	sp, #44	; 0x2c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	e014      	b.n	8005d72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	3301      	adds	r3, #1
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	3301      	adds	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	3301      	adds	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3e6      	bcc.n	8005d48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d7a:	8bfb      	ldrh	r3, [r7, #30]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	701a      	strb	r2, [r3, #0]
      i++;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	3301      	adds	r3, #1
 8005daa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005db8:	8bfb      	ldrh	r3, [r7, #30]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ea      	bne.n	8005d94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	372c      	adds	r7, #44	; 0x2c
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <USB_CoreReset+0x60>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e01a      	b.n	8005e62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	daf3      	bge.n	8005e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f043 0201 	orr.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]
 8005e4a:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <USB_CoreReset+0x60>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e006      	b.n	8005e62 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d0f1      	beq.n	8005e44 <USB_CoreReset+0x34>

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	00030d40 	.word	0x00030d40

08005e74 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e74:	b084      	sub	sp, #16
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	f107 001c 	add.w	r0, r7, #28
 8005e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d018      	beq.n	8005ef8 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d10a      	bne.n	8005ee2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005eda:	f043 0304 	orr.w	r3, r3, #4
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e014      	b.n	8005f0c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	e009      	b.n	8005f0c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f06:	f023 0304 	bic.w	r3, r3, #4
 8005f0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f0c:	2110      	movs	r1, #16
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff fe82 	bl	8005c18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff fea3 	bl	8005c60 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e015      	b.n	8005f4c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f32:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f40:	461a      	mov	r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d3e5      	bcc.n	8005f20 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f60:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <USB_HostInit+0x154>)
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <USB_HostInit+0x158>)
 8005f80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f84:	e009      	b.n	8005f9a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <USB_HostInit+0x15c>)
 8005f90:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a0f      	ldr	r2, [pc, #60]	; (8005fd4 <USB_HostInit+0x160>)
 8005f96:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <USB_HostInit+0x164>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc4:	b004      	add	sp, #16
 8005fc6:	4770      	bx	lr
 8005fc8:	01000200 	.word	0x01000200
 8005fcc:	00e00300 	.word	0x00e00300
 8005fd0:	00600080 	.word	0x00600080
 8005fd4:	004000e0 	.word	0x004000e0
 8005fd8:	a3200008 	.word	0xa3200008

08005fdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	68f9      	ldr	r1, [r7, #12]
 8006010:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006014:	4313      	orrs	r3, r2
 8006016:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d107      	bne.n	800602e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006024:	461a      	mov	r2, r3
 8006026:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800602a:	6053      	str	r3, [r2, #4]
 800602c:	e009      	b.n	8006042 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d106      	bne.n	8006042 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	461a      	mov	r2, r3
 800603c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006040:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006070:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800607a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006080:	2064      	movs	r0, #100	; 0x64
 8006082:	f7fb fcc5 	bl	8001a10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800608e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006092:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006094:	200a      	movs	r0, #10
 8006096:	f7fb fcbb 	bl	8001a10 <HAL_Delay>

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <USB_DriveVbus+0x44>
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d106      	bne.n	80060e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d109      	bne.n	8006108 <USB_DriveVbus+0x64>
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d106      	bne.n	8006108 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006106:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006116:	b480      	push	{r7}
 8006118:	b085      	sub	sp, #20
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	0c5b      	lsrs	r3, r3, #17
 8006134:	f003 0303 	and.w	r3, r3, #3
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	b29b      	uxth	r3, r3
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4603      	mov	r3, r0
 8006178:	70fb      	strb	r3, [r7, #3]
 800617a:	460b      	mov	r3, r1
 800617c:	70bb      	strb	r3, [r7, #2]
 800617e:	4613      	mov	r3, r2
 8006180:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4413      	add	r3, r2
 8006192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006196:	461a      	mov	r2, r3
 8006198:	f04f 33ff 	mov.w	r3, #4294967295
 800619c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800619e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d87e      	bhi.n	80062a4 <USB_HC_Init+0x13c>
 80061a6:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <USB_HC_Init+0x44>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	08006267 	.word	0x08006267
 80061b4:	080061bd 	.word	0x080061bd
 80061b8:	08006229 	.word	0x08006229
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c8:	461a      	mov	r2, r3
 80061ca:	f240 439d 	movw	r3, #1181	; 0x49d
 80061ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da10      	bge.n	80061fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80061f8:	e057      	b.n	80062aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	2b00      	cmp	r3, #0
 8006204:	d051      	beq.n	80062aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006220:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006224:	60d3      	str	r3, [r2, #12]
      break;
 8006226:	e040      	b.n	80062aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	461a      	mov	r2, r3
 8006236:	f240 639d 	movw	r3, #1693	; 0x69d
 800623a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800623c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	da34      	bge.n	80062ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	440a      	add	r2, r1
 800625a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006264:	e023      	b.n	80062ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	461a      	mov	r2, r3
 8006274:	f240 2325 	movw	r3, #549	; 0x225
 8006278:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800627a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800627e:	2b00      	cmp	r3, #0
 8006280:	da17      	bge.n	80062b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	440a      	add	r2, r1
 8006298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800629c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062a2:	e006      	b.n	80062b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	77fb      	strb	r3, [r7, #31]
      break;
 80062a8:	e004      	b.n	80062b4 <USB_HC_Init+0x14c>
      break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <USB_HC_Init+0x14c>
      break;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <USB_HC_Init+0x14c>
      break;
 80062b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	78fb      	ldrb	r3, [r7, #3]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	2101      	movs	r1, #1
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	6939      	ldr	r1, [r7, #16]
 80062ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062ce:	4313      	orrs	r3, r2
 80062d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da03      	bge.n	80062ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e001      	b.n	80062f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff0f 	bl	8006116 <USB_GetHostSpeed>
 80062f8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d106      	bne.n	8006310 <USB_HC_Init+0x1a8>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d003      	beq.n	8006310 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e001      	b.n	8006314 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006314:	787b      	ldrb	r3, [r7, #1]
 8006316:	059b      	lsls	r3, r3, #22
 8006318:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800631c:	78bb      	ldrb	r3, [r7, #2]
 800631e:	02db      	lsls	r3, r3, #11
 8006320:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006324:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006326:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800632a:	049b      	lsls	r3, r3, #18
 800632c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006330:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006332:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006334:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006338:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	0159      	lsls	r1, r3, #5
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	440b      	add	r3, r1
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006350:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006352:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006356:	2b03      	cmp	r3, #3
 8006358:	d10f      	bne.n	800637a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006374:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006378:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800637a:	7ffb      	ldrb	r3, [r7, #31]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08c      	sub	sp, #48	; 0x30
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800639c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063a0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d02d      	beq.n	800640a <USB_HC_StartXfer+0x86>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	791b      	ldrb	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d129      	bne.n	800640a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d117      	bne.n	80063ec <USB_HC_StartXfer+0x68>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	79db      	ldrb	r3, [r3, #7]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <USB_HC_StartXfer+0x48>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	79db      	ldrb	r3, [r3, #7]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d10f      	bne.n	80063ec <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <USB_HC_StartXfer+0x86>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	795b      	ldrb	r3, [r3, #5]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d107      	bne.n	800640a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	4619      	mov	r1, r3
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fa2f 	bl	8006864 <USB_DoPing>
      return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e0f8      	b.n	80065fc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d018      	beq.n	8006444 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	8912      	ldrh	r2, [r2, #8]
 800641a:	4413      	add	r3, r2
 800641c:	3b01      	subs	r3, #1
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	8912      	ldrh	r2, [r2, #8]
 8006422:	fbb3 f3f2 	udiv	r3, r3, r2
 8006426:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006428:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800642a:	8b7b      	ldrh	r3, [r7, #26]
 800642c:	429a      	cmp	r2, r3
 800642e:	d90b      	bls.n	8006448 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006430:	8b7b      	ldrh	r3, [r7, #26]
 8006432:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	8912      	ldrh	r2, [r2, #8]
 800643a:	fb02 f203 	mul.w	r2, r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	611a      	str	r2, [r3, #16]
 8006442:	e001      	b.n	8006448 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006444:	2301      	movs	r3, #1
 8006446:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	8912      	ldrh	r2, [r2, #8]
 8006456:	fb02 f203 	mul.w	r2, r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	611a      	str	r2, [r3, #16]
 800645e:	e003      	b.n	8006468 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006472:	04d9      	lsls	r1, r3, #19
 8006474:	4b63      	ldr	r3, [pc, #396]	; (8006604 <USB_HC_StartXfer+0x280>)
 8006476:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006478:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7a9b      	ldrb	r3, [r3, #10]
 800647e:	075b      	lsls	r3, r3, #29
 8006480:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006484:	69f9      	ldr	r1, [r7, #28]
 8006486:	0148      	lsls	r0, r1, #5
 8006488:	6a39      	ldr	r1, [r7, #32]
 800648a:	4401      	add	r1, r0
 800648c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006490:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006492:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bf0c      	ite	eq
 80064be:	2301      	moveq	r3, #1
 80064c0:	2300      	movne	r3, #0
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	7e7b      	ldrb	r3, [r7, #25]
 80064f6:	075b      	lsls	r3, r3, #29
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	0148      	lsls	r0, r1, #5
 80064fc:	6a39      	ldr	r1, [r7, #32]
 80064fe:	4401      	add	r1, r0
 8006500:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800651e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	78db      	ldrb	r3, [r3, #3]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e003      	b.n	800653a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006538:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006540:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	461a      	mov	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e04e      	b.n	80065fc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	78db      	ldrb	r3, [r3, #3]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d149      	bne.n	80065fa <USB_HC_StartXfer+0x276>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d045      	beq.n	80065fa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	79db      	ldrb	r3, [r3, #7]
 8006572:	2b03      	cmp	r3, #3
 8006574:	d830      	bhi.n	80065d8 <USB_HC_StartXfer+0x254>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <USB_HC_StartXfer+0x1f8>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	0800658d 	.word	0x0800658d
 8006580:	080065b1 	.word	0x080065b1
 8006584:	0800658d 	.word	0x0800658d
 8006588:	080065b1 	.word	0x080065b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	3303      	adds	r3, #3
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006596:	8afa      	ldrh	r2, [r7, #22]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	b29b      	uxth	r3, r3
 800659e:	429a      	cmp	r2, r3
 80065a0:	d91c      	bls.n	80065dc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f043 0220 	orr.w	r2, r3, #32
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80065ae:	e015      	b.n	80065dc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	3303      	adds	r3, #3
 80065b6:	089b      	lsrs	r3, r3, #2
 80065b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065ba:	8afa      	ldrh	r2, [r7, #22]
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d90a      	bls.n	80065e0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80065d6:	e003      	b.n	80065e0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80065d8:	bf00      	nop
 80065da:	e002      	b.n	80065e2 <USB_HC_StartXfer+0x25e>
        break;
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <USB_HC_StartXfer+0x25e>
        break;
 80065e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	68d9      	ldr	r1, [r3, #12]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	785a      	ldrb	r2, [r3, #1]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2000      	movs	r0, #0
 80065f2:	9000      	str	r0, [sp, #0]
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fb53 	bl	8005ca0 <USB_WritePacket>
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3728      	adds	r7, #40	; 0x28
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	1ff80000 	.word	0x1ff80000

08006608 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	b29b      	uxth	r3, r3
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800662a:	b480      	push	{r7}
 800662c:	b089      	sub	sp, #36	; 0x24
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0c9b      	lsrs	r3, r3, #18
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	0fdb      	lsrs	r3, r3, #31
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b20      	cmp	r3, #32
 8006678:	d104      	bne.n	8006684 <USB_HC_Halt+0x5a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	e0e8      	b.n	8006856 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d002      	beq.n	8006690 <USB_HC_Halt+0x66>
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d173      	bne.n	8006778 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f040 80cb 	bne.w	8006854 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d143      	bne.n	8006752 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006708:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	440a      	add	r2, r1
 8006720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006728:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006736:	d81d      	bhi.n	8006774 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	4413      	add	r3, r2
 8006740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800674e:	d0ec      	beq.n	800672a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006750:	e080      	b.n	8006854 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	440a      	add	r2, r1
 8006768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006770:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006772:	e06f      	b.n	8006854 <USB_HC_Halt+0x22a>
            break;
 8006774:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006776:	e06d      	b.n	8006854 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	440a      	add	r2, r1
 800678e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006792:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006796:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d143      	bne.n	8006830 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006802:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006806:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	3301      	adds	r3, #1
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006814:	d81d      	bhi.n	8006852 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	4413      	add	r3, r2
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800682c:	d0ec      	beq.n	8006808 <USB_HC_Halt+0x1de>
 800682e:	e011      	b.n	8006854 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e000      	b.n	8006854 <USB_HC_Halt+0x22a>
          break;
 8006852:	bf00      	nop
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3724      	adds	r7, #36	; 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006878:	2301      	movs	r3, #1
 800687a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	04da      	lsls	r2, r3, #19
 8006880:	4b15      	ldr	r3, [pc, #84]	; (80068d8 <USB_DoPing+0x74>)
 8006882:	4013      	ands	r3, r2
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006894:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4413      	add	r3, r2
 800689e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c2:	461a      	mov	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	1ff80000 	.word	0x1ff80000

080068dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff f936 	bl	8005b5e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80068f2:	2110      	movs	r1, #16
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff f98f 	bl	8005c18 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff f9b0 	bl	8005c60 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006900:	2300      	movs	r3, #0
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	e01f      	b.n	8006946 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006924:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800692c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	461a      	mov	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d9dc      	bls.n	8006906 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	e034      	b.n	80069bc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006968:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006970:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006978:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	461a      	mov	r2, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	3301      	adds	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006998:	d80c      	bhi.n	80069b4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b0:	d0ec      	beq.n	800698c <USB_StopHost+0xb0>
 80069b2:	e000      	b.n	80069b6 <USB_StopHost+0xda>
        break;
 80069b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b0f      	cmp	r3, #15
 80069c0:	d9c7      	bls.n	8006952 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c8:	461a      	mov	r2, r3
 80069ca:	f04f 33ff 	mov.w	r3, #4294967295
 80069ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff f8af 	bl	8005b3c <USB_EnableGlobalInt>

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3718      	adds	r7, #24
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80069e8:	b590      	push	{r4, r7, lr}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80069f0:	2301      	movs	r3, #1
 80069f2:	2202      	movs	r2, #2
 80069f4:	2102      	movs	r1, #2
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fc66 	bl	80072c8 <USBH_FindInterface>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2bff      	cmp	r3, #255	; 0xff
 8006a04:	d002      	beq.n	8006a0c <USBH_CDC_InterfaceInit+0x24>
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d901      	bls.n	8006a10 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e13d      	b.n	8006c8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc3b 	bl	8007290 <USBH_SelectInterface>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a24:	2302      	movs	r3, #2
 8006a26:	e131      	b.n	8006c8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a2e:	2050      	movs	r0, #80	; 0x50
 8006a30:	f002 fa00 	bl	8008e34 <malloc>
 8006a34:	4603      	mov	r3, r0
 8006a36:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e11f      	b.n	8006c8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a4c:	2250      	movs	r2, #80	; 0x50
 8006a4e:	2100      	movs	r1, #0
 8006a50:	68b8      	ldr	r0, [r7, #8]
 8006a52:	f002 f9ff 	bl	8008e54 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	211a      	movs	r1, #26
 8006a5c:	fb01 f303 	mul.w	r3, r1, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	da15      	bge.n	8006a9a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	211a      	movs	r1, #26
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	211a      	movs	r1, #26
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a94:	881a      	ldrh	r2, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 fe32 	bl	800870a <USBH_AllocPipe>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7819      	ldrb	r1, [r3, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	7858      	ldrb	r0, [r3, #1]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	8952      	ldrh	r2, [r2, #10]
 8006ac6:	9202      	str	r2, [sp, #8]
 8006ac8:	2203      	movs	r2, #3
 8006aca:	9201      	str	r2, [sp, #4]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4623      	mov	r3, r4
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fdea 	bl	80086ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 f8f9 	bl	8008cd8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2200      	movs	r2, #0
 8006aea:	210a      	movs	r1, #10
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fbeb 	bl	80072c8 <USBH_FindInterface>
 8006af2:	4603      	mov	r3, r0
 8006af4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
 8006af8:	2bff      	cmp	r3, #255	; 0xff
 8006afa:	d002      	beq.n	8006b02 <USBH_CDC_InterfaceInit+0x11a>
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d901      	bls.n	8006b06 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0c2      	b.n	8006c8c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	211a      	movs	r1, #26
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	da16      	bge.n	8006b4c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	211a      	movs	r1, #26
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b2e:	781a      	ldrb	r2, [r3, #0]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	211a      	movs	r1, #26
 8006b3a:	fb01 f303 	mul.w	r3, r1, r3
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b44:	881a      	ldrh	r2, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	835a      	strh	r2, [r3, #26]
 8006b4a:	e015      	b.n	8006b78 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	211a      	movs	r1, #26
 8006b52:	fb01 f303 	mul.w	r3, r1, r3
 8006b56:	4413      	add	r3, r2
 8006b58:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b5c:	781a      	ldrb	r2, [r3, #0]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	211a      	movs	r1, #26
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	211a      	movs	r1, #26
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	da16      	bge.n	8006bbe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	211a      	movs	r1, #26
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ba0:	781a      	ldrb	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	211a      	movs	r1, #26
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bb6:	881a      	ldrh	r2, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	835a      	strh	r2, [r3, #26]
 8006bbc:	e015      	b.n	8006bea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	211a      	movs	r1, #26
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	4413      	add	r3, r2
 8006bca:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bce:	781a      	ldrb	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	211a      	movs	r1, #26
 8006bda:	fb01 f303 	mul.w	r3, r1, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006be4:	881a      	ldrh	r2, [r3, #0]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	7b9b      	ldrb	r3, [r3, #14]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fd8a 	bl	800870a <USBH_AllocPipe>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	7bdb      	ldrb	r3, [r3, #15]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fd80 	bl	800870a <USBH_AllocPipe>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7b59      	ldrb	r1, [r3, #13]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7b98      	ldrb	r0, [r3, #14]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	8b12      	ldrh	r2, [r2, #24]
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4623      	mov	r3, r4
 8006c34:	4602      	mov	r2, r0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fd38 	bl	80086ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	7b19      	ldrb	r1, [r3, #12]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	7bd8      	ldrb	r0, [r3, #15]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	8b52      	ldrh	r2, [r2, #26]
 8006c54:	9202      	str	r2, [sp, #8]
 8006c56:	2202      	movs	r2, #2
 8006c58:	9201      	str	r2, [sp, #4]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	4602      	mov	r2, r0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fd23 	bl	80086ac <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	7b5b      	ldrb	r3, [r3, #13]
 8006c72:	2200      	movs	r2, #0
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f002 f82e 	bl	8008cd8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	7b1b      	ldrb	r3, [r3, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f002 f827 	bl	8008cd8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd90      	pop	{r4, r7, pc}

08006c94 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00e      	beq.n	8006ccc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fd18 	bl	80086ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fd43 	bl	800874c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	7b1b      	ldrb	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00e      	beq.n	8006cf2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	7b1b      	ldrb	r3, [r3, #12]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fd05 	bl	80086ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	7b1b      	ldrb	r3, [r3, #12]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fd30 	bl	800874c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	7b5b      	ldrb	r3, [r3, #13]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00e      	beq.n	8006d18 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	7b5b      	ldrb	r3, [r3, #13]
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fcf2 	bl	80086ea <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	7b5b      	ldrb	r3, [r3, #13]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f001 fd1d 	bl	800874c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 f889 	bl	8008e44 <free>
    phost->pActiveClass->pData = 0U;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d38:	2200      	movs	r2, #0
 8006d3a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3340      	adds	r3, #64	; 0x40
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f8b1 	bl	8006ec6 <GetLineCoding>
 8006d64:	4603      	mov	r3, r0
 8006d66:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d105      	bne.n	8006d7a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d74:	2102      	movs	r1, #2
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d877      	bhi.n	8006e98 <USBH_CDC_Process+0x114>
 8006da8:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <USBH_CDC_Process+0x2c>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dc5 	.word	0x08006dc5
 8006db4:	08006dcb 	.word	0x08006dcb
 8006db8:	08006dfb 	.word	0x08006dfb
 8006dbc:	08006e6f 	.word	0x08006e6f
 8006dc0:	08006e7d 	.word	0x08006e7d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e06d      	b.n	8006ea6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f897 	bl	8006f04 <SetLineCoding>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006de8:	e058      	b.n	8006e9c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d055      	beq.n	8006e9c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2204      	movs	r2, #4
 8006df4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006df8:	e050      	b.n	8006e9c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	3340      	adds	r3, #64	; 0x40
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f860 	bl	8006ec6 <GetLineCoding>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d126      	bne.n	8006e5e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e22:	791b      	ldrb	r3, [r3, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d13b      	bne.n	8006ea0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e32:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d133      	bne.n	8006ea0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e42:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d12b      	bne.n	8006ea0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d124      	bne.n	8006ea0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f958 	bl	800710c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e5c:	e020      	b.n	8006ea0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d01d      	beq.n	8006ea0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2204      	movs	r2, #4
 8006e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e6c:	e018      	b.n	8006ea0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f867 	bl	8006f42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f8da 	bl	800702e <CDC_ProcessReception>
      break;
 8006e7a:	e014      	b.n	8006ea6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 ffe3 	bl	8007e4a <USBH_ClrFeature>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006e96:	e005      	b.n	8006ea4 <USBH_CDC_Process+0x120>

    default:
      break;
 8006e98:	bf00      	nop
 8006e9a:	e004      	b.n	8006ea6 <USBH_CDC_Process+0x122>
      break;
 8006e9c:	bf00      	nop
 8006e9e:	e002      	b.n	8006ea6 <USBH_CDC_Process+0x122>
      break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <USBH_CDC_Process+0x122>
      break;
 8006ea4:	bf00      	nop

  }

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22a1      	movs	r2, #161	; 0xa1
 8006ed4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2221      	movs	r2, #33	; 0x21
 8006eda:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2207      	movs	r2, #7
 8006eec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 f988 	bl	800820a <USBH_CtlReq>
 8006efa:	4603      	mov	r3, r0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2221      	movs	r2, #33	; 0x21
 8006f12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2207      	movs	r2, #7
 8006f2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	2207      	movs	r2, #7
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f969 	bl	800820a <USBH_CtlReq>
 8006f38:	4603      	mov	r3, r0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af02      	add	r7, sp, #8
 8006f48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d002      	beq.n	8006f68 <CDC_ProcessTransmission+0x26>
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d023      	beq.n	8006fae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f66:	e05e      	b.n	8007026 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	8b12      	ldrh	r2, [r2, #24]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d90b      	bls.n	8006f8c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	69d9      	ldr	r1, [r3, #28]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8b1a      	ldrh	r2, [r3, #24]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	7b5b      	ldrb	r3, [r3, #13]
 8006f80:	2001      	movs	r0, #1
 8006f82:	9000      	str	r0, [sp, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 fb4e 	bl	8008626 <USBH_BulkSendData>
 8006f8a:	e00b      	b.n	8006fa4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	7b5b      	ldrb	r3, [r3, #13]
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	9000      	str	r0, [sp, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fb41 	bl	8008626 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fac:	e03b      	b.n	8007026 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	7b5b      	ldrb	r3, [r3, #13]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fe65 	bl	8008c84 <USBH_LL_GetURBState>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d128      	bne.n	8007016 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	8b12      	ldrh	r2, [r2, #24]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d90e      	bls.n	8006fee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	8b12      	ldrh	r2, [r2, #24]
 8006fd8:	1a9a      	subs	r2, r3, r2
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	8b12      	ldrh	r2, [r2, #24]
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	61da      	str	r2, [r3, #28]
 8006fec:	e002      	b.n	8006ff4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007004:	e00e      	b.n	8007024 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f868 	bl	80070e4 <USBH_CDC_TransmitCallback>
      break;
 8007014:	e006      	b.n	8007024 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007016:	7afb      	ldrb	r3, [r7, #11]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d103      	bne.n	8007024 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007024:	bf00      	nop
  }
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007040:	2300      	movs	r3, #0
 8007042:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800704a:	2b03      	cmp	r3, #3
 800704c:	d002      	beq.n	8007054 <CDC_ProcessReception+0x26>
 800704e:	2b04      	cmp	r3, #4
 8007050:	d00e      	beq.n	8007070 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007052:	e043      	b.n	80070dc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6a19      	ldr	r1, [r3, #32]
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	8b5a      	ldrh	r2, [r3, #26]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	7b1b      	ldrb	r3, [r3, #12]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fb05 	bl	8008670 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2204      	movs	r2, #4
 800706a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800706e:	e035      	b.n	80070dc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	7b1b      	ldrb	r3, [r3, #12]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 fe04 	bl	8008c84 <USBH_LL_GetURBState>
 800707c:	4603      	mov	r3, r0
 800707e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d129      	bne.n	80070da <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	7b1b      	ldrb	r3, [r3, #12]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fd67 	bl	8008b60 <USBH_LL_GetLastXferSize>
 8007092:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	429a      	cmp	r2, r3
 800709c:	d016      	beq.n	80070cc <CDC_ProcessReception+0x9e>
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	8b5b      	ldrh	r3, [r3, #26]
 80070a2:	461a      	mov	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d910      	bls.n	80070cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad2      	subs	r2, r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6a1a      	ldr	r2, [r3, #32]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	441a      	add	r2, r3
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2203      	movs	r2, #3
 80070c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070ca:	e006      	b.n	80070da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f80f 	bl	80070f8 <USBH_CDC_ReceiveCallback>
      break;
 80070da:	bf00      	nop
  }
}
 80070dc:	bf00      	nop
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007134:	2302      	movs	r3, #2
 8007136:	e029      	b.n	800718c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	79fa      	ldrb	r2, [r7, #7]
 800713c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f81f 	bl	8007194 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 fc37 	bl	80089f8 <USBH_LL_Init>

  return USBH_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e009      	b.n	80071ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	33e0      	adds	r3, #224	; 0xe0
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	2200      	movs	r2, #0
 80071b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b0e      	cmp	r3, #14
 80071be:	d9f2      	bls.n	80071a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e009      	b.n	80071da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071e0:	d3f1      	bcc.n	80071c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2240      	movs	r2, #64	; 0x40
 8007206:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007246:	2300      	movs	r3, #0
 8007248:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d016      	beq.n	800727e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10e      	bne.n	8007278 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007260:	1c59      	adds	r1, r3, #1
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	33de      	adds	r3, #222	; 0xde
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	73fb      	strb	r3, [r7, #15]
 8007276:	e004      	b.n	8007282 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007278:	2302      	movs	r3, #2
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e001      	b.n	8007282 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80072a6:	78fa      	ldrb	r2, [r7, #3]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d204      	bcs.n	80072b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80072b4:	e001      	b.n	80072ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80072b6:	2302      	movs	r3, #2
 80072b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	461a      	mov	r2, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	70fb      	strb	r3, [r7, #3]
 80072da:	460b      	mov	r3, r1
 80072dc:	70bb      	strb	r3, [r7, #2]
 80072de:	4613      	mov	r3, r2
 80072e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80072f2:	e025      	b.n	8007340 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80072f4:	7dfb      	ldrb	r3, [r7, #23]
 80072f6:	221a      	movs	r2, #26
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	3308      	adds	r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	3302      	adds	r3, #2
 8007304:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	795b      	ldrb	r3, [r3, #5]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	429a      	cmp	r2, r3
 800730e:	d002      	beq.n	8007316 <USBH_FindInterface+0x4e>
 8007310:	78fb      	ldrb	r3, [r7, #3]
 8007312:	2bff      	cmp	r3, #255	; 0xff
 8007314:	d111      	bne.n	800733a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800731a:	78ba      	ldrb	r2, [r7, #2]
 800731c:	429a      	cmp	r2, r3
 800731e:	d002      	beq.n	8007326 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007320:	78bb      	ldrb	r3, [r7, #2]
 8007322:	2bff      	cmp	r3, #255	; 0xff
 8007324:	d109      	bne.n	800733a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800732a:	787a      	ldrb	r2, [r7, #1]
 800732c:	429a      	cmp	r2, r3
 800732e:	d002      	beq.n	8007336 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007330:	787b      	ldrb	r3, [r7, #1]
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	d101      	bne.n	800733a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007336:	7dfb      	ldrb	r3, [r7, #23]
 8007338:	e006      	b.n	8007348 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	3301      	adds	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d9d6      	bls.n	80072f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007346:	23ff      	movs	r3, #255	; 0xff
}
 8007348:	4618      	mov	r0, r3
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 fb87 	bl	8008a70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007362:	2101      	movs	r1, #1
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fca0 	bl	8008caa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af04      	add	r7, sp, #16
 800737a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800737c:	2302      	movs	r3, #2
 800737e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	d102      	bne.n	8007396 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b0b      	cmp	r3, #11
 800739e:	f200 81b3 	bhi.w	8007708 <USBH_Process+0x394>
 80073a2:	a201      	add	r2, pc, #4	; (adr r2, 80073a8 <USBH_Process+0x34>)
 80073a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a8:	080073d9 	.word	0x080073d9
 80073ac:	0800740b 	.word	0x0800740b
 80073b0:	08007473 	.word	0x08007473
 80073b4:	080076a3 	.word	0x080076a3
 80073b8:	08007709 	.word	0x08007709
 80073bc:	08007517 	.word	0x08007517
 80073c0:	08007649 	.word	0x08007649
 80073c4:	0800754d 	.word	0x0800754d
 80073c8:	0800756d 	.word	0x0800756d
 80073cc:	0800758d 	.word	0x0800758d
 80073d0:	080075bb 	.word	0x080075bb
 80073d4:	0800768b 	.word	0x0800768b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8193 	beq.w	800770c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80073ec:	20c8      	movs	r0, #200	; 0xc8
 80073ee:	f001 fca3 	bl	8008d38 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fb99 	bl	8008b2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007408:	e180      	b.n	800770c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007422:	e182      	b.n	800772a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800742a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742e:	d914      	bls.n	800745a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007436:	3301      	adds	r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007446:	2b03      	cmp	r3, #3
 8007448:	d903      	bls.n	8007452 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	220d      	movs	r2, #13
 800744e:	701a      	strb	r2, [r3, #0]
      break;
 8007450:	e16b      	b.n	800772a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	701a      	strb	r2, [r3, #0]
      break;
 8007458:	e167      	b.n	800772a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007460:	f103 020a 	add.w	r2, r3, #10
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800746a:	200a      	movs	r0, #10
 800746c:	f001 fc64 	bl	8008d38 <USBH_Delay>
      break;
 8007470:	e15b      	b.n	800772a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007482:	2104      	movs	r1, #4
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007488:	2064      	movs	r0, #100	; 0x64
 800748a:	f001 fc55 	bl	8008d38 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fb24 	bl	8008adc <USBH_LL_GetSpeed>
 8007494:	4603      	mov	r3, r0
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2205      	movs	r2, #5
 80074a2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f92f 	bl	800870a <USBH_AllocPipe>
 80074ac:	4603      	mov	r3, r0
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 f927 	bl	800870a <USBH_AllocPipe>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7919      	ldrb	r1, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074d8:	b292      	uxth	r2, r2
 80074da:	9202      	str	r2, [sp, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	9201      	str	r2, [sp, #4]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	4603      	mov	r3, r0
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 f8e0 	bl	80086ac <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	7959      	ldrb	r1, [r3, #5]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007500:	b292      	uxth	r2, r2
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	9201      	str	r2, [sp, #4]
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4603      	mov	r3, r0
 800750c:	2200      	movs	r2, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 f8cc 	bl	80086ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007514:	e109      	b.n	800772a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f90c 	bl	8007734 <USBH_HandleEnum>
 800751c:	4603      	mov	r3, r0
 800751e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 80f3 	bne.w	8007710 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007538:	2b01      	cmp	r3, #1
 800753a:	d103      	bne.n	8007544 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2208      	movs	r2, #8
 8007540:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007542:	e0e5      	b.n	8007710 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2207      	movs	r2, #7
 8007548:	701a      	strb	r2, [r3, #0]
      break;
 800754a:	e0e1      	b.n	8007710 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 80de 	beq.w	8007714 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2208      	movs	r2, #8
 8007568:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800756a:	e0d3      	b.n	8007714 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007572:	b29b      	uxth	r3, r3
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fc20 	bl	8007dbc <USBH_SetCfg>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 80ca 	bne.w	8007718 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2209      	movs	r2, #9
 8007588:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800758a:	e0c5      	b.n	8007718 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007592:	f003 0320 	and.w	r3, r3, #32
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800759a:	2101      	movs	r1, #1
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fc30 	bl	8007e02 <USBH_SetFeature>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 80b9 	bne.w	800771c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220a      	movs	r2, #10
 80075ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075b0:	e0b4      	b.n	800771c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	220a      	movs	r2, #10
 80075b6:	701a      	strb	r2, [r3, #0]
      break;
 80075b8:	e0b0      	b.n	800771c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80ad 	beq.w	8007720 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	73fb      	strb	r3, [r7, #15]
 80075d2:	e016      	b.n	8007602 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075d4:	7bfa      	ldrb	r2, [r7, #15]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	32de      	adds	r2, #222	; 0xde
 80075da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075de:	791a      	ldrb	r2, [r3, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d108      	bne.n	80075fc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80075ea:	7bfa      	ldrb	r2, [r7, #15]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32de      	adds	r2, #222	; 0xde
 80075f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80075fa:	e005      	b.n	8007608 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	3301      	adds	r3, #1
 8007600:	73fb      	strb	r3, [r7, #15]
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0e5      	beq.n	80075d4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d016      	beq.n	8007640 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2206      	movs	r2, #6
 8007628:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007630:	2103      	movs	r1, #3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007636:	e073      	b.n	8007720 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	220d      	movs	r2, #13
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e06f      	b.n	8007720 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	220d      	movs	r2, #13
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e06b      	b.n	8007720 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800764e:	2b00      	cmp	r3, #0
 8007650:	d017      	beq.n	8007682 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
 800765e:	4603      	mov	r3, r0
 8007660:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220b      	movs	r2, #11
 800766e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007670:	e058      	b.n	8007724 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d154      	bne.n	8007724 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220d      	movs	r2, #13
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e050      	b.n	8007724 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	220d      	movs	r2, #13
 8007686:	701a      	strb	r2, [r3, #0]
      break;
 8007688:	e04c      	b.n	8007724 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d049      	beq.n	8007728 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
      }
      break;
 80076a0:	e042      	b.n	8007728 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fd72 	bl	8007194 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d009      	beq.n	80076ce <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076de:	2105      	movs	r1, #5
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe2b 	bl	8007354 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076fe:	e014      	b.n	800772a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 f9b5 	bl	8008a70 <USBH_LL_Start>
      break;
 8007706:	e010      	b.n	800772a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007708:	bf00      	nop
 800770a:	e00e      	b.n	800772a <USBH_Process+0x3b6>
      break;
 800770c:	bf00      	nop
 800770e:	e00c      	b.n	800772a <USBH_Process+0x3b6>
      break;
 8007710:	bf00      	nop
 8007712:	e00a      	b.n	800772a <USBH_Process+0x3b6>
    break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBH_Process+0x3b6>
      break;
 8007718:	bf00      	nop
 800771a:	e006      	b.n	800772a <USBH_Process+0x3b6>
      break;
 800771c:	bf00      	nop
 800771e:	e004      	b.n	800772a <USBH_Process+0x3b6>
      break;
 8007720:	bf00      	nop
 8007722:	e002      	b.n	800772a <USBH_Process+0x3b6>
      break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <USBH_Process+0x3b6>
      break;
 8007728:	bf00      	nop
  }
  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af04      	add	r7, sp, #16
 800773a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007740:	2301      	movs	r3, #1
 8007742:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b07      	cmp	r3, #7
 800774a:	f200 81c1 	bhi.w	8007ad0 <USBH_HandleEnum+0x39c>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBH_HandleEnum+0x20>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	08007775 	.word	0x08007775
 8007758:	08007833 	.word	0x08007833
 800775c:	0800789d 	.word	0x0800789d
 8007760:	0800792b 	.word	0x0800792b
 8007764:	08007995 	.word	0x08007995
 8007768:	08007a05 	.word	0x08007a05
 800776c:	08007a4b 	.word	0x08007a4b
 8007770:	08007a91 	.word	0x08007a91
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007774:	2108      	movs	r1, #8
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fa50 	bl	8007c1c <USBH_Get_DevDesc>
 800777c:	4603      	mov	r3, r0
 800777e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007780:	7bbb      	ldrb	r3, [r7, #14]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d130      	bne.n	80077e8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7919      	ldrb	r1, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077aa:	b292      	uxth	r2, r2
 80077ac:	9202      	str	r2, [sp, #8]
 80077ae:	2200      	movs	r2, #0
 80077b0:	9201      	str	r2, [sp, #4]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4603      	mov	r3, r0
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 ff77 	bl	80086ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7959      	ldrb	r1, [r3, #5]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077d2:	b292      	uxth	r2, r2
 80077d4:	9202      	str	r2, [sp, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	9201      	str	r2, [sp, #4]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	4603      	mov	r3, r0
 80077de:	2200      	movs	r2, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 ff63 	bl	80086ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077e6:	e175      	b.n	8007ad4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	f040 8172 	bne.w	8007ad4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f6:	3301      	adds	r3, #1
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007806:	2b03      	cmp	r3, #3
 8007808:	d903      	bls.n	8007812 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220d      	movs	r2, #13
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e160      	b.n	8007ad4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	795b      	ldrb	r3, [r3, #5]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ff97 	bl	800874c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 ff91 	bl	800874c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
      break;
 8007830:	e150      	b.n	8007ad4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007832:	2112      	movs	r1, #18
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9f1 	bl	8007c1c <USBH_Get_DevDesc>
 800783a:	4603      	mov	r3, r0
 800783c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d103      	bne.n	800784c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800784a:	e145      	b.n	8007ad8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b03      	cmp	r3, #3
 8007850:	f040 8142 	bne.w	8007ad8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800785a:	3301      	adds	r3, #1
 800785c:	b2da      	uxtb	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786a:	2b03      	cmp	r3, #3
 800786c:	d903      	bls.n	8007876 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	220d      	movs	r2, #13
 8007872:	701a      	strb	r2, [r3, #0]
      break;
 8007874:	e130      	b.n	8007ad8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	795b      	ldrb	r3, [r3, #5]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 ff65 	bl	800874c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 ff5f 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e11d      	b.n	8007ad8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800789c:	2101      	movs	r1, #1
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa68 	bl	8007d74 <USBH_SetAddress>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d132      	bne.n	8007914 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80078ae:	2002      	movs	r0, #2
 80078b0:	f001 fa42 	bl	8008d38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7919      	ldrb	r1, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078d6:	b292      	uxth	r2, r2
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	2280      	movs	r2, #128	; 0x80
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fee1 	bl	80086ac <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	7959      	ldrb	r1, [r3, #5]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078fe:	b292      	uxth	r2, r2
 8007900:	9202      	str	r2, [sp, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	9201      	str	r2, [sp, #4]
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4603      	mov	r3, r0
 800790a:	2200      	movs	r2, #0
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fecd 	bl	80086ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007912:	e0e3      	b.n	8007adc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	2b03      	cmp	r3, #3
 8007918:	f040 80e0 	bne.w	8007adc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220d      	movs	r2, #13
 8007920:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	705a      	strb	r2, [r3, #1]
      break;
 8007928:	e0d8      	b.n	8007adc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800792a:	2109      	movs	r1, #9
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f99d 	bl	8007c6c <USBH_Get_CfgDesc>
 8007932:	4603      	mov	r3, r0
 8007934:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2204      	movs	r2, #4
 8007940:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007942:	e0cd      	b.n	8007ae0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b03      	cmp	r3, #3
 8007948:	f040 80ca 	bne.w	8007ae0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007952:	3301      	adds	r3, #1
 8007954:	b2da      	uxtb	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007962:	2b03      	cmp	r3, #3
 8007964:	d903      	bls.n	800796e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220d      	movs	r2, #13
 800796a:	701a      	strb	r2, [r3, #0]
      break;
 800796c:	e0b8      	b.n	8007ae0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	795b      	ldrb	r3, [r3, #5]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fee9 	bl	800874c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fee3 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
      break;
 8007992:	e0a5      	b.n	8007ae0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f965 	bl	8007c6c <USBH_Get_CfgDesc>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d103      	bne.n	80079b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2205      	movs	r2, #5
 80079b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079b2:	e097      	b.n	8007ae4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	f040 8094 	bne.w	8007ae4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079c2:	3301      	adds	r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d903      	bls.n	80079de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	220d      	movs	r2, #13
 80079da:	701a      	strb	r2, [r3, #0]
      break;
 80079dc:	e082      	b.n	8007ae4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 feb1 	bl	800874c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	791b      	ldrb	r3, [r3, #4]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 feab 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
      break;
 8007a02:	e06f      	b.n	8007ae4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d019      	beq.n	8007a42 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a1a:	23ff      	movs	r3, #255	; 0xff
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f949 	bl	8007cb4 <USBH_Get_StringDesc>
 8007a22:	4603      	mov	r3, r0
 8007a24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d103      	bne.n	8007a34 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2206      	movs	r2, #6
 8007a30:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a32:	e059      	b.n	8007ae8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d156      	bne.n	8007ae8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2206      	movs	r2, #6
 8007a3e:	705a      	strb	r2, [r3, #1]
      break;
 8007a40:	e052      	b.n	8007ae8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2206      	movs	r2, #6
 8007a46:	705a      	strb	r2, [r3, #1]
      break;
 8007a48:	e04e      	b.n	8007ae8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d019      	beq.n	8007a88 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a60:	23ff      	movs	r3, #255	; 0xff
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f926 	bl	8007cb4 <USBH_Get_StringDesc>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d103      	bne.n	8007a7a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2207      	movs	r2, #7
 8007a76:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a78:	e038      	b.n	8007aec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d135      	bne.n	8007aec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2207      	movs	r2, #7
 8007a84:	705a      	strb	r2, [r3, #1]
      break;
 8007a86:	e031      	b.n	8007aec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	705a      	strb	r2, [r3, #1]
      break;
 8007a8e:	e02d      	b.n	8007aec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d017      	beq.n	8007aca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007aa6:	23ff      	movs	r3, #255	; 0xff
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f903 	bl	8007cb4 <USBH_Get_StringDesc>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007abc:	e018      	b.n	8007af0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d115      	bne.n	8007af0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac8:	e012      	b.n	8007af0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ace:	e00f      	b.n	8007af0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e00e      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e00c      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007ad8:	bf00      	nop
 8007ada:	e00a      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007adc:	bf00      	nop
 8007ade:	e008      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007ae0:	bf00      	nop
 8007ae2:	e006      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e004      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e002      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007aec:	bf00      	nop
 8007aee:	e000      	b.n	8007af2 <USBH_HandleEnum+0x3be>
      break;
 8007af0:	bf00      	nop
  }
  return Status;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f804 	bl	8007b3e <USBH_HandleSof>
}
 8007b36:	bf00      	nop
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b0b      	cmp	r3, #11
 8007b4e:	d10a      	bne.n	8007b66 <USBH_HandleSof+0x28>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d005      	beq.n	8007b66 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	4798      	blx	r3
  }
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007b7e:	bf00      	nop
}
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b9a:	bf00      	nop
}
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 ff56 	bl	8008aa6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	791b      	ldrb	r3, [r3, #4]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fda3 	bl	800874c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	795b      	ldrb	r3, [r3, #5]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fd9d 	bl	800874c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f864 	bl	8007d0a <USBH_GetDescriptor>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c58:	78fa      	ldrb	r2, [r7, #3]
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f000 f918 	bl	8007e92 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	331c      	adds	r3, #28
 8007c7c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007c7e:	887b      	ldrh	r3, [r7, #2]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c88:	2100      	movs	r1, #0
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f83d 	bl	8007d0a <USBH_GetDescriptor>
 8007c90:	4603      	mov	r3, r0
 8007c92:	72fb      	strb	r3, [r7, #11]
 8007c94:	7afb      	ldrb	r3, [r7, #11]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d107      	bne.n	8007caa <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ca0:	887a      	ldrh	r2, [r7, #2]
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 f964 	bl	8007f72 <USBH_ParseCfgDesc>
  }

  return status;
 8007caa:	7afb      	ldrb	r3, [r7, #11]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	607a      	str	r2, [r7, #4]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	72fb      	strb	r3, [r7, #11]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007cc8:	7afb      	ldrb	r3, [r7, #11]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007cd0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007cd8:	893b      	ldrh	r3, [r7, #8]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	2100      	movs	r1, #0
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f812 	bl	8007d0a <USBH_GetDescriptor>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75fb      	strb	r3, [r7, #23]
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d107      	bne.n	8007d00 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cf6:	893a      	ldrh	r2, [r7, #8]
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fa37 	bl	800816e <USBH_ParseStringDesc>
  }

  return status;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	72fb      	strb	r3, [r7, #11]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	789b      	ldrb	r3, [r3, #2]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d11c      	bne.n	8007d5e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2206      	movs	r2, #6
 8007d34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	893a      	ldrh	r2, [r7, #8]
 8007d3a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d3c:	893b      	ldrh	r3, [r7, #8]
 8007d3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d46:	d104      	bne.n	8007d52 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f240 4209 	movw	r2, #1033	; 0x409
 8007d4e:	829a      	strh	r2, [r3, #20]
 8007d50:	e002      	b.n	8007d58 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8b3a      	ldrh	r2, [r7, #24]
 8007d5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d5e:	8b3b      	ldrh	r3, [r7, #24]
 8007d60:	461a      	mov	r2, r3
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 fa50 	bl	800820a <USBH_CtlReq>
 8007d6a:	4603      	mov	r3, r0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	789b      	ldrb	r3, [r3, #2]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d10f      	bne.n	8007da8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2205      	movs	r2, #5
 8007d92:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa2c 	bl	800820a <USBH_CtlReq>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	789b      	ldrb	r3, [r3, #2]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d10e      	bne.n	8007dee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2209      	movs	r2, #9
 8007dda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	887a      	ldrh	r2, [r7, #2]
 8007de0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fa09 	bl	800820a <USBH_CtlReq>
 8007df8:	4603      	mov	r3, r0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	789b      	ldrb	r3, [r3, #2]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d10f      	bne.n	8007e36 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e36:	2200      	movs	r2, #0
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f9e5 	bl	800820a <USBH_CtlReq>
 8007e40:	4603      	mov	r3, r0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	789b      	ldrb	r3, [r3, #2]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10f      	bne.n	8007e7e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f9c1 	bl	800820a <USBH_CtlReq>
 8007e88:	4603      	mov	r3, r0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	785a      	ldrb	r2, [r3, #1]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	3303      	adds	r3, #3
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	021b      	lsls	r3, r3, #8
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	791a      	ldrb	r2, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	795a      	ldrb	r2, [r3, #5]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	799a      	ldrb	r2, [r3, #6]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	79da      	ldrb	r2, [r3, #7]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d939      	bls.n	8007f66 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	3308      	adds	r3, #8
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3309      	adds	r3, #9
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	330a      	adds	r3, #10
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	330b      	adds	r3, #11
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	4313      	orrs	r3, r2
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	330d      	adds	r3, #13
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7b9a      	ldrb	r2, [r3, #14]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	7bda      	ldrb	r2, [r3, #15]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	7c1a      	ldrb	r2, [r3, #16]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	7c5a      	ldrb	r2, [r3, #17]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	745a      	strb	r2, [r3, #17]
  }
}
 8007f66:	bf00      	nop
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b08a      	sub	sp, #40	; 0x28
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	60f8      	str	r0, [r7, #12]
 8007f7a:	60b9      	str	r1, [r7, #8]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	781a      	ldrb	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	785a      	ldrb	r2, [r3, #1]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	3303      	adds	r3, #3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	021b      	lsls	r3, r3, #8
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	791a      	ldrb	r2, [r3, #4]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	795a      	ldrb	r2, [r3, #5]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	799a      	ldrb	r2, [r3, #6]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	79da      	ldrb	r2, [r3, #7]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	7a1a      	ldrb	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	2b09      	cmp	r3, #9
 8007fec:	d95f      	bls.n	80080ae <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007fee:	2309      	movs	r3, #9
 8007ff0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ff6:	e051      	b.n	800809c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ff8:	f107 0316 	add.w	r3, r7, #22
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008000:	f000 f8e8 	bl	80081d4 <USBH_GetNextDesc>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b04      	cmp	r3, #4
 800800c:	d146      	bne.n	800809c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800800e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008012:	221a      	movs	r2, #26
 8008014:	fb02 f303 	mul.w	r3, r2, r3
 8008018:	3308      	adds	r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	3302      	adds	r3, #2
 8008020:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008024:	69f8      	ldr	r0, [r7, #28]
 8008026:	f000 f846 	bl	80080b6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008034:	e022      	b.n	800807c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008036:	f107 0316 	add.w	r3, r7, #22
 800803a:	4619      	mov	r1, r3
 800803c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800803e:	f000 f8c9 	bl	80081d4 <USBH_GetNextDesc>
 8008042:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b05      	cmp	r3, #5
 800804a:	d117      	bne.n	800807c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800804c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008050:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008054:	3201      	adds	r2, #1
 8008056:	00d2      	lsls	r2, r2, #3
 8008058:	211a      	movs	r1, #26
 800805a:	fb01 f303 	mul.w	r3, r1, r3
 800805e:	4413      	add	r3, r2
 8008060:	3308      	adds	r3, #8
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	3304      	adds	r3, #4
 8008068:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800806a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800806c:	69b8      	ldr	r0, [r7, #24]
 800806e:	f000 f851 	bl	8008114 <USBH_ParseEPDesc>
            ep_ix++;
 8008072:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008076:	3301      	adds	r3, #1
 8008078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008084:	429a      	cmp	r2, r3
 8008086:	d204      	bcs.n	8008092 <USBH_ParseCfgDesc+0x120>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	885a      	ldrh	r2, [r3, #2]
 800808c:	8afb      	ldrh	r3, [r7, #22]
 800808e:	429a      	cmp	r2, r3
 8008090:	d8d1      	bhi.n	8008036 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008096:	3301      	adds	r3, #1
 8008098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800809c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d804      	bhi.n	80080ae <USBH_ParseCfgDesc+0x13c>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	885a      	ldrh	r2, [r3, #2]
 80080a8:	8afb      	ldrh	r3, [r7, #22]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d8a4      	bhi.n	8007ff8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80080ae:	bf00      	nop
 80080b0:	3728      	adds	r7, #40	; 0x28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781a      	ldrb	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	785a      	ldrb	r2, [r3, #1]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	789a      	ldrb	r2, [r3, #2]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	78da      	ldrb	r2, [r3, #3]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	791a      	ldrb	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	795a      	ldrb	r2, [r3, #5]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	799a      	ldrb	r2, [r3, #6]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	79da      	ldrb	r2, [r3, #7]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	7a1a      	ldrb	r2, [r3, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	721a      	strb	r2, [r3, #8]
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785a      	ldrb	r2, [r3, #1]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	789a      	ldrb	r2, [r3, #2]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	78da      	ldrb	r2, [r3, #3]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	3304      	adds	r3, #4
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	b29a      	uxth	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	3305      	adds	r3, #5
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	b29b      	uxth	r3, r3
 8008152:	4313      	orrs	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	799a      	ldrb	r2, [r3, #6]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	719a      	strb	r2, [r3, #6]
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800816e:	b480      	push	{r7}
 8008170:	b087      	sub	sp, #28
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	4613      	mov	r3, r2
 800817a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b03      	cmp	r3, #3
 8008184:	d120      	bne.n	80081c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	1e9a      	subs	r2, r3, #2
 800818c:	88fb      	ldrh	r3, [r7, #6]
 800818e:	4293      	cmp	r3, r2
 8008190:	bf28      	it	cs
 8008192:	4613      	movcs	r3, r2
 8008194:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3302      	adds	r3, #2
 800819a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800819c:	2300      	movs	r3, #0
 800819e:	82fb      	strh	r3, [r7, #22]
 80081a0:	e00b      	b.n	80081ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081a2:	8afb      	ldrh	r3, [r7, #22]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3301      	adds	r3, #1
 80081b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081b4:	8afb      	ldrh	r3, [r7, #22]
 80081b6:	3302      	adds	r3, #2
 80081b8:	82fb      	strh	r3, [r7, #22]
 80081ba:	8afa      	ldrh	r2, [r7, #22]
 80081bc:	8abb      	ldrh	r3, [r7, #20]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d3ef      	bcc.n	80081a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
  }
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	881a      	ldrh	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4413      	add	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081fc:	68fb      	ldr	r3, [r7, #12]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b086      	sub	sp, #24
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	4613      	mov	r3, r2
 8008216:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	789b      	ldrb	r3, [r3, #2]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d002      	beq.n	800822a <USBH_CtlReq+0x20>
 8008224:	2b02      	cmp	r3, #2
 8008226:	d00f      	beq.n	8008248 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008228:	e027      	b.n	800827a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2202      	movs	r2, #2
 8008240:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008242:	2301      	movs	r3, #1
 8008244:	75fb      	strb	r3, [r7, #23]
      break;
 8008246:	e018      	b.n	800827a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f81b 	bl	8008284 <USBH_HandleControl>
 800824e:	4603      	mov	r3, r0
 8008250:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <USBH_CtlReq+0x54>
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	2b03      	cmp	r3, #3
 800825c:	d106      	bne.n	800826c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	761a      	strb	r2, [r3, #24]
      break;
 800826a:	e005      	b.n	8008278 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b02      	cmp	r3, #2
 8008270:	d102      	bne.n	8008278 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	709a      	strb	r2, [r3, #2]
      break;
 8008278:	bf00      	nop
  }
  return status;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008290:	2300      	movs	r3, #0
 8008292:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7e1b      	ldrb	r3, [r3, #24]
 8008298:	3b01      	subs	r3, #1
 800829a:	2b0a      	cmp	r3, #10
 800829c:	f200 8156 	bhi.w	800854c <USBH_HandleControl+0x2c8>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBH_HandleControl+0x24>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082ef 	.word	0x080082ef
 80082b0:	08008359 	.word	0x08008359
 80082b4:	0800837f 	.word	0x0800837f
 80082b8:	080083b7 	.word	0x080083b7
 80082bc:	080083e1 	.word	0x080083e1
 80082c0:	08008433 	.word	0x08008433
 80082c4:	08008455 	.word	0x08008455
 80082c8:	08008491 	.word	0x08008491
 80082cc:	080084b7 	.word	0x080084b7
 80082d0:	080084f5 	.word	0x080084f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f103 0110 	add.w	r1, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	461a      	mov	r2, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f943 	bl	800856c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e139      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	795b      	ldrb	r3, [r3, #5]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcc5 	bl	8008c84 <USBH_LL_GetURBState>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d11e      	bne.n	8008342 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7c1b      	ldrb	r3, [r3, #16]
 8008308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800830c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8adb      	ldrh	r3, [r3, #22]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008316:	7b7b      	ldrb	r3, [r7, #13]
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d103      	bne.n	8008324 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2203      	movs	r2, #3
 8008320:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008322:	e115      	b.n	8008550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2205      	movs	r2, #5
 8008328:	761a      	strb	r2, [r3, #24]
      break;
 800832a:	e111      	b.n	8008550 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800832c:	7b7b      	ldrb	r3, [r7, #13]
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d103      	bne.n	800833a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2209      	movs	r2, #9
 8008336:	761a      	strb	r2, [r3, #24]
      break;
 8008338:	e10a      	b.n	8008550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2207      	movs	r2, #7
 800833e:	761a      	strb	r2, [r3, #24]
      break;
 8008340:	e106      	b.n	8008550 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d003      	beq.n	8008350 <USBH_HandleControl+0xcc>
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b02      	cmp	r3, #2
 800834c:	f040 8100 	bne.w	8008550 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220b      	movs	r2, #11
 8008354:	761a      	strb	r2, [r3, #24]
      break;
 8008356:	e0fb      	b.n	8008550 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6899      	ldr	r1, [r3, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	899a      	ldrh	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	791b      	ldrb	r3, [r3, #4]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f93a 	bl	80085ea <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2204      	movs	r2, #4
 800837a:	761a      	strb	r2, [r3, #24]
      break;
 800837c:	e0f1      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc7d 	bl	8008c84 <USBH_LL_GetURBState>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2209      	movs	r2, #9
 8008398:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b05      	cmp	r3, #5
 800839e:	d102      	bne.n	80083a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083a0:	2303      	movs	r3, #3
 80083a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083a4:	e0d6      	b.n	8008554 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	f040 80d3 	bne.w	8008554 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	220b      	movs	r2, #11
 80083b2:	761a      	strb	r2, [r3, #24]
      break;
 80083b4:	e0ce      	b.n	8008554 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6899      	ldr	r1, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	899a      	ldrh	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	2001      	movs	r0, #1
 80083c4:	9000      	str	r0, [sp, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f8ea 	bl	80085a0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2206      	movs	r2, #6
 80083dc:	761a      	strb	r2, [r3, #24]
      break;
 80083de:	e0c0      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	795b      	ldrb	r3, [r3, #5]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc4c 	bl	8008c84 <USBH_LL_GetURBState>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d103      	bne.n	80083fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80083fc:	e0ac      	b.n	8008558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b05      	cmp	r3, #5
 8008402:	d105      	bne.n	8008410 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	220c      	movs	r2, #12
 8008408:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
      break;
 800840e:	e0a3      	b.n	8008558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d103      	bne.n	800841e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	761a      	strb	r2, [r3, #24]
      break;
 800841c:	e09c      	b.n	8008558 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b04      	cmp	r3, #4
 8008422:	f040 8099 	bne.w	8008558 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220b      	movs	r2, #11
 800842a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800842c:	2302      	movs	r3, #2
 800842e:	73fb      	strb	r3, [r7, #15]
      break;
 8008430:	e092      	b.n	8008558 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8d5 	bl	80085ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2208      	movs	r2, #8
 8008450:	761a      	strb	r2, [r3, #24]

      break;
 8008452:	e086      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fc12 	bl	8008c84 <USBH_LL_GetURBState>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d105      	bne.n	8008476 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	220d      	movs	r2, #13
 800846e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008474:	e072      	b.n	800855c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d103      	bne.n	8008484 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	220b      	movs	r2, #11
 8008480:	761a      	strb	r2, [r3, #24]
      break;
 8008482:	e06b      	b.n	800855c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b05      	cmp	r3, #5
 8008488:	d168      	bne.n	800855c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e065      	b.n	800855c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	2201      	movs	r2, #1
 8008496:	9200      	str	r2, [sp, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f87f 	bl	80085a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	220a      	movs	r2, #10
 80084b2:	761a      	strb	r2, [r3, #24]
      break;
 80084b4:	e055      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbe1 	bl	8008c84 <USBH_LL_GetURBState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220d      	movs	r2, #13
 80084d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084d6:	e043      	b.n	8008560 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2209      	movs	r2, #9
 80084e2:	761a      	strb	r2, [r3, #24]
      break;
 80084e4:	e03c      	b.n	8008560 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d139      	bne.n	8008560 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	220b      	movs	r2, #11
 80084f0:	761a      	strb	r2, [r3, #24]
      break;
 80084f2:	e035      	b.n	8008560 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7e5b      	ldrb	r3, [r3, #25]
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	765a      	strb	r2, [r3, #25]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7e5b      	ldrb	r3, [r3, #25]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d806      	bhi.n	8008516 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008514:	e025      	b.n	8008562 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800851c:	2106      	movs	r1, #6
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	795b      	ldrb	r3, [r3, #5]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f90c 	bl	800874c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f906 	bl	800874c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008546:	2302      	movs	r3, #2
 8008548:	73fb      	strb	r3, [r7, #15]
      break;
 800854a:	e00a      	b.n	8008562 <USBH_HandleControl+0x2de>

    default:
      break;
 800854c:	bf00      	nop
 800854e:	e008      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008550:	bf00      	nop
 8008552:	e006      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008560:	bf00      	nop
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af04      	add	r7, sp, #16
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800857a:	79f9      	ldrb	r1, [r7, #7]
 800857c:	2300      	movs	r3, #0
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	2308      	movs	r3, #8
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fb46 	bl	8008c22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	460b      	mov	r3, r1
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4613      	mov	r3, r2
 80085b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085c4:	7979      	ldrb	r1, [r7, #5]
 80085c6:	7e3b      	ldrb	r3, [r7, #24]
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	2301      	movs	r3, #1
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	2200      	movs	r2, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fb21 	bl	8008c22 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af04      	add	r7, sp, #16
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	4611      	mov	r1, r2
 80085f6:	461a      	mov	r2, r3
 80085f8:	460b      	mov	r3, r1
 80085fa:	80fb      	strh	r3, [r7, #6]
 80085fc:	4613      	mov	r3, r2
 80085fe:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008600:	7979      	ldrb	r1, [r7, #5]
 8008602:	2300      	movs	r3, #0
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2301      	movs	r3, #1
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	2201      	movs	r2, #1
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fb03 	bl	8008c22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800861c:	2300      	movs	r3, #0

}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af04      	add	r7, sp, #16
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	460b      	mov	r3, r1
 8008636:	80fb      	strh	r3, [r7, #6]
 8008638:	4613      	mov	r3, r2
 800863a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800864a:	7979      	ldrb	r1, [r7, #5]
 800864c:	7e3b      	ldrb	r3, [r7, #24]
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	2301      	movs	r3, #1
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2302      	movs	r3, #2
 800865e:	2200      	movs	r2, #0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fade 	bl	8008c22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af04      	add	r7, sp, #16
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	460b      	mov	r3, r1
 8008680:	80fb      	strh	r3, [r7, #6]
 8008682:	4613      	mov	r3, r2
 8008684:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008686:	7979      	ldrb	r1, [r7, #5]
 8008688:	2300      	movs	r3, #0
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	2301      	movs	r3, #1
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2302      	movs	r3, #2
 800869a:	2201      	movs	r2, #1
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fac0 	bl	8008c22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	70fb      	strb	r3, [r7, #3]
 80086be:	460b      	mov	r3, r1
 80086c0:	70bb      	strb	r3, [r7, #2]
 80086c2:	4613      	mov	r3, r2
 80086c4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086c6:	7878      	ldrb	r0, [r7, #1]
 80086c8:	78ba      	ldrb	r2, [r7, #2]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	8b3b      	ldrh	r3, [r7, #24]
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	7d3b      	ldrb	r3, [r7, #20]
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	7c3b      	ldrb	r3, [r7, #16]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	4603      	mov	r3, r0
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa53 	bl	8008b86 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa72 	bl	8008be4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f836 	bl	8008788 <USBH_GetFreePipe>
 800871c:	4603      	mov	r3, r0
 800871e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008720:	89fb      	ldrh	r3, [r7, #14]
 8008722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008726:	4293      	cmp	r3, r2
 8008728:	d00a      	beq.n	8008740 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	33e0      	adds	r3, #224	; 0xe0
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	b2db      	uxtb	r3, r3
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b0a      	cmp	r3, #10
 800875c:	d80d      	bhi.n	800877a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	33e0      	adds	r3, #224	; 0xe0
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	33e0      	adds	r3, #224	; 0xe0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	e00f      	b.n	80087ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	33e0      	adds	r3, #224	; 0xe0
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	e007      	b.n	80087c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	3301      	adds	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2b0a      	cmp	r3, #10
 80087be:	d9ec      	bls.n	800879a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087d4:	2201      	movs	r2, #1
 80087d6:	490e      	ldr	r1, [pc, #56]	; (8008810 <MX_USB_HOST_Init+0x40>)
 80087d8:	480e      	ldr	r0, [pc, #56]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087da:	f7fe fca1 	bl	8007120 <USBH_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087e4:	f7f8 fe9c 	bl	8001520 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087e8:	490b      	ldr	r1, [pc, #44]	; (8008818 <MX_USB_HOST_Init+0x48>)
 80087ea:	480a      	ldr	r0, [pc, #40]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087ec:	f7fe fd26 	bl	800723c <USBH_RegisterClass>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087f6:	f7f8 fe93 	bl	8001520 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087fa:	4806      	ldr	r0, [pc, #24]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087fc:	f7fe fdaa 	bl	8007354 <USBH_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008806:	f7f8 fe8b 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800880a:	bf00      	nop
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	08008831 	.word	0x08008831
 8008814:	200001fc 	.word	0x200001fc
 8008818:	2000000c 	.word	0x2000000c

0800881c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008820:	4802      	ldr	r0, [pc, #8]	; (800882c <MX_USB_HOST_Process+0x10>)
 8008822:	f7fe fda7 	bl	8007374 <USBH_Process>
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200001fc 	.word	0x200001fc

08008830 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	3b01      	subs	r3, #1
 8008840:	2b04      	cmp	r3, #4
 8008842:	d819      	bhi.n	8008878 <USBH_UserProcess+0x48>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <USBH_UserProcess+0x1c>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008879 	.word	0x08008879
 8008850:	08008869 	.word	0x08008869
 8008854:	08008879 	.word	0x08008879
 8008858:	08008871 	.word	0x08008871
 800885c:	08008861 	.word	0x08008861
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <USBH_UserProcess+0x58>)
 8008862:	2203      	movs	r2, #3
 8008864:	701a      	strb	r2, [r3, #0]
  break;
 8008866:	e008      	b.n	800887a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <USBH_UserProcess+0x58>)
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
  break;
 800886e:	e004      	b.n	800887a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <USBH_UserProcess+0x58>)
 8008872:	2201      	movs	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
  break;
 8008876:	e000      	b.n	800887a <USBH_UserProcess+0x4a>

  default:
  break;
 8008878:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200000b0 	.word	0x200000b0

0800888c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	; 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ac:	d147      	bne.n	800893e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	4b25      	ldr	r3, [pc, #148]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	4b22      	ldr	r3, [pc, #136]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4619      	mov	r1, r3
 80088de:	481b      	ldr	r0, [pc, #108]	; (800894c <HAL_HCD_MspInit+0xc0>)
 80088e0:	f7f9 fd98 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ea:	2302      	movs	r3, #2
 80088ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088f2:	2300      	movs	r3, #0
 80088f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088f6:	230a      	movs	r3, #10
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088fa:	f107 0314 	add.w	r3, r7, #20
 80088fe:	4619      	mov	r1, r3
 8008900:	4812      	ldr	r0, [pc, #72]	; (800894c <HAL_HCD_MspInit+0xc0>)
 8008902:	f7f9 fd87 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	4a0f      	ldr	r2, [pc, #60]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 800890c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008910:	6353      	str	r3, [r2, #52]	; 0x34
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	4a0b      	ldr	r2, [pc, #44]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 800891c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008920:	6453      	str	r3, [r2, #68]	; 0x44
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	2043      	movs	r0, #67	; 0x43
 8008934:	f7f9 fd37 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008938:	2043      	movs	r0, #67	; 0x43
 800893a:	f7f9 fd50 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800893e:	bf00      	nop
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40023800 	.word	0x40023800
 800894c:	40020000 	.word	0x40020000

08008950 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff f8db 	bl	8007b1a <USBH_LL_IncTimer>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff f913 	bl	8007ba6 <USBH_LL_Connect>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f91c 	bl	8007bd4 <USBH_LL_Disconnect>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
 80089b0:	4613      	mov	r3, r2
 80089b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff f8cd 	bl	8007b6e <USBH_LL_PortEnabled>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff f8cd 	bl	8007b8a <USBH_LL_PortDisabled>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d12a      	bne.n	8008a60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a0a:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a24:	2208      	movs	r2, #8
 8008a26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a2e:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a36:	2202      	movs	r2, #2
 8008a38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a40:	480a      	ldr	r0, [pc, #40]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a42:	f7f9 fe9c 	bl	800277e <HAL_HCD_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a4c:	f7f8 fd68 	bl	8001520 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a50:	4806      	ldr	r0, [pc, #24]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a52:	f7fa fa80 	bl	8002f56 <HAL_HCD_GetCurrentFrame>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7ff f84e 	bl	8007afc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200005d4 	.word	0x200005d4

08008a70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fa f9ef 	bl	8002e6a <HAL_HCD_Start>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f95c 	bl	8008d50 <USBH_Get_USB_Status>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fa f9f7 	bl	8002eb0 <HAL_HCD_Stop>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f941 	bl	8008d50 <USBH_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fa fa3f 	bl	8002f72 <HAL_HCD_GetCurrentSpeed>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d00c      	beq.n	8008b14 <USBH_LL_GetSpeed+0x38>
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d80d      	bhi.n	8008b1a <USBH_LL_GetSpeed+0x3e>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <USBH_LL_GetSpeed+0x2c>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d003      	beq.n	8008b0e <USBH_LL_GetSpeed+0x32>
 8008b06:	e008      	b.n	8008b1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0c:	e008      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
    break;
 8008b12:	e005      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b14:	2302      	movs	r3, #2
 8008b16:	73fb      	strb	r3, [r7, #15]
    break;
 8008b18:	e002      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1e:	bf00      	nop
  }
  return  speed;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fa f9d2 	bl	8002eea <HAL_HCD_ResetPort>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8ff 	bl	8008d50 <USBH_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fa f9d9 	bl	8002f2e <HAL_HCD_HC_GetXferCount>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b86:	b590      	push	{r4, r7, lr}
 8008b88:	b089      	sub	sp, #36	; 0x24
 8008b8a:	af04      	add	r7, sp, #16
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	461a      	mov	r2, r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	70fb      	strb	r3, [r7, #3]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70bb      	strb	r3, [r7, #2]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bae:	787c      	ldrb	r4, [r7, #1]
 8008bb0:	78ba      	ldrb	r2, [r7, #2]
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	f7f9 fe3c 	bl	8002842 <HAL_HCD_HC_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f8bd 	bl	8008d50 <USBH_Get_USB_Status>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd90      	pop	{r4, r7, pc}

08008be4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7f9 feac 	bl	8002960 <HAL_HCD_HC_Halt>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f89e 	bl	8008d50 <USBH_Get_USB_Status>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c22:	b590      	push	{r4, r7, lr}
 8008c24:	b089      	sub	sp, #36	; 0x24
 8008c26:	af04      	add	r7, sp, #16
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	70fb      	strb	r3, [r7, #3]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70bb      	strb	r3, [r7, #2]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c4a:	787c      	ldrb	r4, [r7, #1]
 8008c4c:	78ba      	ldrb	r2, [r7, #2]
 8008c4e:	78f9      	ldrb	r1, [r7, #3]
 8008c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c54:	9303      	str	r3, [sp, #12]
 8008c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4623      	mov	r3, r4
 8008c66:	f7f9 fe9f 	bl	80029a8 <HAL_HCD_HC_SubmitRequest>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f86d 	bl	8008d50 <USBH_Get_USB_Status>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}

08008c84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fa f933 	bl	8002f06 <HAL_HCD_HC_GetURBState>
 8008ca0:	4603      	mov	r3, r0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d103      	bne.n	8008cc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f870 	bl	8008da8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008cc8:	20c8      	movs	r0, #200	; 0xc8
 8008cca:	f7f8 fea1 	bl	8001a10 <HAL_Delay>
  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	333b      	adds	r3, #59	; 0x3b
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	212c      	movs	r1, #44	; 0x2c
 8008d0a:	fb01 f303 	mul.w	r3, r1, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	3354      	adds	r3, #84	; 0x54
 8008d12:	78ba      	ldrb	r2, [r7, #2]
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e008      	b.n	8008d2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	212c      	movs	r1, #44	; 0x2c
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3355      	adds	r3, #85	; 0x55
 8008d26:	78ba      	ldrb	r2, [r7, #2]
 8008d28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7f8 fe65 	bl	8001a10 <HAL_Delay>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d817      	bhi.n	8008d94 <USBH_Get_USB_Status+0x44>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBH_Get_USB_Status+0x1c>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d83 	.word	0x08008d83
 8008d74:	08008d89 	.word	0x08008d89
 8008d78:	08008d8f 	.word	0x08008d8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	e00b      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d82:	2302      	movs	r3, #2
 8008d84:	73fb      	strb	r3, [r7, #15]
    break;
 8008d86:	e008      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e005      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e002      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d94:	2302      	movs	r3, #2
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	bf00      	nop
  }
  return usb_status;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <MX_DriverVbusFS+0x34>)
 8008dce:	f7f9 fcbd 	bl	800274c <HAL_GPIO_WritePin>
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40020800 	.word	0x40020800

08008de0 <__errno>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	; (8008de8 <__errno+0x8>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	2000002c 	.word	0x2000002c

08008dec <__libc_init_array>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4d0d      	ldr	r5, [pc, #52]	; (8008e24 <__libc_init_array+0x38>)
 8008df0:	4c0d      	ldr	r4, [pc, #52]	; (8008e28 <__libc_init_array+0x3c>)
 8008df2:	1b64      	subs	r4, r4, r5
 8008df4:	10a4      	asrs	r4, r4, #2
 8008df6:	2600      	movs	r6, #0
 8008df8:	42a6      	cmp	r6, r4
 8008dfa:	d109      	bne.n	8008e10 <__libc_init_array+0x24>
 8008dfc:	4d0b      	ldr	r5, [pc, #44]	; (8008e2c <__libc_init_array+0x40>)
 8008dfe:	4c0c      	ldr	r4, [pc, #48]	; (8008e30 <__libc_init_array+0x44>)
 8008e00:	f000 fcfa 	bl	80097f8 <_init>
 8008e04:	1b64      	subs	r4, r4, r5
 8008e06:	10a4      	asrs	r4, r4, #2
 8008e08:	2600      	movs	r6, #0
 8008e0a:	42a6      	cmp	r6, r4
 8008e0c:	d105      	bne.n	8008e1a <__libc_init_array+0x2e>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e14:	4798      	blx	r3
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7ee      	b.n	8008df8 <__libc_init_array+0xc>
 8008e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1e:	4798      	blx	r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	e7f2      	b.n	8008e0a <__libc_init_array+0x1e>
 8008e24:	08009880 	.word	0x08009880
 8008e28:	08009880 	.word	0x08009880
 8008e2c:	08009880 	.word	0x08009880
 8008e30:	08009884 	.word	0x08009884

08008e34 <malloc>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <malloc+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f000 b863 	b.w	8008f04 <_malloc_r>
 8008e3e:	bf00      	nop
 8008e40:	2000002c 	.word	0x2000002c

08008e44 <free>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <free+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b80b 	b.w	8008e64 <_free_r>
 8008e4e:	bf00      	nop
 8008e50:	2000002c 	.word	0x2000002c

08008e54 <memset>:
 8008e54:	4402      	add	r2, r0
 8008e56:	4603      	mov	r3, r0
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d100      	bne.n	8008e5e <memset+0xa>
 8008e5c:	4770      	bx	lr
 8008e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e62:	e7f9      	b.n	8008e58 <memset+0x4>

08008e64 <_free_r>:
 8008e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d048      	beq.n	8008efc <_free_r+0x98>
 8008e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f1a1 0404 	sub.w	r4, r1, #4
 8008e76:	bfb8      	it	lt
 8008e78:	18e4      	addlt	r4, r4, r3
 8008e7a:	f000 f8e7 	bl	800904c <__malloc_lock>
 8008e7e:	4a20      	ldr	r2, [pc, #128]	; (8008f00 <_free_r+0x9c>)
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	4615      	mov	r5, r2
 8008e86:	b933      	cbnz	r3, 8008e96 <_free_r+0x32>
 8008e88:	6063      	str	r3, [r4, #4]
 8008e8a:	6014      	str	r4, [r2, #0]
 8008e8c:	b003      	add	sp, #12
 8008e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e92:	f000 b8e1 	b.w	8009058 <__malloc_unlock>
 8008e96:	42a3      	cmp	r3, r4
 8008e98:	d90b      	bls.n	8008eb2 <_free_r+0x4e>
 8008e9a:	6821      	ldr	r1, [r4, #0]
 8008e9c:	1862      	adds	r2, r4, r1
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	bf04      	itt	eq
 8008ea2:	681a      	ldreq	r2, [r3, #0]
 8008ea4:	685b      	ldreq	r3, [r3, #4]
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	bf04      	itt	eq
 8008eaa:	1852      	addeq	r2, r2, r1
 8008eac:	6022      	streq	r2, [r4, #0]
 8008eae:	602c      	str	r4, [r5, #0]
 8008eb0:	e7ec      	b.n	8008e8c <_free_r+0x28>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x58>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x4e>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1855      	adds	r5, r2, r1
 8008ec0:	42a5      	cmp	r5, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x78>
 8008ec4:	6824      	ldr	r4, [r4, #0]
 8008ec6:	4421      	add	r1, r4
 8008ec8:	1854      	adds	r4, r2, r1
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1dd      	bne.n	8008e8c <_free_r+0x28>
 8008ed0:	681c      	ldr	r4, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6053      	str	r3, [r2, #4]
 8008ed6:	4421      	add	r1, r4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	e7d7      	b.n	8008e8c <_free_r+0x28>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x80>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	6003      	str	r3, [r0, #0]
 8008ee2:	e7d3      	b.n	8008e8c <_free_r+0x28>
 8008ee4:	6825      	ldr	r5, [r4, #0]
 8008ee6:	1961      	adds	r1, r4, r5
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf04      	itt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	bf04      	itt	eq
 8008ef4:	1949      	addeq	r1, r1, r5
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	6054      	str	r4, [r2, #4]
 8008efa:	e7c7      	b.n	8008e8c <_free_r+0x28>
 8008efc:	b003      	add	sp, #12
 8008efe:	bd30      	pop	{r4, r5, pc}
 8008f00:	200000b4 	.word	0x200000b4

08008f04 <_malloc_r>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	1ccd      	adds	r5, r1, #3
 8008f08:	f025 0503 	bic.w	r5, r5, #3
 8008f0c:	3508      	adds	r5, #8
 8008f0e:	2d0c      	cmp	r5, #12
 8008f10:	bf38      	it	cc
 8008f12:	250c      	movcc	r5, #12
 8008f14:	2d00      	cmp	r5, #0
 8008f16:	4606      	mov	r6, r0
 8008f18:	db01      	blt.n	8008f1e <_malloc_r+0x1a>
 8008f1a:	42a9      	cmp	r1, r5
 8008f1c:	d903      	bls.n	8008f26 <_malloc_r+0x22>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	2000      	movs	r0, #0
 8008f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f26:	f000 f891 	bl	800904c <__malloc_lock>
 8008f2a:	4921      	ldr	r1, [pc, #132]	; (8008fb0 <_malloc_r+0xac>)
 8008f2c:	680a      	ldr	r2, [r1, #0]
 8008f2e:	4614      	mov	r4, r2
 8008f30:	b99c      	cbnz	r4, 8008f5a <_malloc_r+0x56>
 8008f32:	4f20      	ldr	r7, [pc, #128]	; (8008fb4 <_malloc_r+0xb0>)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	b923      	cbnz	r3, 8008f42 <_malloc_r+0x3e>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4630      	mov	r0, r6
 8008f3c:	f000 f83c 	bl	8008fb8 <_sbrk_r>
 8008f40:	6038      	str	r0, [r7, #0]
 8008f42:	4629      	mov	r1, r5
 8008f44:	4630      	mov	r0, r6
 8008f46:	f000 f837 	bl	8008fb8 <_sbrk_r>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d123      	bne.n	8008f96 <_malloc_r+0x92>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	4630      	mov	r0, r6
 8008f54:	f000 f880 	bl	8009058 <__malloc_unlock>
 8008f58:	e7e3      	b.n	8008f22 <_malloc_r+0x1e>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	1b5b      	subs	r3, r3, r5
 8008f5e:	d417      	bmi.n	8008f90 <_malloc_r+0x8c>
 8008f60:	2b0b      	cmp	r3, #11
 8008f62:	d903      	bls.n	8008f6c <_malloc_r+0x68>
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	441c      	add	r4, r3
 8008f68:	6025      	str	r5, [r4, #0]
 8008f6a:	e004      	b.n	8008f76 <_malloc_r+0x72>
 8008f6c:	6863      	ldr	r3, [r4, #4]
 8008f6e:	42a2      	cmp	r2, r4
 8008f70:	bf0c      	ite	eq
 8008f72:	600b      	streq	r3, [r1, #0]
 8008f74:	6053      	strne	r3, [r2, #4]
 8008f76:	4630      	mov	r0, r6
 8008f78:	f000 f86e 	bl	8009058 <__malloc_unlock>
 8008f7c:	f104 000b 	add.w	r0, r4, #11
 8008f80:	1d23      	adds	r3, r4, #4
 8008f82:	f020 0007 	bic.w	r0, r0, #7
 8008f86:	1ac2      	subs	r2, r0, r3
 8008f88:	d0cc      	beq.n	8008f24 <_malloc_r+0x20>
 8008f8a:	1a1b      	subs	r3, r3, r0
 8008f8c:	50a3      	str	r3, [r4, r2]
 8008f8e:	e7c9      	b.n	8008f24 <_malloc_r+0x20>
 8008f90:	4622      	mov	r2, r4
 8008f92:	6864      	ldr	r4, [r4, #4]
 8008f94:	e7cc      	b.n	8008f30 <_malloc_r+0x2c>
 8008f96:	1cc4      	adds	r4, r0, #3
 8008f98:	f024 0403 	bic.w	r4, r4, #3
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d0e3      	beq.n	8008f68 <_malloc_r+0x64>
 8008fa0:	1a21      	subs	r1, r4, r0
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f808 	bl	8008fb8 <_sbrk_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1dd      	bne.n	8008f68 <_malloc_r+0x64>
 8008fac:	e7cf      	b.n	8008f4e <_malloc_r+0x4a>
 8008fae:	bf00      	nop
 8008fb0:	200000b4 	.word	0x200000b4
 8008fb4:	200000b8 	.word	0x200000b8

08008fb8 <_sbrk_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4d06      	ldr	r5, [pc, #24]	; (8008fd4 <_sbrk_r+0x1c>)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4604      	mov	r4, r0
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	602b      	str	r3, [r5, #0]
 8008fc4:	f7f8 fc40 	bl	8001848 <_sbrk>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d102      	bne.n	8008fd2 <_sbrk_r+0x1a>
 8008fcc:	682b      	ldr	r3, [r5, #0]
 8008fce:	b103      	cbz	r3, 8008fd2 <_sbrk_r+0x1a>
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	bd38      	pop	{r3, r4, r5, pc}
 8008fd4:	200008d8 	.word	0x200008d8

08008fd8 <_vsniprintf_r>:
 8008fd8:	b530      	push	{r4, r5, lr}
 8008fda:	1e14      	subs	r4, r2, #0
 8008fdc:	4605      	mov	r5, r0
 8008fde:	b09b      	sub	sp, #108	; 0x6c
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	da05      	bge.n	8008ff0 <_vsniprintf_r+0x18>
 8008fe4:	238b      	movs	r3, #139	; 0x8b
 8008fe6:	602b      	str	r3, [r5, #0]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	b01b      	add	sp, #108	; 0x6c
 8008fee:	bd30      	pop	{r4, r5, pc}
 8008ff0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008ff4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008ff8:	bf14      	ite	ne
 8008ffa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008ffe:	4623      	moveq	r3, r4
 8009000:	9302      	str	r3, [sp, #8]
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009008:	9100      	str	r1, [sp, #0]
 800900a:	9104      	str	r1, [sp, #16]
 800900c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009010:	4602      	mov	r2, r0
 8009012:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009014:	4669      	mov	r1, sp
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f880 	bl	800911c <_svfiprintf_r>
 800901c:	1c43      	adds	r3, r0, #1
 800901e:	bfbc      	itt	lt
 8009020:	238b      	movlt	r3, #139	; 0x8b
 8009022:	602b      	strlt	r3, [r5, #0]
 8009024:	2c00      	cmp	r4, #0
 8009026:	d0e1      	beq.n	8008fec <_vsniprintf_r+0x14>
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	e7dd      	b.n	8008fec <_vsniprintf_r+0x14>

08009030 <vsniprintf>:
 8009030:	b507      	push	{r0, r1, r2, lr}
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	4613      	mov	r3, r2
 8009036:	460a      	mov	r2, r1
 8009038:	4601      	mov	r1, r0
 800903a:	4803      	ldr	r0, [pc, #12]	; (8009048 <vsniprintf+0x18>)
 800903c:	6800      	ldr	r0, [r0, #0]
 800903e:	f7ff ffcb 	bl	8008fd8 <_vsniprintf_r>
 8009042:	b003      	add	sp, #12
 8009044:	f85d fb04 	ldr.w	pc, [sp], #4
 8009048:	2000002c 	.word	0x2000002c

0800904c <__malloc_lock>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__malloc_lock+0x8>)
 800904e:	f000 baf9 	b.w	8009644 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	200008e0 	.word	0x200008e0

08009058 <__malloc_unlock>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__malloc_unlock+0x8>)
 800905a:	f000 baf4 	b.w	8009646 <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	200008e0 	.word	0x200008e0

08009064 <__ssputs_r>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	688e      	ldr	r6, [r1, #8]
 800906a:	429e      	cmp	r6, r3
 800906c:	4682      	mov	sl, r0
 800906e:	460c      	mov	r4, r1
 8009070:	4690      	mov	r8, r2
 8009072:	461f      	mov	r7, r3
 8009074:	d838      	bhi.n	80090e8 <__ssputs_r+0x84>
 8009076:	898a      	ldrh	r2, [r1, #12]
 8009078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800907c:	d032      	beq.n	80090e4 <__ssputs_r+0x80>
 800907e:	6825      	ldr	r5, [r4, #0]
 8009080:	6909      	ldr	r1, [r1, #16]
 8009082:	eba5 0901 	sub.w	r9, r5, r1
 8009086:	6965      	ldr	r5, [r4, #20]
 8009088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800908c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009090:	3301      	adds	r3, #1
 8009092:	444b      	add	r3, r9
 8009094:	106d      	asrs	r5, r5, #1
 8009096:	429d      	cmp	r5, r3
 8009098:	bf38      	it	cc
 800909a:	461d      	movcc	r5, r3
 800909c:	0553      	lsls	r3, r2, #21
 800909e:	d531      	bpl.n	8009104 <__ssputs_r+0xa0>
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7ff ff2f 	bl	8008f04 <_malloc_r>
 80090a6:	4606      	mov	r6, r0
 80090a8:	b950      	cbnz	r0, 80090c0 <__ssputs_r+0x5c>
 80090aa:	230c      	movs	r3, #12
 80090ac:	f8ca 3000 	str.w	r3, [sl]
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	6921      	ldr	r1, [r4, #16]
 80090c2:	464a      	mov	r2, r9
 80090c4:	f000 fac0 	bl	8009648 <memcpy>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	6126      	str	r6, [r4, #16]
 80090d6:	6165      	str	r5, [r4, #20]
 80090d8:	444e      	add	r6, r9
 80090da:	eba5 0509 	sub.w	r5, r5, r9
 80090de:	6026      	str	r6, [r4, #0]
 80090e0:	60a5      	str	r5, [r4, #8]
 80090e2:	463e      	mov	r6, r7
 80090e4:	42be      	cmp	r6, r7
 80090e6:	d900      	bls.n	80090ea <__ssputs_r+0x86>
 80090e8:	463e      	mov	r6, r7
 80090ea:	4632      	mov	r2, r6
 80090ec:	6820      	ldr	r0, [r4, #0]
 80090ee:	4641      	mov	r1, r8
 80090f0:	f000 fab8 	bl	8009664 <memmove>
 80090f4:	68a3      	ldr	r3, [r4, #8]
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	1b9b      	subs	r3, r3, r6
 80090fa:	4432      	add	r2, r6
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	6022      	str	r2, [r4, #0]
 8009100:	2000      	movs	r0, #0
 8009102:	e7db      	b.n	80090bc <__ssputs_r+0x58>
 8009104:	462a      	mov	r2, r5
 8009106:	f000 fac7 	bl	8009698 <_realloc_r>
 800910a:	4606      	mov	r6, r0
 800910c:	2800      	cmp	r0, #0
 800910e:	d1e1      	bne.n	80090d4 <__ssputs_r+0x70>
 8009110:	6921      	ldr	r1, [r4, #16]
 8009112:	4650      	mov	r0, sl
 8009114:	f7ff fea6 	bl	8008e64 <_free_r>
 8009118:	e7c7      	b.n	80090aa <__ssputs_r+0x46>
	...

0800911c <_svfiprintf_r>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	4698      	mov	r8, r3
 8009122:	898b      	ldrh	r3, [r1, #12]
 8009124:	061b      	lsls	r3, r3, #24
 8009126:	b09d      	sub	sp, #116	; 0x74
 8009128:	4607      	mov	r7, r0
 800912a:	460d      	mov	r5, r1
 800912c:	4614      	mov	r4, r2
 800912e:	d50e      	bpl.n	800914e <_svfiprintf_r+0x32>
 8009130:	690b      	ldr	r3, [r1, #16]
 8009132:	b963      	cbnz	r3, 800914e <_svfiprintf_r+0x32>
 8009134:	2140      	movs	r1, #64	; 0x40
 8009136:	f7ff fee5 	bl	8008f04 <_malloc_r>
 800913a:	6028      	str	r0, [r5, #0]
 800913c:	6128      	str	r0, [r5, #16]
 800913e:	b920      	cbnz	r0, 800914a <_svfiprintf_r+0x2e>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	f04f 30ff 	mov.w	r0, #4294967295
 8009148:	e0d1      	b.n	80092ee <_svfiprintf_r+0x1d2>
 800914a:	2340      	movs	r3, #64	; 0x40
 800914c:	616b      	str	r3, [r5, #20]
 800914e:	2300      	movs	r3, #0
 8009150:	9309      	str	r3, [sp, #36]	; 0x24
 8009152:	2320      	movs	r3, #32
 8009154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009158:	f8cd 800c 	str.w	r8, [sp, #12]
 800915c:	2330      	movs	r3, #48	; 0x30
 800915e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009308 <_svfiprintf_r+0x1ec>
 8009162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009166:	f04f 0901 	mov.w	r9, #1
 800916a:	4623      	mov	r3, r4
 800916c:	469a      	mov	sl, r3
 800916e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009172:	b10a      	cbz	r2, 8009178 <_svfiprintf_r+0x5c>
 8009174:	2a25      	cmp	r2, #37	; 0x25
 8009176:	d1f9      	bne.n	800916c <_svfiprintf_r+0x50>
 8009178:	ebba 0b04 	subs.w	fp, sl, r4
 800917c:	d00b      	beq.n	8009196 <_svfiprintf_r+0x7a>
 800917e:	465b      	mov	r3, fp
 8009180:	4622      	mov	r2, r4
 8009182:	4629      	mov	r1, r5
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff6d 	bl	8009064 <__ssputs_r>
 800918a:	3001      	adds	r0, #1
 800918c:	f000 80aa 	beq.w	80092e4 <_svfiprintf_r+0x1c8>
 8009190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009192:	445a      	add	r2, fp
 8009194:	9209      	str	r2, [sp, #36]	; 0x24
 8009196:	f89a 3000 	ldrb.w	r3, [sl]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 80a2 	beq.w	80092e4 <_svfiprintf_r+0x1c8>
 80091a0:	2300      	movs	r3, #0
 80091a2:	f04f 32ff 	mov.w	r2, #4294967295
 80091a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091aa:	f10a 0a01 	add.w	sl, sl, #1
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b6:	931a      	str	r3, [sp, #104]	; 0x68
 80091b8:	4654      	mov	r4, sl
 80091ba:	2205      	movs	r2, #5
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	4851      	ldr	r0, [pc, #324]	; (8009308 <_svfiprintf_r+0x1ec>)
 80091c2:	f7f7 f805 	bl	80001d0 <memchr>
 80091c6:	9a04      	ldr	r2, [sp, #16]
 80091c8:	b9d8      	cbnz	r0, 8009202 <_svfiprintf_r+0xe6>
 80091ca:	06d0      	lsls	r0, r2, #27
 80091cc:	bf44      	itt	mi
 80091ce:	2320      	movmi	r3, #32
 80091d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d4:	0711      	lsls	r1, r2, #28
 80091d6:	bf44      	itt	mi
 80091d8:	232b      	movmi	r3, #43	; 0x2b
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091de:	f89a 3000 	ldrb.w	r3, [sl]
 80091e2:	2b2a      	cmp	r3, #42	; 0x2a
 80091e4:	d015      	beq.n	8009212 <_svfiprintf_r+0xf6>
 80091e6:	9a07      	ldr	r2, [sp, #28]
 80091e8:	4654      	mov	r4, sl
 80091ea:	2000      	movs	r0, #0
 80091ec:	f04f 0c0a 	mov.w	ip, #10
 80091f0:	4621      	mov	r1, r4
 80091f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f6:	3b30      	subs	r3, #48	; 0x30
 80091f8:	2b09      	cmp	r3, #9
 80091fa:	d94e      	bls.n	800929a <_svfiprintf_r+0x17e>
 80091fc:	b1b0      	cbz	r0, 800922c <_svfiprintf_r+0x110>
 80091fe:	9207      	str	r2, [sp, #28]
 8009200:	e014      	b.n	800922c <_svfiprintf_r+0x110>
 8009202:	eba0 0308 	sub.w	r3, r0, r8
 8009206:	fa09 f303 	lsl.w	r3, r9, r3
 800920a:	4313      	orrs	r3, r2
 800920c:	9304      	str	r3, [sp, #16]
 800920e:	46a2      	mov	sl, r4
 8009210:	e7d2      	b.n	80091b8 <_svfiprintf_r+0x9c>
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	1d19      	adds	r1, r3, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	9103      	str	r1, [sp, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	bfbb      	ittet	lt
 800921e:	425b      	neglt	r3, r3
 8009220:	f042 0202 	orrlt.w	r2, r2, #2
 8009224:	9307      	strge	r3, [sp, #28]
 8009226:	9307      	strlt	r3, [sp, #28]
 8009228:	bfb8      	it	lt
 800922a:	9204      	strlt	r2, [sp, #16]
 800922c:	7823      	ldrb	r3, [r4, #0]
 800922e:	2b2e      	cmp	r3, #46	; 0x2e
 8009230:	d10c      	bne.n	800924c <_svfiprintf_r+0x130>
 8009232:	7863      	ldrb	r3, [r4, #1]
 8009234:	2b2a      	cmp	r3, #42	; 0x2a
 8009236:	d135      	bne.n	80092a4 <_svfiprintf_r+0x188>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	1d1a      	adds	r2, r3, #4
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	9203      	str	r2, [sp, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb8      	it	lt
 8009244:	f04f 33ff 	movlt.w	r3, #4294967295
 8009248:	3402      	adds	r4, #2
 800924a:	9305      	str	r3, [sp, #20]
 800924c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009318 <_svfiprintf_r+0x1fc>
 8009250:	7821      	ldrb	r1, [r4, #0]
 8009252:	2203      	movs	r2, #3
 8009254:	4650      	mov	r0, sl
 8009256:	f7f6 ffbb 	bl	80001d0 <memchr>
 800925a:	b140      	cbz	r0, 800926e <_svfiprintf_r+0x152>
 800925c:	2340      	movs	r3, #64	; 0x40
 800925e:	eba0 000a 	sub.w	r0, r0, sl
 8009262:	fa03 f000 	lsl.w	r0, r3, r0
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	4303      	orrs	r3, r0
 800926a:	3401      	adds	r4, #1
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009272:	4826      	ldr	r0, [pc, #152]	; (800930c <_svfiprintf_r+0x1f0>)
 8009274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009278:	2206      	movs	r2, #6
 800927a:	f7f6 ffa9 	bl	80001d0 <memchr>
 800927e:	2800      	cmp	r0, #0
 8009280:	d038      	beq.n	80092f4 <_svfiprintf_r+0x1d8>
 8009282:	4b23      	ldr	r3, [pc, #140]	; (8009310 <_svfiprintf_r+0x1f4>)
 8009284:	bb1b      	cbnz	r3, 80092ce <_svfiprintf_r+0x1b2>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	3307      	adds	r3, #7
 800928a:	f023 0307 	bic.w	r3, r3, #7
 800928e:	3308      	adds	r3, #8
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009294:	4433      	add	r3, r6
 8009296:	9309      	str	r3, [sp, #36]	; 0x24
 8009298:	e767      	b.n	800916a <_svfiprintf_r+0x4e>
 800929a:	fb0c 3202 	mla	r2, ip, r2, r3
 800929e:	460c      	mov	r4, r1
 80092a0:	2001      	movs	r0, #1
 80092a2:	e7a5      	b.n	80091f0 <_svfiprintf_r+0xd4>
 80092a4:	2300      	movs	r3, #0
 80092a6:	3401      	adds	r4, #1
 80092a8:	9305      	str	r3, [sp, #20]
 80092aa:	4619      	mov	r1, r3
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4620      	mov	r0, r4
 80092b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b6:	3a30      	subs	r2, #48	; 0x30
 80092b8:	2a09      	cmp	r2, #9
 80092ba:	d903      	bls.n	80092c4 <_svfiprintf_r+0x1a8>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0c5      	beq.n	800924c <_svfiprintf_r+0x130>
 80092c0:	9105      	str	r1, [sp, #20]
 80092c2:	e7c3      	b.n	800924c <_svfiprintf_r+0x130>
 80092c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80092c8:	4604      	mov	r4, r0
 80092ca:	2301      	movs	r3, #1
 80092cc:	e7f0      	b.n	80092b0 <_svfiprintf_r+0x194>
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	462a      	mov	r2, r5
 80092d4:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <_svfiprintf_r+0x1f8>)
 80092d6:	a904      	add	r1, sp, #16
 80092d8:	4638      	mov	r0, r7
 80092da:	f3af 8000 	nop.w
 80092de:	1c42      	adds	r2, r0, #1
 80092e0:	4606      	mov	r6, r0
 80092e2:	d1d6      	bne.n	8009292 <_svfiprintf_r+0x176>
 80092e4:	89ab      	ldrh	r3, [r5, #12]
 80092e6:	065b      	lsls	r3, r3, #25
 80092e8:	f53f af2c 	bmi.w	8009144 <_svfiprintf_r+0x28>
 80092ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ee:	b01d      	add	sp, #116	; 0x74
 80092f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <_svfiprintf_r+0x1f8>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4638      	mov	r0, r7
 8009300:	f000 f87a 	bl	80093f8 <_printf_i>
 8009304:	e7eb      	b.n	80092de <_svfiprintf_r+0x1c2>
 8009306:	bf00      	nop
 8009308:	08009844 	.word	0x08009844
 800930c:	0800984e 	.word	0x0800984e
 8009310:	00000000 	.word	0x00000000
 8009314:	08009065 	.word	0x08009065
 8009318:	0800984a 	.word	0x0800984a

0800931c <_printf_common>:
 800931c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009320:	4616      	mov	r6, r2
 8009322:	4699      	mov	r9, r3
 8009324:	688a      	ldr	r2, [r1, #8]
 8009326:	690b      	ldr	r3, [r1, #16]
 8009328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800932c:	4293      	cmp	r3, r2
 800932e:	bfb8      	it	lt
 8009330:	4613      	movlt	r3, r2
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009338:	4607      	mov	r7, r0
 800933a:	460c      	mov	r4, r1
 800933c:	b10a      	cbz	r2, 8009342 <_printf_common+0x26>
 800933e:	3301      	adds	r3, #1
 8009340:	6033      	str	r3, [r6, #0]
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	0699      	lsls	r1, r3, #26
 8009346:	bf42      	ittt	mi
 8009348:	6833      	ldrmi	r3, [r6, #0]
 800934a:	3302      	addmi	r3, #2
 800934c:	6033      	strmi	r3, [r6, #0]
 800934e:	6825      	ldr	r5, [r4, #0]
 8009350:	f015 0506 	ands.w	r5, r5, #6
 8009354:	d106      	bne.n	8009364 <_printf_common+0x48>
 8009356:	f104 0a19 	add.w	sl, r4, #25
 800935a:	68e3      	ldr	r3, [r4, #12]
 800935c:	6832      	ldr	r2, [r6, #0]
 800935e:	1a9b      	subs	r3, r3, r2
 8009360:	42ab      	cmp	r3, r5
 8009362:	dc26      	bgt.n	80093b2 <_printf_common+0x96>
 8009364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009368:	1e13      	subs	r3, r2, #0
 800936a:	6822      	ldr	r2, [r4, #0]
 800936c:	bf18      	it	ne
 800936e:	2301      	movne	r3, #1
 8009370:	0692      	lsls	r2, r2, #26
 8009372:	d42b      	bmi.n	80093cc <_printf_common+0xb0>
 8009374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009378:	4649      	mov	r1, r9
 800937a:	4638      	mov	r0, r7
 800937c:	47c0      	blx	r8
 800937e:	3001      	adds	r0, #1
 8009380:	d01e      	beq.n	80093c0 <_printf_common+0xa4>
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	68e5      	ldr	r5, [r4, #12]
 8009386:	6832      	ldr	r2, [r6, #0]
 8009388:	f003 0306 	and.w	r3, r3, #6
 800938c:	2b04      	cmp	r3, #4
 800938e:	bf08      	it	eq
 8009390:	1aad      	subeq	r5, r5, r2
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	bf0c      	ite	eq
 8009398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800939c:	2500      	movne	r5, #0
 800939e:	4293      	cmp	r3, r2
 80093a0:	bfc4      	itt	gt
 80093a2:	1a9b      	subgt	r3, r3, r2
 80093a4:	18ed      	addgt	r5, r5, r3
 80093a6:	2600      	movs	r6, #0
 80093a8:	341a      	adds	r4, #26
 80093aa:	42b5      	cmp	r5, r6
 80093ac:	d11a      	bne.n	80093e4 <_printf_common+0xc8>
 80093ae:	2000      	movs	r0, #0
 80093b0:	e008      	b.n	80093c4 <_printf_common+0xa8>
 80093b2:	2301      	movs	r3, #1
 80093b4:	4652      	mov	r2, sl
 80093b6:	4649      	mov	r1, r9
 80093b8:	4638      	mov	r0, r7
 80093ba:	47c0      	blx	r8
 80093bc:	3001      	adds	r0, #1
 80093be:	d103      	bne.n	80093c8 <_printf_common+0xac>
 80093c0:	f04f 30ff 	mov.w	r0, #4294967295
 80093c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c8:	3501      	adds	r5, #1
 80093ca:	e7c6      	b.n	800935a <_printf_common+0x3e>
 80093cc:	18e1      	adds	r1, r4, r3
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	2030      	movs	r0, #48	; 0x30
 80093d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093d6:	4422      	add	r2, r4
 80093d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e0:	3302      	adds	r3, #2
 80093e2:	e7c7      	b.n	8009374 <_printf_common+0x58>
 80093e4:	2301      	movs	r3, #1
 80093e6:	4622      	mov	r2, r4
 80093e8:	4649      	mov	r1, r9
 80093ea:	4638      	mov	r0, r7
 80093ec:	47c0      	blx	r8
 80093ee:	3001      	adds	r0, #1
 80093f0:	d0e6      	beq.n	80093c0 <_printf_common+0xa4>
 80093f2:	3601      	adds	r6, #1
 80093f4:	e7d9      	b.n	80093aa <_printf_common+0x8e>
	...

080093f8 <_printf_i>:
 80093f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	4691      	mov	r9, r2
 8009400:	7e27      	ldrb	r7, [r4, #24]
 8009402:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009404:	2f78      	cmp	r7, #120	; 0x78
 8009406:	4680      	mov	r8, r0
 8009408:	469a      	mov	sl, r3
 800940a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800940e:	d807      	bhi.n	8009420 <_printf_i+0x28>
 8009410:	2f62      	cmp	r7, #98	; 0x62
 8009412:	d80a      	bhi.n	800942a <_printf_i+0x32>
 8009414:	2f00      	cmp	r7, #0
 8009416:	f000 80d8 	beq.w	80095ca <_printf_i+0x1d2>
 800941a:	2f58      	cmp	r7, #88	; 0x58
 800941c:	f000 80a3 	beq.w	8009566 <_printf_i+0x16e>
 8009420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009428:	e03a      	b.n	80094a0 <_printf_i+0xa8>
 800942a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800942e:	2b15      	cmp	r3, #21
 8009430:	d8f6      	bhi.n	8009420 <_printf_i+0x28>
 8009432:	a001      	add	r0, pc, #4	; (adr r0, 8009438 <_printf_i+0x40>)
 8009434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009438:	08009491 	.word	0x08009491
 800943c:	080094a5 	.word	0x080094a5
 8009440:	08009421 	.word	0x08009421
 8009444:	08009421 	.word	0x08009421
 8009448:	08009421 	.word	0x08009421
 800944c:	08009421 	.word	0x08009421
 8009450:	080094a5 	.word	0x080094a5
 8009454:	08009421 	.word	0x08009421
 8009458:	08009421 	.word	0x08009421
 800945c:	08009421 	.word	0x08009421
 8009460:	08009421 	.word	0x08009421
 8009464:	080095b1 	.word	0x080095b1
 8009468:	080094d5 	.word	0x080094d5
 800946c:	08009593 	.word	0x08009593
 8009470:	08009421 	.word	0x08009421
 8009474:	08009421 	.word	0x08009421
 8009478:	080095d3 	.word	0x080095d3
 800947c:	08009421 	.word	0x08009421
 8009480:	080094d5 	.word	0x080094d5
 8009484:	08009421 	.word	0x08009421
 8009488:	08009421 	.word	0x08009421
 800948c:	0800959b 	.word	0x0800959b
 8009490:	680b      	ldr	r3, [r1, #0]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	600a      	str	r2, [r1, #0]
 8009498:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800949c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0a3      	b.n	80095ec <_printf_i+0x1f4>
 80094a4:	6825      	ldr	r5, [r4, #0]
 80094a6:	6808      	ldr	r0, [r1, #0]
 80094a8:	062e      	lsls	r6, r5, #24
 80094aa:	f100 0304 	add.w	r3, r0, #4
 80094ae:	d50a      	bpl.n	80094c6 <_printf_i+0xce>
 80094b0:	6805      	ldr	r5, [r0, #0]
 80094b2:	600b      	str	r3, [r1, #0]
 80094b4:	2d00      	cmp	r5, #0
 80094b6:	da03      	bge.n	80094c0 <_printf_i+0xc8>
 80094b8:	232d      	movs	r3, #45	; 0x2d
 80094ba:	426d      	negs	r5, r5
 80094bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c0:	485e      	ldr	r0, [pc, #376]	; (800963c <_printf_i+0x244>)
 80094c2:	230a      	movs	r3, #10
 80094c4:	e019      	b.n	80094fa <_printf_i+0x102>
 80094c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094ca:	6805      	ldr	r5, [r0, #0]
 80094cc:	600b      	str	r3, [r1, #0]
 80094ce:	bf18      	it	ne
 80094d0:	b22d      	sxthne	r5, r5
 80094d2:	e7ef      	b.n	80094b4 <_printf_i+0xbc>
 80094d4:	680b      	ldr	r3, [r1, #0]
 80094d6:	6825      	ldr	r5, [r4, #0]
 80094d8:	1d18      	adds	r0, r3, #4
 80094da:	6008      	str	r0, [r1, #0]
 80094dc:	0628      	lsls	r0, r5, #24
 80094de:	d501      	bpl.n	80094e4 <_printf_i+0xec>
 80094e0:	681d      	ldr	r5, [r3, #0]
 80094e2:	e002      	b.n	80094ea <_printf_i+0xf2>
 80094e4:	0669      	lsls	r1, r5, #25
 80094e6:	d5fb      	bpl.n	80094e0 <_printf_i+0xe8>
 80094e8:	881d      	ldrh	r5, [r3, #0]
 80094ea:	4854      	ldr	r0, [pc, #336]	; (800963c <_printf_i+0x244>)
 80094ec:	2f6f      	cmp	r7, #111	; 0x6f
 80094ee:	bf0c      	ite	eq
 80094f0:	2308      	moveq	r3, #8
 80094f2:	230a      	movne	r3, #10
 80094f4:	2100      	movs	r1, #0
 80094f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094fa:	6866      	ldr	r6, [r4, #4]
 80094fc:	60a6      	str	r6, [r4, #8]
 80094fe:	2e00      	cmp	r6, #0
 8009500:	bfa2      	ittt	ge
 8009502:	6821      	ldrge	r1, [r4, #0]
 8009504:	f021 0104 	bicge.w	r1, r1, #4
 8009508:	6021      	strge	r1, [r4, #0]
 800950a:	b90d      	cbnz	r5, 8009510 <_printf_i+0x118>
 800950c:	2e00      	cmp	r6, #0
 800950e:	d04d      	beq.n	80095ac <_printf_i+0x1b4>
 8009510:	4616      	mov	r6, r2
 8009512:	fbb5 f1f3 	udiv	r1, r5, r3
 8009516:	fb03 5711 	mls	r7, r3, r1, r5
 800951a:	5dc7      	ldrb	r7, [r0, r7]
 800951c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009520:	462f      	mov	r7, r5
 8009522:	42bb      	cmp	r3, r7
 8009524:	460d      	mov	r5, r1
 8009526:	d9f4      	bls.n	8009512 <_printf_i+0x11a>
 8009528:	2b08      	cmp	r3, #8
 800952a:	d10b      	bne.n	8009544 <_printf_i+0x14c>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	07df      	lsls	r7, r3, #31
 8009530:	d508      	bpl.n	8009544 <_printf_i+0x14c>
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	4299      	cmp	r1, r3
 8009538:	bfde      	ittt	le
 800953a:	2330      	movle	r3, #48	; 0x30
 800953c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009544:	1b92      	subs	r2, r2, r6
 8009546:	6122      	str	r2, [r4, #16]
 8009548:	f8cd a000 	str.w	sl, [sp]
 800954c:	464b      	mov	r3, r9
 800954e:	aa03      	add	r2, sp, #12
 8009550:	4621      	mov	r1, r4
 8009552:	4640      	mov	r0, r8
 8009554:	f7ff fee2 	bl	800931c <_printf_common>
 8009558:	3001      	adds	r0, #1
 800955a:	d14c      	bne.n	80095f6 <_printf_i+0x1fe>
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	b004      	add	sp, #16
 8009562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009566:	4835      	ldr	r0, [pc, #212]	; (800963c <_printf_i+0x244>)
 8009568:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	680e      	ldr	r6, [r1, #0]
 8009570:	061f      	lsls	r7, r3, #24
 8009572:	f856 5b04 	ldr.w	r5, [r6], #4
 8009576:	600e      	str	r6, [r1, #0]
 8009578:	d514      	bpl.n	80095a4 <_printf_i+0x1ac>
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	bf44      	itt	mi
 800957e:	f043 0320 	orrmi.w	r3, r3, #32
 8009582:	6023      	strmi	r3, [r4, #0]
 8009584:	b91d      	cbnz	r5, 800958e <_printf_i+0x196>
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f023 0320 	bic.w	r3, r3, #32
 800958c:	6023      	str	r3, [r4, #0]
 800958e:	2310      	movs	r3, #16
 8009590:	e7b0      	b.n	80094f4 <_printf_i+0xfc>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f043 0320 	orr.w	r3, r3, #32
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	2378      	movs	r3, #120	; 0x78
 800959c:	4828      	ldr	r0, [pc, #160]	; (8009640 <_printf_i+0x248>)
 800959e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a2:	e7e3      	b.n	800956c <_printf_i+0x174>
 80095a4:	065e      	lsls	r6, r3, #25
 80095a6:	bf48      	it	mi
 80095a8:	b2ad      	uxthmi	r5, r5
 80095aa:	e7e6      	b.n	800957a <_printf_i+0x182>
 80095ac:	4616      	mov	r6, r2
 80095ae:	e7bb      	b.n	8009528 <_printf_i+0x130>
 80095b0:	680b      	ldr	r3, [r1, #0]
 80095b2:	6826      	ldr	r6, [r4, #0]
 80095b4:	6960      	ldr	r0, [r4, #20]
 80095b6:	1d1d      	adds	r5, r3, #4
 80095b8:	600d      	str	r5, [r1, #0]
 80095ba:	0635      	lsls	r5, r6, #24
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	d501      	bpl.n	80095c4 <_printf_i+0x1cc>
 80095c0:	6018      	str	r0, [r3, #0]
 80095c2:	e002      	b.n	80095ca <_printf_i+0x1d2>
 80095c4:	0671      	lsls	r1, r6, #25
 80095c6:	d5fb      	bpl.n	80095c0 <_printf_i+0x1c8>
 80095c8:	8018      	strh	r0, [r3, #0]
 80095ca:	2300      	movs	r3, #0
 80095cc:	6123      	str	r3, [r4, #16]
 80095ce:	4616      	mov	r6, r2
 80095d0:	e7ba      	b.n	8009548 <_printf_i+0x150>
 80095d2:	680b      	ldr	r3, [r1, #0]
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	600a      	str	r2, [r1, #0]
 80095d8:	681e      	ldr	r6, [r3, #0]
 80095da:	6862      	ldr	r2, [r4, #4]
 80095dc:	2100      	movs	r1, #0
 80095de:	4630      	mov	r0, r6
 80095e0:	f7f6 fdf6 	bl	80001d0 <memchr>
 80095e4:	b108      	cbz	r0, 80095ea <_printf_i+0x1f2>
 80095e6:	1b80      	subs	r0, r0, r6
 80095e8:	6060      	str	r0, [r4, #4]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	2300      	movs	r3, #0
 80095f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f4:	e7a8      	b.n	8009548 <_printf_i+0x150>
 80095f6:	6923      	ldr	r3, [r4, #16]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	47d0      	blx	sl
 8009600:	3001      	adds	r0, #1
 8009602:	d0ab      	beq.n	800955c <_printf_i+0x164>
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	079b      	lsls	r3, r3, #30
 8009608:	d413      	bmi.n	8009632 <_printf_i+0x23a>
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	4298      	cmp	r0, r3
 8009610:	bfb8      	it	lt
 8009612:	4618      	movlt	r0, r3
 8009614:	e7a4      	b.n	8009560 <_printf_i+0x168>
 8009616:	2301      	movs	r3, #1
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d09b      	beq.n	800955c <_printf_i+0x164>
 8009624:	3501      	adds	r5, #1
 8009626:	68e3      	ldr	r3, [r4, #12]
 8009628:	9903      	ldr	r1, [sp, #12]
 800962a:	1a5b      	subs	r3, r3, r1
 800962c:	42ab      	cmp	r3, r5
 800962e:	dcf2      	bgt.n	8009616 <_printf_i+0x21e>
 8009630:	e7eb      	b.n	800960a <_printf_i+0x212>
 8009632:	2500      	movs	r5, #0
 8009634:	f104 0619 	add.w	r6, r4, #25
 8009638:	e7f5      	b.n	8009626 <_printf_i+0x22e>
 800963a:	bf00      	nop
 800963c:	08009855 	.word	0x08009855
 8009640:	08009866 	.word	0x08009866

08009644 <__retarget_lock_acquire_recursive>:
 8009644:	4770      	bx	lr

08009646 <__retarget_lock_release_recursive>:
 8009646:	4770      	bx	lr

08009648 <memcpy>:
 8009648:	440a      	add	r2, r1
 800964a:	4291      	cmp	r1, r2
 800964c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009650:	d100      	bne.n	8009654 <memcpy+0xc>
 8009652:	4770      	bx	lr
 8009654:	b510      	push	{r4, lr}
 8009656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800965a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800965e:	4291      	cmp	r1, r2
 8009660:	d1f9      	bne.n	8009656 <memcpy+0xe>
 8009662:	bd10      	pop	{r4, pc}

08009664 <memmove>:
 8009664:	4288      	cmp	r0, r1
 8009666:	b510      	push	{r4, lr}
 8009668:	eb01 0402 	add.w	r4, r1, r2
 800966c:	d902      	bls.n	8009674 <memmove+0x10>
 800966e:	4284      	cmp	r4, r0
 8009670:	4623      	mov	r3, r4
 8009672:	d807      	bhi.n	8009684 <memmove+0x20>
 8009674:	1e43      	subs	r3, r0, #1
 8009676:	42a1      	cmp	r1, r4
 8009678:	d008      	beq.n	800968c <memmove+0x28>
 800967a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800967e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009682:	e7f8      	b.n	8009676 <memmove+0x12>
 8009684:	4402      	add	r2, r0
 8009686:	4601      	mov	r1, r0
 8009688:	428a      	cmp	r2, r1
 800968a:	d100      	bne.n	800968e <memmove+0x2a>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009696:	e7f7      	b.n	8009688 <memmove+0x24>

08009698 <_realloc_r>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	4607      	mov	r7, r0
 800969c:	4614      	mov	r4, r2
 800969e:	460e      	mov	r6, r1
 80096a0:	b921      	cbnz	r1, 80096ac <_realloc_r+0x14>
 80096a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096a6:	4611      	mov	r1, r2
 80096a8:	f7ff bc2c 	b.w	8008f04 <_malloc_r>
 80096ac:	b922      	cbnz	r2, 80096b8 <_realloc_r+0x20>
 80096ae:	f7ff fbd9 	bl	8008e64 <_free_r>
 80096b2:	4625      	mov	r5, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b8:	f000 f814 	bl	80096e4 <_malloc_usable_size_r>
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d20f      	bcs.n	80096e0 <_realloc_r+0x48>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7ff fc1e 	bl	8008f04 <_malloc_r>
 80096c8:	4605      	mov	r5, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f2      	beq.n	80096b4 <_realloc_r+0x1c>
 80096ce:	4631      	mov	r1, r6
 80096d0:	4622      	mov	r2, r4
 80096d2:	f7ff ffb9 	bl	8009648 <memcpy>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4638      	mov	r0, r7
 80096da:	f7ff fbc3 	bl	8008e64 <_free_r>
 80096de:	e7e9      	b.n	80096b4 <_realloc_r+0x1c>
 80096e0:	4635      	mov	r5, r6
 80096e2:	e7e7      	b.n	80096b4 <_realloc_r+0x1c>

080096e4 <_malloc_usable_size_r>:
 80096e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e8:	1f18      	subs	r0, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bfbc      	itt	lt
 80096ee:	580b      	ldrlt	r3, [r1, r0]
 80096f0:	18c0      	addlt	r0, r0, r3
 80096f2:	4770      	bx	lr
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <floor>:
 80096f8:	ec51 0b10 	vmov	r0, r1, d0
 80096fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009700:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009704:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009708:	2e13      	cmp	r6, #19
 800970a:	ee10 5a10 	vmov	r5, s0
 800970e:	ee10 8a10 	vmov	r8, s0
 8009712:	460c      	mov	r4, r1
 8009714:	dc32      	bgt.n	800977c <floor+0x84>
 8009716:	2e00      	cmp	r6, #0
 8009718:	da14      	bge.n	8009744 <floor+0x4c>
 800971a:	a333      	add	r3, pc, #204	; (adr r3, 80097e8 <floor+0xf0>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdac 	bl	800027c <__adddf3>
 8009724:	2200      	movs	r2, #0
 8009726:	2300      	movs	r3, #0
 8009728:	f7f7 f9ee 	bl	8000b08 <__aeabi_dcmpgt>
 800972c:	b138      	cbz	r0, 800973e <floor+0x46>
 800972e:	2c00      	cmp	r4, #0
 8009730:	da57      	bge.n	80097e2 <floor+0xea>
 8009732:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009736:	431d      	orrs	r5, r3
 8009738:	d001      	beq.n	800973e <floor+0x46>
 800973a:	4c2d      	ldr	r4, [pc, #180]	; (80097f0 <floor+0xf8>)
 800973c:	2500      	movs	r5, #0
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	e025      	b.n	8009790 <floor+0x98>
 8009744:	4f2b      	ldr	r7, [pc, #172]	; (80097f4 <floor+0xfc>)
 8009746:	4137      	asrs	r7, r6
 8009748:	ea01 0307 	and.w	r3, r1, r7
 800974c:	4303      	orrs	r3, r0
 800974e:	d01f      	beq.n	8009790 <floor+0x98>
 8009750:	a325      	add	r3, pc, #148	; (adr r3, 80097e8 <floor+0xf0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f6 fd91 	bl	800027c <__adddf3>
 800975a:	2200      	movs	r2, #0
 800975c:	2300      	movs	r3, #0
 800975e:	f7f7 f9d3 	bl	8000b08 <__aeabi_dcmpgt>
 8009762:	2800      	cmp	r0, #0
 8009764:	d0eb      	beq.n	800973e <floor+0x46>
 8009766:	2c00      	cmp	r4, #0
 8009768:	bfbe      	ittt	lt
 800976a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800976e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009772:	19a4      	addlt	r4, r4, r6
 8009774:	ea24 0407 	bic.w	r4, r4, r7
 8009778:	2500      	movs	r5, #0
 800977a:	e7e0      	b.n	800973e <floor+0x46>
 800977c:	2e33      	cmp	r6, #51	; 0x33
 800977e:	dd0b      	ble.n	8009798 <floor+0xa0>
 8009780:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009784:	d104      	bne.n	8009790 <floor+0x98>
 8009786:	ee10 2a10 	vmov	r2, s0
 800978a:	460b      	mov	r3, r1
 800978c:	f7f6 fd76 	bl	800027c <__adddf3>
 8009790:	ec41 0b10 	vmov	d0, r0, r1
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800979c:	f04f 33ff 	mov.w	r3, #4294967295
 80097a0:	fa23 f707 	lsr.w	r7, r3, r7
 80097a4:	4207      	tst	r7, r0
 80097a6:	d0f3      	beq.n	8009790 <floor+0x98>
 80097a8:	a30f      	add	r3, pc, #60	; (adr r3, 80097e8 <floor+0xf0>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fd65 	bl	800027c <__adddf3>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f7f7 f9a7 	bl	8000b08 <__aeabi_dcmpgt>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0bf      	beq.n	800973e <floor+0x46>
 80097be:	2c00      	cmp	r4, #0
 80097c0:	da02      	bge.n	80097c8 <floor+0xd0>
 80097c2:	2e14      	cmp	r6, #20
 80097c4:	d103      	bne.n	80097ce <floor+0xd6>
 80097c6:	3401      	adds	r4, #1
 80097c8:	ea25 0507 	bic.w	r5, r5, r7
 80097cc:	e7b7      	b.n	800973e <floor+0x46>
 80097ce:	2301      	movs	r3, #1
 80097d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097d4:	fa03 f606 	lsl.w	r6, r3, r6
 80097d8:	4435      	add	r5, r6
 80097da:	4545      	cmp	r5, r8
 80097dc:	bf38      	it	cc
 80097de:	18e4      	addcc	r4, r4, r3
 80097e0:	e7f2      	b.n	80097c8 <floor+0xd0>
 80097e2:	2500      	movs	r5, #0
 80097e4:	462c      	mov	r4, r5
 80097e6:	e7aa      	b.n	800973e <floor+0x46>
 80097e8:	8800759c 	.word	0x8800759c
 80097ec:	7e37e43c 	.word	0x7e37e43c
 80097f0:	bff00000 	.word	0xbff00000
 80097f4:	000fffff 	.word	0x000fffff

080097f8 <_init>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr

08009804 <_fini>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr
