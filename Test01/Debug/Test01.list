
Test01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d0c  08007d0c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d0c  08007d0c  00017d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000814  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a21e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a6c  00000000  00000000  0003a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  0003dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb8  00000000  00000000  0003ee68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a61  00000000  00000000  0003fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017091  00000000  00000000  00063881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb6bb  00000000  00000000  0007a912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145fcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048c0  00000000  00000000  00146020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cd0 	.word	0x08007cd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007cd0 	.word	0x08007cd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc53 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f841 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f93d 	bl	800074c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8a7 	bl	8000624 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8d3 	bl	8000680 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f901 	bl	80006e0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f006 ffe5 	bl	80074ac <MX_USB_HOST_Init>

  uint32_t *ODRD = (uint32_t*)((uint32_t)0x40020c00+0x14);
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <main+0x88>)
 80004e4:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t clock = 500;
 80004e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004ea:	607b      	str	r3, [r7, #4]
  uint8_t x = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]

  while (1)
  {

	  if(led_direction) *ODRD = (*ODRD & 0xFFFF0FFFUL) + (0x1000 << (x++)%4);
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0x8c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d010      	beq.n	800051c <main+0x5c>
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	1c59      	adds	r1, r3, #1
 8000506:	73f9      	strb	r1, [r7, #15]
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	fa01 f303 	lsl.w	r3, r1, r3
 8000514:	441a      	add	r2, r3
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	e00f      	b.n	800053c <main+0x7c>
	  else *ODRD = (*ODRD & 0xFFFF0FFFUL) + (0x8000 >> (x++)%4);
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	1c59      	adds	r1, r3, #1
 8000528:	73f9      	strb	r1, [r7, #15]
 800052a:	f003 0303 	and.w	r3, r3, #3
 800052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000532:	fa41 f303 	asr.w	r3, r1, r3
 8000536:	441a      	add	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	601a      	str	r2, [r3, #0]
	  HAL_Delay(clock);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 fc89 	bl	8000e54 <HAL_Delay>
//	  if(clock < 500 && state == 1) {
//		  clock += 50;
//	  } else state = 0;

	  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000542:	f006 ffd9 	bl	80074f8 <MX_USB_HOST_Process>
	  if(led_direction) *ODRD = (*ODRD & 0xFFFF0FFFUL) + (0x1000 << (x++)%4);
 8000546:	e7d3      	b.n	80004f0 <main+0x30>
 8000548:	40020c14 	.word	0x40020c14
 800054c:	200000ac 	.word	0x200000ac

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f007 fae6 	bl	8007b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a27      	ldr	r2, [pc, #156]	; (800061c <SystemClock_Config+0xcc>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a21      	ldr	r2, [pc, #132]	; (8000620 <SystemClock_Config+0xd0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005c0:	2308      	movs	r3, #8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fa94 	bl	8003b04 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005e2:	f000 f9b9 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2105      	movs	r1, #5
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fcf5 	bl	8003ff4 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000610:	f000 f9a2 	bl	8000958 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x50>)
 800062a:	4a13      	ldr	r2, [pc, #76]	; (8000678 <MX_I2C1_Init+0x54>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x50>)
 8000630:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_I2C1_Init+0x58>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_I2C1_Init+0x50>)
 8000642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_I2C1_Init+0x50>)
 8000662:	f002 fc6b 	bl	8002f3c <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f974 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000c0 	.word	0x200000c0
 8000678:	40005400 	.word	0x40005400
 800067c:	000186a0 	.word	0x000186a0

08000680 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_I2S3_Init+0x54>)
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <MX_I2S3_Init+0x58>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000698:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006a8:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <MX_I2S3_Init+0x5c>)
 80006aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2S3_Init+0x54>)
 80006c0:	f002 fd80 	bl	80031c4 <HAL_I2S_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006ca:	f000 f945 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000016c 	.word	0x2000016c
 80006d8:	40003c00 	.word	0x40003c00
 80006dc:	00017700 	.word	0x00017700

080006e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_SPI1_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <MX_SPI1_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_SPI1_Init+0x64>)
 800070c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000710:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_SPI1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_SPI1_Init+0x64>)
 800072c:	220a      	movs	r2, #10
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_SPI1_Init+0x64>)
 8000732:	f003 ff87 	bl	8004644 <HAL_SPI_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f90c 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000114 	.word	0x20000114
 8000748:	40013000 	.word	0x40013000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	4b76      	ldr	r3, [pc, #472]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a75      	ldr	r2, [pc, #468]	; (8000940 <MX_GPIO_Init+0x1f4>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b73      	ldr	r3, [pc, #460]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b6f      	ldr	r3, [pc, #444]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a6e      	ldr	r2, [pc, #440]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b6c      	ldr	r3, [pc, #432]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a67      	ldr	r2, [pc, #412]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b65      	ldr	r3, [pc, #404]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b61      	ldr	r3, [pc, #388]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a60      	ldr	r2, [pc, #384]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b5e      	ldr	r3, [pc, #376]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a59      	ldr	r2, [pc, #356]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b57      	ldr	r3, [pc, #348]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a52      	ldr	r2, [pc, #328]	; (8000940 <MX_GPIO_Init+0x1f4>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <MX_GPIO_Init+0x1f4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	484d      	ldr	r0, [pc, #308]	; (8000944 <MX_GPIO_Init+0x1f8>)
 8000810:	f000 fdf2 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2101      	movs	r1, #1
 8000818:	484b      	ldr	r0, [pc, #300]	; (8000948 <MX_GPIO_Init+0x1fc>)
 800081a:	f000 fded 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800081e:	2200      	movs	r2, #0
 8000820:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000824:	4849      	ldr	r0, [pc, #292]	; (800094c <MX_GPIO_Init+0x200>)
 8000826:	f000 fde7 	bl	80013f8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4840      	ldr	r0, [pc, #256]	; (8000944 <MX_GPIO_Init+0x1f8>)
 8000842:	f000 fc3d 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000846:	2301      	movs	r3, #1
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	483a      	ldr	r0, [pc, #232]	; (8000948 <MX_GPIO_Init+0x1fc>)
 800085e:	f000 fc2f 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000862:	2308      	movs	r3, #8
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000872:	2305      	movs	r3, #5
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4832      	ldr	r0, [pc, #200]	; (8000948 <MX_GPIO_Init+0x1fc>)
 800087e:	f000 fc1f 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	482e      	ldr	r0, [pc, #184]	; (8000950 <MX_GPIO_Init+0x204>)
 8000898:	f000 fc12 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800089c:	2304      	movs	r3, #4
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4829      	ldr	r0, [pc, #164]	; (8000954 <MX_GPIO_Init+0x208>)
 80008b0:	f000 fc06 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c6:	2305      	movs	r3, #5
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4820      	ldr	r0, [pc, #128]	; (8000954 <MX_GPIO_Init+0x208>)
 80008d2:	f000 fbf5 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4817      	ldr	r0, [pc, #92]	; (800094c <MX_GPIO_Init+0x200>)
 80008f0:	f000 fbe6 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f4:	2320      	movs	r3, #32
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4811      	ldr	r0, [pc, #68]	; (800094c <MX_GPIO_Init+0x200>)
 8000908:	f000 fbda 	bl	80010c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000910:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_GPIO_Init+0x1f8>)
 8000922:	f000 fbcd 	bl	80010c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2006      	movs	r0, #6
 800092c:	f000 fb91 	bl	8001052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000930:	2006      	movs	r0, #6
 8000932:	f000 fbaa 	bl	800108a <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40021000 	.word	0x40021000
 8000948:	40020800 	.word	0x40020800
 800094c:	40020c00 	.word	0x40020c00
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a2:	2007      	movs	r0, #7
 80009a4:	f000 fb4a 	bl	800103c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_I2C_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12c      	bne.n	8000a30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f8:	2312      	movs	r3, #18
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a04:	2304      	movs	r3, #4
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <HAL_I2C_MspInit+0x8c>)
 8000a10:	f000 fb56 	bl	80010c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_I2C_MspInit+0x88>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_I2S_MspInit+0xf0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d15a      	bne.n	8000b2a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a74:	2301      	movs	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a78:	23c0      	movs	r3, #192	; 0xc0
 8000a7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 fc9d 	bl	80043c4 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a90:	f7ff ff62 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a26      	ldr	r2, [pc, #152]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a1f      	ldr	r2, [pc, #124]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a18      	ldr	r2, [pc, #96]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_I2S_MspInit+0xf4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af8:	2306      	movs	r3, #6
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <HAL_I2S_MspInit+0xf8>)
 8000b04:	f000 fadc 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b08:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_I2S_MspInit+0xfc>)
 8000b26:	f000 facb 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3738      	adds	r7, #56	; 0x38
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40003c00 	.word	0x40003c00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020800 	.word	0x40020800

08000b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_SPI_MspInit+0x84>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d12b      	bne.n	8000bbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_SPI_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x8c>)
 8000bba:	f000 fa81 	bl	80010c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8f8 	bl	8000e14 <HAL_IncTick>
  if(led_direction) HAL_IncTick();
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <SysTick_Handler+0x1c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SysTick_Handler+0x16>
 8000c2e:	f000 f8f1 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000ac 	.word	0x200000ac

08000c3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fbf3 	bl	800142c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
	led_direction ^= 0x1;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x28>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x28>)
 8000c64:	701a      	strb	r2, [r3, #0]
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000ac 	.word	0x200000ac

08000c78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <OTG_FS_IRQHandler+0x10>)
 8000c7e:	f000 fe57 	bl	8001930 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000590 	.word	0x20000590

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f006 fefe 	bl	8007abc <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20020000 	.word	0x20020000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	200000b0 	.word	0x200000b0
 8000cf4:	200008a8 	.word	0x200008a8

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d46:	f7ff ffd7 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f006 febd 	bl	8007ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fbb7 	bl	80004c0 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d60:	08007d14 	.word	0x08007d14
  ldr r2, =_sbss
 8000d64:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d68:	200008a4 	.word	0x200008a4

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f94f 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fdde 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f967 	bl	80010a6 <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f92f 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	200001b4 	.word	0x200001b4

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	200001b4 	.word	0x200001b4

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e16b      	b.n	80013b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010dc:	2201      	movs	r2, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	f040 815a 	bne.w	80013ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b01      	cmp	r3, #1
 8001104:	d005      	beq.n	8001112 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110e:	2b02      	cmp	r3, #2
 8001110:	d130      	bne.n	8001174 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001148:	2201      	movs	r2, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 0201 	and.w	r2, r3, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b03      	cmp	r3, #3
 800117e:	d017      	beq.n	80011b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d123      	bne.n	8001204 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	69b9      	ldr	r1, [r7, #24]
 8001200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0203 	and.w	r2, r3, #3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b4 	beq.w	80013ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b60      	ldr	r3, [pc, #384]	; (80013cc <HAL_GPIO_Init+0x30c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a5f      	ldr	r2, [pc, #380]	; (80013cc <HAL_GPIO_Init+0x30c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_GPIO_Init+0x30c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001262:	4a5b      	ldr	r2, [pc, #364]	; (80013d0 <HAL_GPIO_Init+0x310>)
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	220f      	movs	r2, #15
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a52      	ldr	r2, [pc, #328]	; (80013d4 <HAL_GPIO_Init+0x314>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d02b      	beq.n	80012e6 <HAL_GPIO_Init+0x226>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <HAL_GPIO_Init+0x318>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d025      	beq.n	80012e2 <HAL_GPIO_Init+0x222>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a50      	ldr	r2, [pc, #320]	; (80013dc <HAL_GPIO_Init+0x31c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d01f      	beq.n	80012de <HAL_GPIO_Init+0x21e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a4f      	ldr	r2, [pc, #316]	; (80013e0 <HAL_GPIO_Init+0x320>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x21a>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4e      	ldr	r2, [pc, #312]	; (80013e4 <HAL_GPIO_Init+0x324>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x216>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <HAL_GPIO_Init+0x328>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x212>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4c      	ldr	r2, [pc, #304]	; (80013ec <HAL_GPIO_Init+0x32c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x20e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <HAL_GPIO_Init+0x330>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x20a>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e00e      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00c      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012ce:	2306      	movs	r3, #6
 80012d0:	e00a      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012d6:	2304      	movs	r3, #4
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x228>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x310>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001306:	4b3b      	ldr	r3, [pc, #236]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132a:	4a32      	ldr	r2, [pc, #200]	; (80013f4 <HAL_GPIO_Init+0x334>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001354:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <HAL_GPIO_Init+0x334>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_GPIO_Init+0x334>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a12      	ldr	r2, [pc, #72]	; (80013f4 <HAL_GPIO_Init+0x334>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f ae90 	bls.w	80010dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40021400 	.word	0x40021400
 80013ec:	40021800 	.word	0x40021800
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40013c00 	.word	0x40013c00

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	695a      	ldr	r2, [r3, #20]
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fbfe 	bl	8000c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800145c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145e:	b08f      	sub	sp, #60	; 0x3c
 8001460:	af0a      	add	r7, sp, #40	; 0x28
 8001462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e054      	b.n	8001518 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d106      	bne.n	800148e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f006 f86d 	bl	8007568 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2203      	movs	r2, #3
 8001492:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d102      	bne.n	80014a8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 f9c4 	bl	800483a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	687e      	ldr	r6, [r7, #4]
 80014ba:	466d      	mov	r5, sp
 80014bc:	f106 0410 	add.w	r4, r6, #16
 80014c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80014d0:	1d33      	adds	r3, r6, #4
 80014d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d4:	6838      	ldr	r0, [r7, #0]
 80014d6:	f003 f93e 	bl	8004756 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2101      	movs	r1, #1
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f9bb 	bl	800485c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	687e      	ldr	r6, [r7, #4]
 80014ee:	466d      	mov	r5, sp
 80014f0:	f106 0410 	add.w	r4, r6, #16
 80014f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001500:	e885 0003 	stmia.w	r5, {r0, r1}
 8001504:	1d33      	adds	r3, r6, #4
 8001506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f003 fb21 	bl	8004b50 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001520 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af04      	add	r7, sp, #16
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	460b      	mov	r3, r1
 8001534:	70bb      	strb	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_HCD_HC_Init+0x28>
 8001544:	2302      	movs	r3, #2
 8001546:	e076      	b.n	8001636 <HAL_HCD_HC_Init+0x116>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	fb01 f303 	mul.w	r3, r1, r3
 800155a:	4413      	add	r3, r2
 800155c:	333d      	adds	r3, #61	; 0x3d
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001562:	78fb      	ldrb	r3, [r7, #3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	3338      	adds	r3, #56	; 0x38
 8001570:	787a      	ldrb	r2, [r7, #1]
 8001572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3340      	adds	r3, #64	; 0x40
 8001582:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001584:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3339      	adds	r3, #57	; 0x39
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	212c      	movs	r1, #44	; 0x2c
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	333f      	adds	r3, #63	; 0x3f
 80015a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	78ba      	ldrb	r2, [r7, #2]
 80015b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015b4:	b2d0      	uxtb	r0, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	212c      	movs	r1, #44	; 0x2c
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	333a      	adds	r3, #58	; 0x3a
 80015c2:	4602      	mov	r2, r0
 80015c4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da09      	bge.n	80015e2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	212c      	movs	r1, #44	; 0x2c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	333b      	adds	r3, #59	; 0x3b
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
 80015e0:	e008      	b.n	80015f4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	212c      	movs	r1, #44	; 0x2c
 80015e8:	fb01 f303 	mul.w	r3, r1, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	333b      	adds	r3, #59	; 0x3b
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	212c      	movs	r1, #44	; 0x2c
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	333c      	adds	r3, #60	; 0x3c
 8001602:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001606:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	787c      	ldrb	r4, [r7, #1]
 800160e:	78ba      	ldrb	r2, [r7, #2]
 8001610:	78f9      	ldrb	r1, [r7, #3]
 8001612:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4623      	mov	r3, r4
 8001624:	f003 fc0e 	bl	8004e44 <USB_HC_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800164a:	2300      	movs	r3, #0
 800164c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_HCD_HC_Halt+0x1e>
 8001658:	2302      	movs	r3, #2
 800165a:	e00f      	b.n	800167c <HAL_HCD_HC_Halt+0x3e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fe4a 	bl	8005306 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4603      	mov	r3, r0
 8001694:	70fb      	strb	r3, [r7, #3]
 8001696:	460b      	mov	r3, r1
 8001698:	70bb      	strb	r3, [r7, #2]
 800169a:	4613      	mov	r3, r2
 800169c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	212c      	movs	r1, #44	; 0x2c
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	333b      	adds	r3, #59	; 0x3b
 80016ac:	78ba      	ldrb	r2, [r7, #2]
 80016ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	212c      	movs	r1, #44	; 0x2c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	333f      	adds	r3, #63	; 0x3f
 80016be:	787a      	ldrb	r2, [r7, #1]
 80016c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016c2:	7c3b      	ldrb	r3, [r7, #16]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d112      	bne.n	80016ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	333d      	adds	r3, #61	; 0x3d
 80016e8:	7f3a      	ldrb	r2, [r7, #28]
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e008      	b.n	8001700 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	3342      	adds	r3, #66	; 0x42
 80016fc:	2202      	movs	r2, #2
 80016fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b03      	cmp	r3, #3
 8001704:	f200 80c6 	bhi.w	8001894 <HAL_HCD_HC_SubmitRequest+0x210>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001721 	.word	0x08001721
 8001714:	08001881 	.word	0x08001881
 8001718:	08001785 	.word	0x08001785
 800171c:	08001803 	.word	0x08001803
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001720:	7c3b      	ldrb	r3, [r7, #16]
 8001722:	2b01      	cmp	r3, #1
 8001724:	f040 80b8 	bne.w	8001898 <HAL_HCD_HC_SubmitRequest+0x214>
 8001728:	78bb      	ldrb	r3, [r7, #2]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 80b4 	bne.w	8001898 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001730:	8b3b      	ldrh	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212c      	movs	r1, #44	; 0x2c
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	4413      	add	r3, r2
 8001742:	3355      	adds	r3, #85	; 0x55
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	212c      	movs	r1, #44	; 0x2c
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	4413      	add	r3, r2
 8001754:	3355      	adds	r3, #85	; 0x55
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	212c      	movs	r1, #44	; 0x2c
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	3342      	adds	r3, #66	; 0x42
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800176e:	e093      	b.n	8001898 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	212c      	movs	r1, #44	; 0x2c
 8001776:	fb01 f303 	mul.w	r3, r1, r3
 800177a:	4413      	add	r3, r2
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	2202      	movs	r2, #2
 8001780:	701a      	strb	r2, [r3, #0]
      break;
 8001782:	e089      	b.n	8001898 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001784:	78bb      	ldrb	r3, [r7, #2]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11d      	bne.n	80017c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	212c      	movs	r1, #44	; 0x2c
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3355      	adds	r3, #85	; 0x55
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	3342      	adds	r3, #66	; 0x42
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017b0:	e073      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	212c      	movs	r1, #44	; 0x2c
 80017b8:	fb01 f303 	mul.w	r3, r1, r3
 80017bc:	4413      	add	r3, r2
 80017be:	3342      	adds	r3, #66	; 0x42
 80017c0:	2202      	movs	r2, #2
 80017c2:	701a      	strb	r2, [r3, #0]
      break;
 80017c4:	e069      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	212c      	movs	r1, #44	; 0x2c
 80017cc:	fb01 f303 	mul.w	r3, r1, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	3354      	adds	r3, #84	; 0x54
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
      break;
 80017ec:	e055      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3342      	adds	r3, #66	; 0x42
 80017fc:	2202      	movs	r2, #2
 80017fe:	701a      	strb	r2, [r3, #0]
      break;
 8001800:	e04b      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001802:	78bb      	ldrb	r3, [r7, #2]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11d      	bne.n	8001844 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	212c      	movs	r1, #44	; 0x2c
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3355      	adds	r3, #85	; 0x55
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3342      	adds	r3, #66	; 0x42
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800182e:	e034      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	3342      	adds	r3, #66	; 0x42
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
      break;
 8001842:	e02a      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	3354      	adds	r3, #84	; 0x54
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3342      	adds	r3, #66	; 0x42
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e016      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e00c      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
      break;
 8001892:	e002      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001894:	bf00      	nop
 8001896:	e000      	b.n	800189a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001898:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	212c      	movs	r1, #44	; 0x2c
 80018a0:	fb01 f303 	mul.w	r3, r1, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	3344      	adds	r3, #68	; 0x44
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	8b3a      	ldrh	r2, [r7, #24]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	202c      	movs	r0, #44	; 0x2c
 80018b4:	fb00 f303 	mul.w	r3, r0, r3
 80018b8:	440b      	add	r3, r1
 80018ba:	334c      	adds	r3, #76	; 0x4c
 80018bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3360      	adds	r3, #96	; 0x60
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	3350      	adds	r3, #80	; 0x50
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	212c      	movs	r1, #44	; 0x2c
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	3339      	adds	r3, #57	; 0x39
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3361      	adds	r3, #97	; 0x61
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	222c      	movs	r2, #44	; 0x2c
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	3338      	adds	r3, #56	; 0x38
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	18d1      	adds	r1, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	f003 fb9e 	bl	8005060 <USB_HC_StartXfer>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop

08001930 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f8c1 	bl	8004ace <USB_GetMode>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	f040 80f6 	bne.w	8001b40 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 f8a5 	bl	8004aa8 <USB_ReadInterrupts>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80ec 	beq.w	8001b3e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f89c 	bl	8004aa8 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800197a:	d104      	bne.n	8001986 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001984:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f003 f88c 	bl	8004aa8 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800199a:	d104      	bne.n	80019a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f87c 	bl	8004aa8 <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ba:	d104      	bne.n	80019c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 f86c 	bl	8004aa8 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d103      	bne.n	80019e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 f85e 	bl	8004aa8 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f6:	d11c      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a12:	2110      	movs	r1, #16
 8001a14:	6938      	ldr	r0, [r7, #16]
 8001a16:	f002 ff6d 	bl	80048f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a1a:	6938      	ldr	r0, [r7, #16]
 8001a1c:	f002 ff8e 	bl	800493c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f946 	bl	8004cb8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f005 fe19 	bl	8007664 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f836 	bl	8004aa8 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a46:	d102      	bne.n	8001a4e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f001 fa03 	bl	8002e54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f003 f828 	bl	8004aa8 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d106      	bne.n	8001a70 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f005 fde2 	bl	800762c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f817 	bl	8004aa8 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d101      	bne.n	8001a88 <HAL_HCD_IRQHandler+0x158>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_HCD_IRQHandler+0x15a>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0210 	bic.w	r2, r2, #16
 8001a9c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f001 f906 	bl	8002cb0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0210 	orr.w	r2, r2, #16
 8001ab2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fff5 	bl	8004aa8 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ac8:	d13a      	bne.n	8001b40 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f003 fc08 	bl	80052e4 <USB_HC_ReadInterrupt>
 8001ad4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e025      	b.n	8001b28 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b06:	d106      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8ab 	bl	8001c6a <HCD_HC_IN_IRQHandler>
 8001b14:	e005      	b.n	8001b22 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fcc6 	bl	80024ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3d4      	bcc.n	8001adc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	615a      	str	r2, [r3, #20]
 8001b3c:	e000      	b.n	8001b40 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b3e:	bf00      	nop
    }
  }
}
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_HCD_Start+0x16>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e013      	b.n	8001b84 <HAL_HCD_Start+0x3e>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 f908 	bl	8004d80 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f002 fe4f 	bl	8004818 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_HCD_Stop+0x16>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e00d      	b.n	8001bbe <HAL_HCD_Stop+0x32>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f003 fd02 	bl	80055b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 f8aa 	bl	8004d2c <USB_ResetPort>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3360      	adds	r3, #96	; 0x60
 8001bfc:	781b      	ldrb	r3, [r3, #0]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3350      	adds	r3, #80	; 0x50
 8001c24:	681b      	ldr	r3, [r3, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f8ee 	bl	8004e20 <USB_GetCurrentFrame>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 f8c9 	bl	8004df2 <USB_GetHostSpeed>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d119      	bne.n	8001cce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2304      	movs	r3, #4
 8001caa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	0151      	lsls	r1, r2, #5
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	440a      	add	r2, r1
 8001cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	60d3      	str	r3, [r2, #12]
 8001ccc:	e101      	b.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce4:	d12b      	bne.n	8001d3e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	015a      	lsls	r2, r3, #5
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4413      	add	r3, r2
 8001cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	212c      	movs	r1, #44	; 0x2c
 8001d00:	fb01 f303 	mul.w	r3, r1, r3
 8001d04:	4413      	add	r3, r2
 8001d06:	3361      	adds	r3, #97	; 0x61
 8001d08:	2207      	movs	r2, #7
 8001d0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	0151      	lsls	r1, r2, #5
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	440a      	add	r2, r1
 8001d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 fae5 	bl	8005306 <USB_HC_Halt>
 8001d3c:	e0c9      	b.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d109      	bne.n	8001d68 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	2320      	movs	r3, #32
 8001d64:	6093      	str	r3, [r2, #8]
 8001d66:	e0b4      	b.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	015a      	lsls	r2, r3, #5
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4413      	add	r3, r2
 8001d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d133      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	015a      	lsls	r2, r3, #5
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	0151      	lsls	r1, r2, #5
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	440a      	add	r2, r1
 8001d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3361      	adds	r3, #97	; 0x61
 8001dac:	2205      	movs	r2, #5
 8001dae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	461a      	mov	r2, r3
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 fa91 	bl	8005306 <USB_HC_Halt>
 8001de4:	e075      	b.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfc:	d134      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	0151      	lsls	r1, r2, #5
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	440a      	add	r2, r1
 8001e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	212c      	movs	r1, #44	; 0x2c
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3361      	adds	r3, #97	; 0x61
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2310      	movs	r3, #16
 8001e40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fa50 	bl	8005306 <USB_HC_Halt>
 8001e66:	e034      	b.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7a:	2b80      	cmp	r3, #128	; 0x80
 8001e7c:	d129      	bne.n	8001ed2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	0151      	lsls	r1, r2, #5
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	440a      	add	r2, r1
 8001e94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3361      	adds	r3, #97	; 0x61
 8001eac:	2206      	movs	r2, #6
 8001eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fa23 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee8:	d122      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	0151      	lsls	r1, r2, #5
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	440a      	add	r2, r1
 8001f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f9f6 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	461a      	mov	r2, r3
 8001f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f2e:	e2ba      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 811b 	bne.w	800217e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d019      	beq.n	8001f84 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	212c      	movs	r1, #44	; 0x2c
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3348      	adds	r3, #72	; 0x48
 8001f5e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	0159      	lsls	r1, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f72:	1ad2      	subs	r2, r2, r3
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	202c      	movs	r0, #44	; 0x2c
 8001f7a:	fb00 f303 	mul.w	r3, r0, r3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3350      	adds	r3, #80	; 0x50
 8001f82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3361      	adds	r3, #97	; 0x61
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	335c      	adds	r3, #92	; 0x5c
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	333f      	adds	r3, #63	; 0x3f
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	212c      	movs	r1, #44	; 0x2c
 8001fd4:	fb01 f303 	mul.w	r3, r1, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	333f      	adds	r3, #63	; 0x3f
 8001fdc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d121      	bne.n	8002026 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	0151      	lsls	r1, r2, #5
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	440a      	add	r2, r1
 8001ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f003 f97a 	bl	8005306 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	461a      	mov	r2, r3
 8002020:	2310      	movs	r3, #16
 8002022:	6093      	str	r3, [r2, #8]
 8002024:	e066      	b.n	80020f4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	333f      	adds	r3, #63	; 0x3f
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d127      	bne.n	800208a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002058:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	b2d9      	uxtb	r1, r3
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	202c      	movs	r0, #44	; 0x2c
 8002076:	fb00 f303 	mul.w	r3, r0, r3
 800207a:	4413      	add	r3, r2
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f005 fafc 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002088:	e034      	b.n	80020f4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	212c      	movs	r1, #44	; 0x2c
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	4413      	add	r3, r2
 8002096:	333f      	adds	r3, #63	; 0x3f
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d12a      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3360      	adds	r3, #96	; 0x60
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	3354      	adds	r3, #84	; 0x54
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2d8      	uxtb	r0, r3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	212c      	movs	r1, #44	; 0x2c
 80020cc:	fb01 f303 	mul.w	r3, r1, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	3354      	adds	r3, #84	; 0x54
 80020d4:	4602      	mov	r2, r0
 80020d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	b2d9      	uxtb	r1, r3
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	202c      	movs	r0, #44	; 0x2c
 80020e2:	fb00 f303 	mul.w	r3, r0, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	3360      	adds	r3, #96	; 0x60
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 fac6 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d12b      	bne.n	8002154 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3348      	adds	r3, #72	; 0x48
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	fb00 f202 	mul.w	r2, r0, r2
 8002116:	440a      	add	r2, r1
 8002118:	3240      	adds	r2, #64	; 0x40
 800211a:	8812      	ldrh	r2, [r2, #0]
 800211c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 81be 	beq.w	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	212c      	movs	r1, #44	; 0x2c
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4413      	add	r3, r2
 8002136:	3354      	adds	r3, #84	; 0x54
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2d8      	uxtb	r0, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	212c      	movs	r1, #44	; 0x2c
 8002146:	fb01 f303 	mul.w	r3, r1, r3
 800214a:	4413      	add	r3, r2
 800214c:	3354      	adds	r3, #84	; 0x54
 800214e:	4602      	mov	r2, r0
 8002150:	701a      	strb	r2, [r3, #0]
}
 8002152:	e1a8      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	212c      	movs	r1, #44	; 0x2c
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	4413      	add	r3, r2
 8002160:	3354      	adds	r3, #84	; 0x54
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f083 0301 	eor.w	r3, r3, #1
 8002168:	b2d8      	uxtb	r0, r3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3354      	adds	r3, #84	; 0x54
 8002178:	4602      	mov	r2, r0
 800217a:	701a      	strb	r2, [r3, #0]
}
 800217c:	e193      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	f040 8106 	bne.w	80023a2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	0151      	lsls	r1, r2, #5
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	440a      	add	r2, r1
 80021ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021b0:	f023 0302 	bic.w	r3, r3, #2
 80021b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3361      	adds	r3, #97	; 0x61
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d109      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3360      	adds	r3, #96	; 0x60
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
 80021dc:	e0c9      	b.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	3361      	adds	r3, #97	; 0x61
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d109      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	2205      	movs	r2, #5
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e0b5      	b.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3361      	adds	r3, #97	; 0x61
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d009      	beq.n	800222e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3361      	adds	r3, #97	; 0x61
 8002228:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800222a:	2b08      	cmp	r3, #8
 800222c:	d150      	bne.n	80022d0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	335c      	adds	r3, #92	; 0x5c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	202c      	movs	r0, #44	; 0x2c
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	440b      	add	r3, r1
 800224c:	335c      	adds	r3, #92	; 0x5c
 800224e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	335c      	adds	r3, #92	; 0x5c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d912      	bls.n	800228a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	335c      	adds	r3, #92	; 0x5c
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	3360      	adds	r3, #96	; 0x60
 8002284:	2204      	movs	r2, #4
 8002286:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002288:	e073      	b.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022b2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ba:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ce:	e050      	b.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3361      	adds	r3, #97	; 0x61
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d122      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002314:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e023      	b.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	212c      	movs	r1, #44	; 0x2c
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	3361      	adds	r3, #97	; 0x61
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b07      	cmp	r3, #7
 800233c:	d119      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	335c      	adds	r3, #92	; 0x5c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	202c      	movs	r0, #44	; 0x2c
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	440b      	add	r3, r1
 800235c:	335c      	adds	r3, #92	; 0x5c
 800235e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	2204      	movs	r2, #4
 8002370:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	2302      	movs	r3, #2
 8002382:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b2d9      	uxtb	r1, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	202c      	movs	r0, #44	; 0x2c
 800238e:	fb00 f303 	mul.w	r3, r0, r3
 8002392:	4413      	add	r3, r2
 8002394:	3360      	adds	r3, #96	; 0x60
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f005 f970 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023a0:	e081      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d176      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	333f      	adds	r3, #63	; 0x3f
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d121      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	212c      	movs	r1, #44	; 0x2c
 80023d2:	fb01 f303 	mul.w	r3, r1, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	335c      	adds	r3, #92	; 0x5c
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f002 ff7c 	bl	8005306 <USB_HC_Halt>
 800240e:	e041      	b.n	8002494 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	333f      	adds	r3, #63	; 0x3f
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d009      	beq.n	8002438 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333f      	adds	r3, #63	; 0x3f
 8002432:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002434:	2b02      	cmp	r3, #2
 8002436:	d12d      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	335c      	adds	r3, #92	; 0x5c
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d120      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3361      	adds	r3, #97	; 0x61
 8002460:	2203      	movs	r2, #3
 8002462:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	0151      	lsls	r1, r2, #5
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	440a      	add	r2, r1
 800247a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f002 ff39 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2310      	movs	r3, #16
 80024a4:	6093      	str	r3, [r2, #8]
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b088      	sub	sp, #32
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	460b      	mov	r3, r1
 80024b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	015a      	lsls	r2, r3, #5
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d119      	bne.n	8002512 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	2304      	movs	r3, #4
 80024ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002510:	e3ca      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d13e      	bne.n	80025a6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2320      	movs	r3, #32
 8002538:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 83ac 	bne.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333d      	adds	r3, #61	; 0x3d
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	; 0x60
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	0151      	lsls	r1, r2, #5
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	440a      	add	r2, r1
 800258a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 feb1 	bl	8005306 <USB_HC_Halt>
}
 80025a4:	e380      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d122      	bne.n	8002604 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fe8c 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002600:	6093      	str	r3, [r2, #8]
}
 8002602:	e351      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d150      	bne.n	80026bc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d111      	bne.n	8002666 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	333d      	adds	r3, #61	; 0x3d
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fe38 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	461a      	mov	r2, r3
 80026a4:	2301      	movs	r3, #1
 80026a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3361      	adds	r3, #97	; 0x61
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
}
 80026ba:	e2f5      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d13c      	bne.n	800274c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3361      	adds	r3, #97	; 0x61
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	333d      	adds	r3, #61	; 0x3d
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	335c      	adds	r3, #92	; 0x5c
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	0151      	lsls	r1, r2, #5
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	440a      	add	r2, r1
 800271e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002722:	f043 0302 	orr.w	r3, r3, #2
 8002726:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fde7 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	461a      	mov	r2, r3
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	6093      	str	r3, [r2, #8]
}
 800274a:	e2ad      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	d12a      	bne.n	80027b8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2308      	movs	r3, #8
 8002772:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	0151      	lsls	r1, r2, #5
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	440a      	add	r2, r1
 800278a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fdb1 	bl	8005306 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3361      	adds	r3, #97	; 0x61
 80027b2:	2205      	movs	r2, #5
 80027b4:	701a      	strb	r2, [r3, #0]
}
 80027b6:	e277      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d150      	bne.n	8002870 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3361      	adds	r3, #97	; 0x61
 80027ee:	2203      	movs	r2, #3
 80027f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333d      	adds	r3, #61	; 0x3d
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d112      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	333c      	adds	r3, #60	; 0x3c
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	0151      	lsls	r1, r2, #5
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	440a      	add	r2, r1
 8002842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002846:	f043 0302 	orr.w	r3, r3, #2
 800284a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fd55 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2310      	movs	r3, #16
 800286c:	6093      	str	r3, [r2, #8]
}
 800286e:	e21b      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	d174      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	3361      	adds	r3, #97	; 0x61
 800289c:	2206      	movs	r2, #6
 800289e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	0151      	lsls	r1, r2, #5
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	440a      	add	r2, r1
 80028b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fd1b 	bl	8005306 <USB_HC_Halt>
 80028d0:	e044      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	335c      	adds	r3, #92	; 0x5c
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	202c      	movs	r0, #44	; 0x2c
 80028ea:	fb00 f303 	mul.w	r3, r0, r3
 80028ee:	440b      	add	r3, r1
 80028f0:	335c      	adds	r3, #92	; 0x5c
 80028f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	335c      	adds	r3, #92	; 0x5c
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d920      	bls.n	800294a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	335c      	adds	r3, #92	; 0x5c
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3360      	adds	r3, #96	; 0x60
 8002928:	2204      	movs	r2, #4
 800292a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	b2d9      	uxtb	r1, r3
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	202c      	movs	r0, #44	; 0x2c
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	4413      	add	r3, r2
 800293c:	3360      	adds	r3, #96	; 0x60
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f004 fe9c 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002948:	e008      	b.n	800295c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3360      	adds	r3, #96	; 0x60
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	6093      	str	r3, [r2, #8]
}
 800296e:	e19b      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d134      	bne.n	80029f2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	0151      	lsls	r1, r2, #5
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	440a      	add	r2, r1
 800299e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fca7 	bl	8005306 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2310      	movs	r3, #16
 80029c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3361      	adds	r3, #97	; 0x61
 80029ec:	2208      	movs	r2, #8
 80029ee:	701a      	strb	r2, [r3, #0]
}
 80029f0:	e15a      	b.n	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	f040 814f 	bne.w	8002ca8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	015a      	lsls	r2, r3, #5
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	0151      	lsls	r1, r2, #5
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	440a      	add	r2, r1
 8002a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a24:	f023 0302 	bic.w	r3, r3, #2
 8002a28:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3361      	adds	r3, #97	; 0x61
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d17d      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	333f      	adds	r3, #63	; 0x3f
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d00a      	beq.n	8002a7a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	333f      	adds	r3, #63	; 0x3f
 8002a72:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	f040 8100 	bne.w	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3355      	adds	r3, #85	; 0x55
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	f083 0301 	eor.w	r3, r3, #1
 8002a96:	b2d8      	uxtb	r0, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3355      	adds	r3, #85	; 0x55
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f040 80e3 	bne.w	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	334c      	adds	r3, #76	; 0x4c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80d8 	beq.w	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	334c      	adds	r3, #76	; 0x4c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	202c      	movs	r0, #44	; 0x2c
 8002ae0:	fb00 f202 	mul.w	r2, r0, r2
 8002ae4:	440a      	add	r2, r1
 8002ae6:	3240      	adds	r2, #64	; 0x40
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	3b01      	subs	r3, #1
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	fb00 f202 	mul.w	r2, r0, r2
 8002af8:	440a      	add	r2, r1
 8002afa:	3240      	adds	r2, #64	; 0x40
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 80b5 	beq.w	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3355      	adds	r3, #85	; 0x55
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3355      	adds	r3, #85	; 0x55
 8002b34:	4602      	mov	r2, r0
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e09f      	b.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3361      	adds	r3, #97	; 0x61
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d109      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	212c      	movs	r1, #44	; 0x2c
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3360      	adds	r3, #96	; 0x60
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e08b      	b.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3361      	adds	r3, #97	; 0x61
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d109      	bne.n	8002b8a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3360      	adds	r3, #96	; 0x60
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e077      	b.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3361      	adds	r3, #97	; 0x61
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d109      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	2205      	movs	r2, #5
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e063      	b.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3361      	adds	r3, #97	; 0x61
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d009      	beq.n	8002bda <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3361      	adds	r3, #97	; 0x61
 8002bd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d14f      	bne.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	335c      	adds	r3, #92	; 0x5c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335c      	adds	r3, #92	; 0x5c
 8002bfa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	335c      	adds	r3, #92	; 0x5c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d912      	bls.n	8002c36 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	335c      	adds	r3, #92	; 0x5c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	212c      	movs	r1, #44	; 0x2c
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3360      	adds	r3, #96	; 0x60
 8002c30:	2204      	movs	r2, #4
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e021      	b.n	8002c7a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3360      	adds	r3, #96	; 0x60
 8002c44:	2202      	movs	r2, #2
 8002c46:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c5e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	461a      	mov	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2302      	movs	r3, #2
 8002c8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	b2d9      	uxtb	r1, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	202c      	movs	r0, #44	; 0x2c
 8002c96:	fb00 f303 	mul.w	r3, r0, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3360      	adds	r3, #96	; 0x60
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f004 fcec 	bl	8007680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ca8:	bf00      	nop
 8002caa:	3720      	adds	r7, #32
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	0c5b      	lsrs	r3, r3, #17
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ce4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d004      	beq.n	8002cf6 <HCD_RXQLVL_IRQHandler+0x46>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	f000 80a9 	beq.w	8002e46 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cf4:	e0aa      	b.n	8002e4c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a6 	beq.w	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3344      	adds	r3, #68	; 0x44
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 809b 	beq.w	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3350      	adds	r3, #80	; 0x50
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	441a      	add	r2, r3
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	202c      	movs	r0, #44	; 0x2c
 8002d2e:	fb00 f303 	mul.w	r3, r0, r3
 8002d32:	440b      	add	r3, r1
 8002d34:	334c      	adds	r3, #76	; 0x4c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d87a      	bhi.n	8002e32 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3344      	adds	r3, #68	; 0x44
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	b292      	uxth	r2, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	f001 fe4f 	bl	80049f8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	441a      	add	r2, r3
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	202c      	movs	r0, #44	; 0x2c
 8002d74:	fb00 f303 	mul.w	r3, r0, r3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3350      	adds	r3, #80	; 0x50
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	441a      	add	r2, r3
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	202c      	movs	r0, #44	; 0x2c
 8002d98:	fb00 f303 	mul.w	r3, r0, r3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3350      	adds	r3, #80	; 0x50
 8002da0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	0cdb      	lsrs	r3, r3, #19
 8002db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3340      	adds	r3, #64	; 0x40
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d13c      	bne.n	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d039      	beq.n	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3354      	adds	r3, #84	; 0x54
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	f083 0301 	eor.w	r3, r3, #1
 8002e1c:	b2d8      	uxtb	r0, r3
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3354      	adds	r3, #84	; 0x54
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	701a      	strb	r2, [r3, #0]
      break;
 8002e30:	e00b      	b.n	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	2204      	movs	r2, #4
 8002e42:	701a      	strb	r2, [r3, #0]
      break;
 8002e44:	e001      	b.n	8002e4a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e4a:	bf00      	nop
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d10b      	bne.n	8002ea4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f004 fbd6 	bl	8007648 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d132      	bne.n	8002f14 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d126      	bne.n	8002f0e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d113      	bne.n	8002ef0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ed2:	d106      	bne.n	8002ee2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2102      	movs	r1, #2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f001 feec 	bl	8004cb8 <USB_InitFSLSPClkSel>
 8002ee0:	e011      	b.n	8002f06 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fee5 	bl	8004cb8 <USB_InitFSLSPClkSel>
 8002eee:	e00a      	b.n	8002f06 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002efe:	461a      	mov	r2, r3
 8002f00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f04:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f004 fbc8 	bl	800769c <HAL_HCD_PortEnabled_Callback>
 8002f0c:	e002      	b.n	8002f14 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f004 fbd2 	bl	80076b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d103      	bne.n	8002f26 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e12b      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fd26 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f001 f9fc 	bl	800439c <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a81      	ldr	r2, [pc, #516]	; (80031b0 <HAL_I2C_Init+0x274>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d807      	bhi.n	8002fc0 <HAL_I2C_Init+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a80      	ldr	r2, [pc, #512]	; (80031b4 <HAL_I2C_Init+0x278>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	bf94      	ite	ls
 8002fb8:	2301      	movls	r3, #1
 8002fba:	2300      	movhi	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e006      	b.n	8002fce <HAL_I2C_Init+0x92>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a7d      	ldr	r2, [pc, #500]	; (80031b8 <HAL_I2C_Init+0x27c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf94      	ite	ls
 8002fc8:	2301      	movls	r3, #1
 8002fca:	2300      	movhi	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e0e7      	b.n	80031a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4a78      	ldr	r2, [pc, #480]	; (80031bc <HAL_I2C_Init+0x280>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9b      	lsrs	r3, r3, #18
 8002fe0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a6a      	ldr	r2, [pc, #424]	; (80031b0 <HAL_I2C_Init+0x274>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d802      	bhi.n	8003010 <HAL_I2C_Init+0xd4>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	e009      	b.n	8003024 <HAL_I2C_Init+0xe8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	4a69      	ldr	r2, [pc, #420]	; (80031c0 <HAL_I2C_Init+0x284>)
 800301c:	fba2 2303 	umull	r2, r3, r2, r3
 8003020:	099b      	lsrs	r3, r3, #6
 8003022:	3301      	adds	r3, #1
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003036:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	495c      	ldr	r1, [pc, #368]	; (80031b0 <HAL_I2C_Init+0x274>)
 8003040:	428b      	cmp	r3, r1
 8003042:	d819      	bhi.n	8003078 <HAL_I2C_Init+0x13c>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e59      	subs	r1, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003052:	1c59      	adds	r1, r3, #1
 8003054:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_I2C_Init+0x138>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e59      	subs	r1, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fbb1 f3f3 	udiv	r3, r1, r3
 800306c:	3301      	adds	r3, #1
 800306e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003072:	e051      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003074:	2304      	movs	r3, #4
 8003076:	e04f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d111      	bne.n	80030a4 <HAL_I2C_Init+0x168>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e58      	subs	r0, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	440b      	add	r3, r1
 800308e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003092:	3301      	adds	r3, #1
 8003094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf0c      	ite	eq
 800309c:	2301      	moveq	r3, #1
 800309e:	2300      	movne	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e012      	b.n	80030ca <HAL_I2C_Init+0x18e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	0099      	lsls	r1, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf0c      	ite	eq
 80030c4:	2301      	moveq	r3, #1
 80030c6:	2300      	movne	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Init+0x196>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e022      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10e      	bne.n	80030f8 <HAL_I2C_Init+0x1bc>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e58      	subs	r0, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	440b      	add	r3, r1
 80030e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f6:	e00f      	b.n	8003118 <HAL_I2C_Init+0x1dc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	0099      	lsls	r1, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	6809      	ldr	r1, [r1, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69da      	ldr	r2, [r3, #28]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6911      	ldr	r1, [r2, #16]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68d2      	ldr	r2, [r2, #12]
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	000186a0 	.word	0x000186a0
 80031b4:	001e847f 	.word	0x001e847f
 80031b8:	003d08ff 	.word	0x003d08ff
 80031bc:	431bde83 	.word	0x431bde83
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e128      	b.n	8003428 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a90      	ldr	r2, [pc, #576]	; (8003430 <HAL_I2S_Init+0x26c>)
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7fd fc27 	bl	8000a44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800320c:	f023 030f 	bic.w	r3, r3, #15
 8003210:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2202      	movs	r2, #2
 8003218:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d060      	beq.n	80032e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800322a:	2310      	movs	r3, #16
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e001      	b.n	8003234 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003230:	2320      	movs	r3, #32
 8003232:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b20      	cmp	r3, #32
 800323a:	d802      	bhi.n	8003242 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003242:	2001      	movs	r0, #1
 8003244:	f001 f9a0 	bl	8004588 <HAL_RCCEx_GetPeriphCLKFreq>
 8003248:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d125      	bne.n	80032a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	fbb2 f2f3 	udiv	r2, r2, r3
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	3305      	adds	r3, #5
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	e01f      	b.n	80032be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	fbb2 f2f3 	udiv	r2, r2, r3
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	461a      	mov	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	3305      	adds	r3, #5
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e00e      	b.n	80032be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ba:	3305      	adds	r3, #5
 80032bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_I2S_Init+0x270>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	021b      	lsls	r3, r3, #8
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e003      	b.n	80032ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80032e4:	2302      	movs	r3, #2
 80032e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d902      	bls.n	80032f8 <HAL_I2S_Init+0x134>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2bff      	cmp	r3, #255	; 0xff
 80032f6:	d907      	bls.n	8003308 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e08f      	b.n	8003428 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	ea42 0103 	orr.w	r1, r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	430a      	orrs	r2, r1
 800331a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003326:	f023 030f 	bic.w	r3, r3, #15
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6851      	ldr	r1, [r2, #4]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6892      	ldr	r2, [r2, #8]
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68d2      	ldr	r2, [r2, #12]
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6992      	ldr	r2, [r2, #24]
 800333e:	430a      	orrs	r2, r1
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d161      	bne.n	8003418 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_I2S_Init+0x274>)
 8003358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_I2S_Init+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_I2S_Init+0x1a4>
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_I2S_Init+0x27c>)
 8003366:	e001      	b.n	800336c <HAL_I2S_Init+0x1a8>
 8003368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	4932      	ldr	r1, [pc, #200]	; (800343c <HAL_I2S_Init+0x278>)
 8003374:	428a      	cmp	r2, r1
 8003376:	d101      	bne.n	800337c <HAL_I2S_Init+0x1b8>
 8003378:	4a31      	ldr	r2, [pc, #196]	; (8003440 <HAL_I2S_Init+0x27c>)
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x1bc>
 800337c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003380:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003384:	f023 030f 	bic.w	r3, r3, #15
 8003388:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a2b      	ldr	r2, [pc, #172]	; (800343c <HAL_I2S_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d101      	bne.n	8003398 <HAL_I2S_Init+0x1d4>
 8003394:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <HAL_I2S_Init+0x27c>)
 8003396:	e001      	b.n	800339c <HAL_I2S_Init+0x1d8>
 8003398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800339c:	2202      	movs	r2, #2
 800339e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <HAL_I2S_Init+0x278>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_I2S_Init+0x1ea>
 80033aa:	4b25      	ldr	r3, [pc, #148]	; (8003440 <HAL_I2S_Init+0x27c>)
 80033ac:	e001      	b.n	80033b2 <HAL_I2S_Init+0x1ee>
 80033ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033be:	d003      	beq.n	80033c8 <HAL_I2S_Init+0x204>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80033c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e001      	b.n	80033d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033de:	4313      	orrs	r3, r2
 80033e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003400:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_I2S_Init+0x278>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_I2S_Init+0x24c>
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <HAL_I2S_Init+0x27c>)
 800340e:	e001      	b.n	8003414 <HAL_I2S_Init+0x250>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003414:	897a      	ldrh	r2, [r7, #10]
 8003416:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	0800353b 	.word	0x0800353b
 8003434:	cccccccd 	.word	0xcccccccd
 8003438:	08003651 	.word	0x08003651
 800343c:	40003800 	.word	0x40003800
 8003440:	40003400 	.word	0x40003400

08003444 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c9a      	adds	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffb8 	bl	8003444 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	b292      	uxth	r2, r2
 80034f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10e      	bne.n	8003532 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003522:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff93 	bl	8003458 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b04      	cmp	r3, #4
 8003554:	d13a      	bne.n	80035cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d109      	bne.n	8003574 <I2S_IRQHandler+0x3a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356a:	2b40      	cmp	r3, #64	; 0x40
 800356c:	d102      	bne.n	8003574 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffb4 	bl	80034dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d126      	bne.n	80035cc <I2S_IRQHandler+0x92>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b20      	cmp	r3, #32
 800358a:	d11f      	bne.n	80035cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800359a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f043 0202 	orr.w	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff50 	bl	800346c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d136      	bne.n	8003646 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d109      	bne.n	80035f6 <I2S_IRQHandler+0xbc>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d102      	bne.n	80035f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff45 	bl	8003480 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d122      	bne.n	8003646 <I2S_IRQHandler+0x10c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	d11b      	bne.n	8003646 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800361c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f043 0204 	orr.w	r2, r3, #4
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ff13 	bl	800346c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4aa2      	ldr	r2, [pc, #648]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800366a:	4ba2      	ldr	r3, [pc, #648]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800366c:	e001      	b.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a9b      	ldr	r2, [pc, #620]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003688:	4b9a      	ldr	r3, [pc, #616]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800368a:	e001      	b.n	8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800368c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369c:	d004      	beq.n	80036a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 8099 	bne.w	80037da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d107      	bne.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f925 	bl	800390c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d107      	bne.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f9c8 	bl	8003a6c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d13a      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d035      	beq.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a7e      	ldr	r2, [pc, #504]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80036fa:	4b7e      	ldr	r3, [pc, #504]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036fc:	e001      	b.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80036fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4979      	ldr	r1, [pc, #484]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370a:	428b      	cmp	r3, r1
 800370c:	d101      	bne.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800370e:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003710:	e001      	b.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003716:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe88 	bl	800346c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b08      	cmp	r3, #8
 8003764:	f040 80be 	bne.w	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80b8 	beq.w	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003782:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003790:	e001      	b.n	8003796 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003792:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4954      	ldr	r1, [pc, #336]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379e:	428b      	cmp	r3, r1
 80037a0:	d101      	bne.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037a2:	4b54      	ldr	r3, [pc, #336]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a4:	e001      	b.n	80037aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80037a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f043 0204 	orr.w	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff fe4a 	bl	800346c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d8:	e084      	b.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d107      	bne.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8be 	bl	8003970 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d107      	bne.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8fd 	bl	8003a08 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d12f      	bne.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02a      	beq.n	8003878 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003830:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2e      	ldr	r2, [pc, #184]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800383c:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800383e:	e001      	b.n	8003844 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4929      	ldr	r1, [pc, #164]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d101      	bne.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003852:	e001      	b.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800385c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0202 	orr.w	r2, r3, #2
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff fdfa 	bl	800346c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b08      	cmp	r3, #8
 8003880:	d131      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02c      	beq.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003896:	4b17      	ldr	r3, [pc, #92]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003898:	e001      	b.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800389a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4912      	ldr	r1, [pc, #72]	; (80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a6:	428b      	cmp	r3, r1
 80038a8:	d101      	bne.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ac:	e001      	b.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80038ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	f043 0204 	orr.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff fdc5 	bl	800346c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038e2:	e000      	b.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038e4:	bf00      	nop
}
 80038e6:	bf00      	nop
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40003800 	.word	0x40003800
 80038f4:	40003400 	.word	0x40003400

080038f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c99      	adds	r1, r3, #2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6251      	str	r1, [r2, #36]	; 0x24
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d113      	bne.n	8003966 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ffc9 	bl	80038f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c99      	adds	r1, r3, #2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6251      	str	r1, [r2, #36]	; 0x24
 8003982:	8819      	ldrh	r1, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <I2SEx_TxISR_I2SExt+0x90>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <I2SEx_TxISR_I2SExt+0x22>
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <I2SEx_TxISR_I2SExt+0x94>)
 8003990:	e001      	b.n	8003996 <I2SEx_TxISR_I2SExt+0x26>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	460a      	mov	r2, r1
 8003998:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d121      	bne.n	80039f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <I2SEx_TxISR_I2SExt+0x90>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <I2SEx_TxISR_I2SExt+0x50>
 80039bc:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <I2SEx_TxISR_I2SExt+0x94>)
 80039be:	e001      	b.n	80039c4 <I2SEx_TxISR_I2SExt+0x54>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	490d      	ldr	r1, [pc, #52]	; (8003a00 <I2SEx_TxISR_I2SExt+0x90>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d101      	bne.n	80039d4 <I2SEx_TxISR_I2SExt+0x64>
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <I2SEx_TxISR_I2SExt+0x94>)
 80039d2:	e001      	b.n	80039d8 <I2SEx_TxISR_I2SExt+0x68>
 80039d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff81 	bl	80038f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40003800 	.word	0x40003800
 8003a04:	40003400 	.word	0x40003400

08003a08 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68d8      	ldr	r0, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	1c99      	adds	r1, r3, #2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a20:	b282      	uxth	r2, r0
 8003a22:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d113      	bne.n	8003a64 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff4a 	bl	80038f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <I2SEx_RxISR_I2SExt+0x90>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <I2SEx_RxISR_I2SExt+0x16>
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <I2SEx_RxISR_I2SExt+0x94>)
 8003a80:	e001      	b.n	8003a86 <I2SEx_RxISR_I2SExt+0x1a>
 8003a82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a86:	68d8      	ldr	r0, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	1c99      	adds	r1, r3, #2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a92:	b282      	uxth	r2, r0
 8003a94:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d121      	bne.n	8003af2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <I2SEx_RxISR_I2SExt+0x90>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <I2SEx_RxISR_I2SExt+0x50>
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <I2SEx_RxISR_I2SExt+0x94>)
 8003aba:	e001      	b.n	8003ac0 <I2SEx_RxISR_I2SExt+0x54>
 8003abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	490d      	ldr	r1, [pc, #52]	; (8003afc <I2SEx_RxISR_I2SExt+0x90>)
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	d101      	bne.n	8003ad0 <I2SEx_RxISR_I2SExt+0x64>
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <I2SEx_RxISR_I2SExt+0x94>)
 8003ace:	e001      	b.n	8003ad4 <I2SEx_RxISR_I2SExt+0x68>
 8003ad0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7ff ff03 	bl	80038f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40003800 	.word	0x40003800
 8003b00:	40003400 	.word	0x40003400

08003b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e264      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d075      	beq.n	8003c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b22:	4ba3      	ldr	r3, [pc, #652]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d00c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b2e:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d112      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3a:	4b9d      	ldr	r3, [pc, #628]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b46:	d10b      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b48:	4b99      	ldr	r3, [pc, #612]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d05b      	beq.n	8003c0c <HAL_RCC_OscConfig+0x108>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d157      	bne.n	8003c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e23f      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d106      	bne.n	8003b78 <HAL_RCC_OscConfig+0x74>
 8003b6a:	4b91      	ldr	r3, [pc, #580]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a90      	ldr	r2, [pc, #576]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	e01d      	b.n	8003bb4 <HAL_RCC_OscConfig+0xb0>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x98>
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a8a      	ldr	r2, [pc, #552]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	4b84      	ldr	r3, [pc, #528]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a83      	ldr	r2, [pc, #524]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a80      	ldr	r2, [pc, #512]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fd f93e 	bl	8000e3c <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fd f93a 	bl	8000e3c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e204      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xc0>
 8003be2:	e014      	b.n	8003c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fd f92a 	bl	8000e3c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fd f926 	bl	8000e3c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e1f0      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0xe8>
 8003c0a:	e000      	b.n	8003c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d063      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00b      	beq.n	8003c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c26:	4b62      	ldr	r3, [pc, #392]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d11c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b5f      	ldr	r3, [pc, #380]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d116      	bne.n	8003c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	4b5c      	ldr	r3, [pc, #368]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_RCC_OscConfig+0x152>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d001      	beq.n	8003c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1c4      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c56:	4b56      	ldr	r3, [pc, #344]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4952      	ldr	r1, [pc, #328]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	e03a      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c74:	4b4f      	ldr	r3, [pc, #316]	; (8003db4 <HAL_RCC_OscConfig+0x2b0>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f8df 	bl	8000e3c <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fd f8db 	bl	8000e3c <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e1a5      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b43      	ldr	r3, [pc, #268]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4940      	ldr	r1, [pc, #256]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]
 8003cb4:	e015      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb6:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x2b0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd f8be 	bl	8000e3c <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fd f8ba 	bl	8000e3c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e184      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f0      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d030      	beq.n	8003d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cf6:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCC_OscConfig+0x2b4>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f89e 	bl	8000e3c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fd f89a 	bl	8000e3c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e164      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d16:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x200>
 8003d22:	e015      	b.n	8003d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x2b4>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f887 	bl	8000e3c <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d32:	f7fd f883 	bl	8000e3c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e14d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80a0 	beq.w	8003e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10f      	bne.n	8003d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a0e      	ldr	r2, [pc, #56]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	60bb      	str	r3, [r7, #8]
 8003d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x2b8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d121      	bne.n	8003dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_RCC_OscConfig+0x2b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_RCC_OscConfig+0x2b8>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da6:	f7fd f849 	bl	8000e3c <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	e011      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2ce>
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	42470000 	.word	0x42470000
 8003db8:	42470e80 	.word	0x42470e80
 8003dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fd f83c 	bl	8000e3c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e106      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd2:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <HAL_RCC_OscConfig+0x4e4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0f0      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d106      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	4a80      	ldr	r2, [pc, #512]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6713      	str	r3, [r2, #112]	; 0x70
 8003df2:	e01c      	b.n	8003e2e <HAL_RCC_OscConfig+0x32a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x312>
 8003dfc:	4b7b      	ldr	r3, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a7a      	ldr	r2, [pc, #488]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	4b78      	ldr	r3, [pc, #480]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a77      	ldr	r2, [pc, #476]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	e00b      	b.n	8003e2e <HAL_RCC_OscConfig+0x32a>
 8003e16:	4b75      	ldr	r3, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a74      	ldr	r2, [pc, #464]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	4b72      	ldr	r3, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a71      	ldr	r2, [pc, #452]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e36:	f7fd f801 	bl	8000e3c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fc fffd 	bl	8000e3c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0c5      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	4b65      	ldr	r3, [pc, #404]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ee      	beq.n	8003e3e <HAL_RCC_OscConfig+0x33a>
 8003e60:	e014      	b.n	8003e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e62:	f7fc ffeb 	bl	8000e3c <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e68:	e00a      	b.n	8003e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6a:	f7fc ffe7 	bl	8000e3c <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e0af      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ee      	bne.n	8003e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d105      	bne.n	8003e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4a55      	ldr	r2, [pc, #340]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 809b 	beq.w	8003fde <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ea8:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d05c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d141      	bne.n	8003f40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_RCC_OscConfig+0x4ec>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fc ffbb 	bl	8000e3c <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fc ffb7 	bl	8000e3c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e081      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	019b      	lsls	r3, r3, #6
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	3b01      	subs	r3, #1
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f12:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <HAL_RCC_OscConfig+0x4ec>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fc ff90 	bl	8000e3c <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fc ff8c 	bl	8000e3c <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e056      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x41c>
 8003f3e:	e04e      	b.n	8003fde <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fc ff79 	bl	8000e3c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fc ff75 	bl	8000e3c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e03f      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x44a>
 8003f6c:	e037      	b.n	8003fde <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e032      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <HAL_RCC_OscConfig+0x4e8>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d028      	beq.n	8003fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d121      	bne.n	8003fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d11a      	bne.n	8003fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fb0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d111      	bne.n	8003fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	42470060 	.word	0x42470060

08003ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0cc      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004008:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d90c      	bls.n	8004030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004016:	4b65      	ldr	r3, [pc, #404]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	4a58      	ldr	r2, [pc, #352]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a52      	ldr	r2, [pc, #328]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800406a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	4313      	orrs	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d044      	beq.n	8004114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d119      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c2:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e067      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d2:	4b37      	ldr	r3, [pc, #220]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4934      	ldr	r1, [pc, #208]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e4:	f7fc feaa 	bl	8000e3c <HAL_GetTick>
 80040e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	e00a      	b.n	8004102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ec:	f7fc fea6 	bl	8000e3c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 020c 	and.w	r2, r3, #12
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	429a      	cmp	r2, r3
 8004112:	d1eb      	bne.n	80040ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004114:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d20c      	bcs.n	800413c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490a      	ldr	r1, [pc, #40]	; (80041b4 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc fe0a 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08007cec 	.word	0x08007cec
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000004 	.word	0x20000004

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	2300      	movs	r3, #0
 80041d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d8:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f003 030c 	and.w	r3, r3, #12
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d00d      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x40>
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	f200 80bd 	bhi.w	8004364 <HAL_RCC_GetSysClockFreq+0x1a4>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x3a>
 80041f2:	e0b7      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041f6:	60bb      	str	r3, [r7, #8]
       break;
 80041f8:	e0b7      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fa:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e0b4      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004200:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04d      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b58      	ldr	r3, [pc, #352]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	ea02 0800 	and.w	r8, r2, r0
 800422e:	ea03 0901 	and.w	r9, r3, r1
 8004232:	4640      	mov	r0, r8
 8004234:	4649      	mov	r1, r9
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	014b      	lsls	r3, r1, #5
 8004240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004244:	0142      	lsls	r2, r0, #5
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	ebb0 0008 	subs.w	r0, r0, r8
 800424e:	eb61 0109 	sbc.w	r1, r1, r9
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	018b      	lsls	r3, r1, #6
 800425c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004260:	0182      	lsls	r2, r0, #6
 8004262:	1a12      	subs	r2, r2, r0
 8004264:	eb63 0301 	sbc.w	r3, r3, r1
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	00d9      	lsls	r1, r3, #3
 8004272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004276:	00d0      	lsls	r0, r2, #3
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	eb12 0208 	adds.w	r2, r2, r8
 8004280:	eb43 0309 	adc.w	r3, r3, r9
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	0259      	lsls	r1, r3, #9
 800428e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004292:	0250      	lsls	r0, r2, #9
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	f7fb ff90 	bl	80001c8 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4613      	mov	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e04a      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	ea02 0400 	and.w	r4, r2, r0
 80042ca:	ea03 0501 	and.w	r5, r3, r1
 80042ce:	4620      	mov	r0, r4
 80042d0:	4629      	mov	r1, r5
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	014b      	lsls	r3, r1, #5
 80042dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042e0:	0142      	lsls	r2, r0, #5
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	1b00      	subs	r0, r0, r4
 80042e8:	eb61 0105 	sbc.w	r1, r1, r5
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	018b      	lsls	r3, r1, #6
 80042f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042fa:	0182      	lsls	r2, r0, #6
 80042fc:	1a12      	subs	r2, r2, r0
 80042fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	00d9      	lsls	r1, r3, #3
 800430c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004310:	00d0      	lsls	r0, r2, #3
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	1912      	adds	r2, r2, r4
 8004318:	eb45 0303 	adc.w	r3, r5, r3
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0299      	lsls	r1, r3, #10
 8004326:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800432a:	0290      	lsls	r0, r2, #10
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	461a      	mov	r2, r3
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f7fb ff44 	bl	80001c8 <__aeabi_uldivmod>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4613      	mov	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	0c1b      	lsrs	r3, r3, #16
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	3301      	adds	r3, #1
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	60bb      	str	r3, [r7, #8]
      break;
 8004362:	e002      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004366:	60bb      	str	r3, [r7, #8]
      break;
 8004368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800436a:	68bb      	ldr	r3, [r7, #8]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004376:	bf00      	nop
 8004378:	40023800 	.word	0x40023800
 800437c:	00f42400 	.word	0x00f42400
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b03      	ldr	r3, [pc, #12]	; (8004398 <HAL_RCC_GetHCLKFreq+0x14>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000000 	.word	0x20000000

0800439c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043a0:	f7ff fff0 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a4:	4602      	mov	r2, r0
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	0a9b      	lsrs	r3, r3, #10
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	4903      	ldr	r1, [pc, #12]	; (80043c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40023800 	.word	0x40023800
 80043c0:	08007cfc 	.word	0x08007cfc

080043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d035      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043ec:	4b62      	ldr	r3, [pc, #392]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043f2:	f7fc fd23 	bl	8000e3c <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043fa:	f7fc fd1f 	bl	8000e3c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e0b0      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800440c:	4b5b      	ldr	r3, [pc, #364]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	019a      	lsls	r2, r3, #6
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	4955      	ldr	r1, [pc, #340]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800442c:	4b52      	ldr	r3, [pc, #328]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004432:	f7fc fd03 	bl	8000e3c <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004438:	e008      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800443a:	f7fc fcff 	bl	8000e3c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e090      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800444c:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8083 	beq.w	800456c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a43      	ldr	r2, [pc, #268]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004482:	4b3f      	ldr	r3, [pc, #252]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3e      	ldr	r2, [pc, #248]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448e:	f7fc fcd5 	bl	8000e3c <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004496:	f7fc fcd1 	bl	8000e3c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e062      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a8:	4b35      	ldr	r3, [pc, #212]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b4:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02f      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044dc:	4b29      	ldr	r3, [pc, #164]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	4b28      	ldr	r3, [pc, #160]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044e8:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d114      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fc fc9f 	bl	8000e3c <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00a      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fc fc9b 	bl	8000e3c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e02a      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0ee      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004530:	d10d      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004546:	490d      	ldr	r1, [pc, #52]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]
 800454c:	e005      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004558:	6093      	str	r3, [r2, #8]
 800455a:	4b08      	ldr	r3, [pc, #32]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004566:	4905      	ldr	r1, [pc, #20]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004568:	4313      	orrs	r3, r2
 800456a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	42470068 	.word	0x42470068
 800457c:	40023800 	.word	0x40023800
 8004580:	40007000 	.word	0x40007000
 8004584:	42470e40 	.word	0x42470e40

08004588 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d13e      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045a6:	4b23      	ldr	r3, [pc, #140]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d12f      	bne.n	800461c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045be:	617b      	str	r3, [r7, #20]
          break;
 80045c0:	e02f      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d108      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e007      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045ea:	4a15      	ldr	r2, [pc, #84]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	0f1b      	lsrs	r3, r3, #28
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
          break;
 800461a:	e002      	b.n	8004622 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
          break;
 8004620:	bf00      	nop
        }
      }
      break;
 8004622:	bf00      	nop
    }
  }
  return frequency;
 8004624:	697b      	ldr	r3, [r7, #20]
}
 8004626:	4618      	mov	r0, r3
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00bb8000 	.word	0x00bb8000
 800463c:	007a1200 	.word	0x007a1200
 8004640:	00f42400 	.word	0x00f42400

08004644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07b      	b.n	800474e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004666:	d009      	beq.n	800467c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	61da      	str	r2, [r3, #28]
 800466e:	e005      	b.n	800467c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fa54 	bl	8000b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	ea42 0103 	orr.w	r1, r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	0c1b      	lsrs	r3, r3, #16
 800471a:	f003 0104 	and.w	r1, r3, #4
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0210 	and.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004756:	b084      	sub	sp, #16
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	f107 001c 	add.w	r0, r7, #28
 8004764:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	2b01      	cmp	r3, #1
 800476c:	d122      	bne.n	80047b4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f99f 	bl	8004aec <USB_CoreReset>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e01a      	b.n	80047ea <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f993 	bl	8004aec <USB_CoreReset>
 80047c6:	4603      	mov	r3, r0
 80047c8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
 80047dc:	e005      	b.n	80047ea <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10b      	bne.n	8004808 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f043 0206 	orr.w	r2, r3, #6
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004814:	b004      	add	sp, #16
 8004816:	4770      	bx	lr

08004818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d115      	bne.n	80048aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800488a:	2001      	movs	r0, #1
 800488c:	f7fc fae2 	bl	8000e54 <HAL_Delay>
      ms++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f919 	bl	8004ace <USB_GetMode>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d01e      	beq.n	80048e0 <USB_SetCurrentMode+0x84>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b31      	cmp	r3, #49	; 0x31
 80048a6:	d9f0      	bls.n	800488a <USB_SetCurrentMode+0x2e>
 80048a8:	e01a      	b.n	80048e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d115      	bne.n	80048dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fc fac9 	bl	8000e54 <HAL_Delay>
      ms++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f900 	bl	8004ace <USB_GetMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <USB_SetCurrentMode+0x84>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b31      	cmp	r3, #49	; 0x31
 80048d8:	d9f0      	bls.n	80048bc <USB_SetCurrentMode+0x60>
 80048da:	e001      	b.n	80048e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e005      	b.n	80048ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b32      	cmp	r3, #50	; 0x32
 80048e4:	d101      	bne.n	80048ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	019b      	lsls	r3, r3, #6
 8004906:	f043 0220 	orr.w	r2, r3, #32
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <USB_FlushTxFifo+0x44>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e006      	b.n	800492c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b20      	cmp	r3, #32
 8004928:	d0f1      	beq.n	800490e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	00030d40 	.word	0x00030d40

0800493c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2210      	movs	r2, #16
 800494c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <USB_FlushRxFifo+0x3c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d0f1      	beq.n	800494e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	460b      	mov	r3, r1
 800498c:	71fb      	strb	r3, [r7, #7]
 800498e:	4613      	mov	r3, r2
 8004990:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800499a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d123      	bne.n	80049ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049a2:	88bb      	ldrh	r3, [r7, #4]
 80049a4:	3303      	adds	r3, #3
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e018      	b.n	80049e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	031a      	lsls	r2, r3, #12
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	461a      	mov	r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	3301      	adds	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	3301      	adds	r3, #1
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3e2      	bcc.n	80049b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3724      	adds	r7, #36	; 0x24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b08b      	sub	sp, #44	; 0x2c
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e014      	b.n	8004a4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	3301      	adds	r3, #1
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	3301      	adds	r3, #1
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	3301      	adds	r3, #1
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	6a3a      	ldr	r2, [r7, #32]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d3e6      	bcc.n	8004a24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a56:	8bfb      	ldrh	r3, [r7, #30]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01e      	beq.n	8004a9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a66:	461a      	mov	r2, r3
 8004a68:	f107 0310 	add.w	r3, r7, #16
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	701a      	strb	r2, [r3, #0]
      i++;
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	3301      	adds	r3, #1
 8004a86:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a8e:	8bfb      	ldrh	r3, [r7, #30]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a94:	8bfb      	ldrh	r3, [r7, #30]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ea      	bne.n	8004a70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	372c      	adds	r7, #44	; 0x2c
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4013      	ands	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0301 	and.w	r3, r3, #1
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	4a13      	ldr	r2, [pc, #76]	; (8004b4c <USB_CoreReset+0x60>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d901      	bls.n	8004b08 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e01a      	b.n	8004b3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	daf3      	bge.n	8004af8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <USB_CoreReset+0x60>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e006      	b.n	8004b3e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d0f1      	beq.n	8004b20 <USB_CoreReset+0x34>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	00030d40 	.word	0x00030d40

08004b50 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b50:	b084      	sub	sp, #16
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	f107 001c 	add.w	r0, r7, #28
 8004b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d018      	beq.n	8004bd4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10a      	bne.n	8004bbe <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bb6:	f043 0304 	orr.w	r3, r3, #4
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e014      	b.n	8004be8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e009      	b.n	8004be8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004be2:	f023 0304 	bic.w	r3, r3, #4
 8004be6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004be8:	2110      	movs	r1, #16
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe82 	bl	80048f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff fea3 	bl	800493c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	e015      	b.n	8004c28 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d3e5      	bcc.n	8004bfc <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <USB_HostInit+0x154>)
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_HostInit+0x158>)
 8004c5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004c60:	e009      	b.n	8004c76 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2280      	movs	r2, #128	; 0x80
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a10      	ldr	r2, [pc, #64]	; (8004cac <USB_HostInit+0x15c>)
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <USB_HostInit+0x160>)
 8004c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	f043 0210 	orr.w	r2, r3, #16
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <USB_HostInit+0x164>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr
 8004ca4:	01000200 	.word	0x01000200
 8004ca8:	00e00300 	.word	0x00e00300
 8004cac:	00600080 	.word	0x00600080
 8004cb0:	004000e0 	.word	0x004000e0
 8004cb4:	a3200008 	.word	0xa3200008

08004cb8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	68f9      	ldr	r1, [r7, #12]
 8004cec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d00:	461a      	mov	r2, r3
 8004d02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d06:	6053      	str	r3, [r2, #4]
 8004d08:	e009      	b.n	8004d1e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d106      	bne.n	8004d1e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	461a      	mov	r2, r3
 8004d18:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d1c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d5c:	2064      	movs	r0, #100	; 0x64
 8004d5e:	f7fc f879 	bl	8000e54 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d70:	200a      	movs	r0, #10
 8004d72:	f7fc f86f 	bl	8000e54 <HAL_Delay>

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004da4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <USB_DriveVbus+0x44>
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d106      	bne.n	8004dc4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004dc2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d109      	bne.n	8004de4 <USB_DriveVbus+0x64>
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	0c5b      	lsrs	r3, r3, #17
 8004e10:	f003 0303 	and.w	r3, r3, #3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	b29b      	uxth	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	70fb      	strb	r3, [r7, #3]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70bb      	strb	r3, [r7, #2]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d87e      	bhi.n	8004f80 <USB_HC_Init+0x13c>
 8004e82:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <USB_HC_Init+0x44>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004f43 	.word	0x08004f43
 8004e90:	08004e99 	.word	0x08004e99
 8004e94:	08004f05 	.word	0x08004f05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004eaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004eac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da10      	bge.n	8004ed6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	0151      	lsls	r1, r2, #5
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	440a      	add	r2, r1
 8004eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004ed4:	e057      	b.n	8004f86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d051      	beq.n	8004f86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004ee2:	78fb      	ldrb	r3, [r7, #3]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004efc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f00:	60d3      	str	r3, [r2, #12]
      break;
 8004f02:	e040      	b.n	8004f86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	461a      	mov	r2, r3
 8004f12:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	da34      	bge.n	8004f8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f40:	e023      	b.n	8004f8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f240 2325 	movw	r3, #549	; 0x225
 8004f54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	da17      	bge.n	8004f8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f7e:	e006      	b.n	8004f8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	77fb      	strb	r3, [r7, #31]
      break;
 8004f84:	e004      	b.n	8004f90 <USB_HC_Init+0x14c>
      break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <USB_HC_Init+0x14c>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <USB_HC_Init+0x14c>
      break;
 8004f8e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa4:	6939      	ldr	r1, [r7, #16]
 8004fa6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004faa:	4313      	orrs	r3, r2
 8004fac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da03      	bge.n	8004fca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e001      	b.n	8004fce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff ff0f 	bl	8004df2 <USB_GetHostSpeed>
 8004fd4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d106      	bne.n	8004fec <USB_HC_Init+0x1a8>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d003      	beq.n	8004fec <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004fe4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e001      	b.n	8004ff0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ff0:	787b      	ldrb	r3, [r7, #1]
 8004ff2:	059b      	lsls	r3, r3, #22
 8004ff4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ff8:	78bb      	ldrb	r3, [r7, #2]
 8004ffa:	02db      	lsls	r3, r3, #11
 8004ffc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005000:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005002:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005006:	049b      	lsls	r3, r3, #18
 8005008:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800500c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800500e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005010:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005014:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	0159      	lsls	r1, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	440b      	add	r3, r1
 8005022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005026:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800502c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800502e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005032:	2b03      	cmp	r3, #3
 8005034:	d10f      	bne.n	8005056 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005054:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005056:	7ffb      	ldrb	r3, [r7, #31]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800507c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d02d      	beq.n	80050e6 <USB_HC_StartXfer+0x86>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	791b      	ldrb	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d129      	bne.n	80050e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d117      	bne.n	80050c8 <USB_HC_StartXfer+0x68>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	79db      	ldrb	r3, [r3, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <USB_HC_StartXfer+0x48>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	79db      	ldrb	r3, [r3, #7]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d10f      	bne.n	80050c8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	6a3a      	ldr	r2, [r7, #32]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <USB_HC_StartXfer+0x86>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	795b      	ldrb	r3, [r3, #5]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d107      	bne.n	80050e6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	4619      	mov	r1, r3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fa2f 	bl	8005540 <USB_DoPing>
      return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e0f8      	b.n	80052d8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	8912      	ldrh	r2, [r2, #8]
 80050f6:	4413      	add	r3, r2
 80050f8:	3b01      	subs	r3, #1
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	8912      	ldrh	r2, [r2, #8]
 80050fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005102:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	429a      	cmp	r2, r3
 800510a:	d90b      	bls.n	8005124 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800510c:	8b7b      	ldrh	r3, [r7, #26]
 800510e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	8912      	ldrh	r2, [r2, #8]
 8005116:	fb02 f203 	mul.w	r2, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	611a      	str	r2, [r3, #16]
 800511e:	e001      	b.n	8005124 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005120:	2301      	movs	r3, #1
 8005122:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	78db      	ldrb	r3, [r3, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800512c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	8912      	ldrh	r2, [r2, #8]
 8005132:	fb02 f203 	mul.w	r2, r2, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	611a      	str	r2, [r3, #16]
 800513a:	e003      	b.n	8005144 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	695a      	ldr	r2, [r3, #20]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800514c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800514e:	04d9      	lsls	r1, r3, #19
 8005150:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <USB_HC_StartXfer+0x280>)
 8005152:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005154:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	7a9b      	ldrb	r3, [r3, #10]
 800515a:	075b      	lsls	r3, r3, #29
 800515c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005160:	69f9      	ldr	r1, [r7, #28]
 8005162:	0148      	lsls	r0, r1, #5
 8005164:	6a39      	ldr	r1, [r7, #32]
 8005166:	4401      	add	r1, r0
 8005168:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800516c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800516e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	68d9      	ldr	r1, [r3, #12]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	460a      	mov	r2, r1
 8005188:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	bf0c      	ite	eq
 800519a:	2301      	moveq	r3, #1
 800519c:	2300      	movne	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80051c0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	7e7b      	ldrb	r3, [r7, #25]
 80051d2:	075b      	lsls	r3, r3, #29
 80051d4:	69f9      	ldr	r1, [r7, #28]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	6a39      	ldr	r1, [r7, #32]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80051e0:	4313      	orrs	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051fa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	78db      	ldrb	r3, [r3, #3]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d004      	beq.n	800520e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	e003      	b.n	8005216 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005214:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800521c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	4413      	add	r3, r2
 8005226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522a:	461a      	mov	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e04e      	b.n	80052d8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d149      	bne.n	80052d6 <USB_HC_StartXfer+0x276>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d045      	beq.n	80052d6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	79db      	ldrb	r3, [r3, #7]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d830      	bhi.n	80052b4 <USB_HC_StartXfer+0x254>
 8005252:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <USB_HC_StartXfer+0x1f8>)
 8005254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005258:	08005269 	.word	0x08005269
 800525c:	0800528d 	.word	0x0800528d
 8005260:	08005269 	.word	0x08005269
 8005264:	0800528d 	.word	0x0800528d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	3303      	adds	r3, #3
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005272:	8afa      	ldrh	r2, [r7, #22]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	b29b      	uxth	r3, r3
 800527a:	429a      	cmp	r2, r3
 800527c:	d91c      	bls.n	80052b8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]
        }
        break;
 800528a:	e015      	b.n	80052b8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	3303      	adds	r3, #3
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005296:	8afa      	ldrh	r2, [r7, #22]
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90a      	bls.n	80052bc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80052b2:	e003      	b.n	80052bc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80052b4:	bf00      	nop
 80052b6:	e002      	b.n	80052be <USB_HC_StartXfer+0x25e>
        break;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <USB_HC_StartXfer+0x25e>
        break;
 80052bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	68d9      	ldr	r1, [r3, #12]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	785a      	ldrb	r2, [r3, #1]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	2000      	movs	r0, #0
 80052ce:	9000      	str	r0, [sp, #0]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff fb53 	bl	800497c <USB_WritePacket>
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	1ff80000 	.word	0x1ff80000

080052e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	b29b      	uxth	r3, r3
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005306:	b480      	push	{r7}
 8005308:	b089      	sub	sp, #36	; 0x24
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4413      	add	r3, r2
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	0c9b      	lsrs	r3, r3, #18
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	0fdb      	lsrs	r3, r3, #31
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b20      	cmp	r3, #32
 8005354:	d104      	bne.n	8005360 <USB_HC_Halt+0x5a>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e0e8      	b.n	8005532 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <USB_HC_Halt+0x66>
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d173      	bne.n	8005454 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800538a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 80cb 	bne.w	8005530 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d143      	bne.n	800542e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005404:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	3301      	adds	r3, #1
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005412:	d81d      	bhi.n	8005450 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	4413      	add	r3, r2
 800541c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800542a:	d0ec      	beq.n	8005406 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800542c:	e080      	b.n	8005530 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	440a      	add	r2, r1
 8005444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800544c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800544e:	e06f      	b.n	8005530 <USB_HC_Halt+0x22a>
            break;
 8005450:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005452:	e06d      	b.n	8005530 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	440a      	add	r2, r1
 800546a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005472:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d143      	bne.n	800550c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	440a      	add	r2, r1
 800549a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	0151      	lsls	r1, r2, #5
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	440a      	add	r2, r1
 80054da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054e2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	3301      	adds	r3, #1
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f0:	d81d      	bhi.n	800552e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005508:	d0ec      	beq.n	80054e4 <USB_HC_Halt+0x1de>
 800550a:	e011      	b.n	8005530 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	e000      	b.n	8005530 <USB_HC_Halt+0x22a>
          break;
 800552e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3724      	adds	r7, #36	; 0x24
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005554:	2301      	movs	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	04da      	lsls	r2, r3, #19
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <USB_DoPing+0x74>)
 800555e:	4013      	ands	r3, r2
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	440a      	add	r2, r1
 8005568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800556c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005570:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005588:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005590:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	1ff80000 	.word	0x1ff80000

080055b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff f936 	bl	800483a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80055ce:	2110      	movs	r1, #16
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff f98f 	bl	80048f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff f9b0 	bl	800493c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e01f      	b.n	8005622 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005600:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005608:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	3301      	adds	r3, #1
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d9dc      	bls.n	80055e2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	e034      	b.n	8005698 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005644:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800564c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005654:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3301      	adds	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005674:	d80c      	bhi.n	8005690 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568c:	d0ec      	beq.n	8005668 <USB_StopHost+0xb0>
 800568e:	e000      	b.n	8005692 <USB_StopHost+0xda>
        break;
 8005690:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3301      	adds	r3, #1
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b0f      	cmp	r3, #15
 800569c:	d9c7      	bls.n	800562e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f04f 32ff 	mov.w	r2, #4294967295
 80056b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff f8af 	bl	8004818 <USB_EnableGlobalInt>

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b089      	sub	sp, #36	; 0x24
 80056c8:	af04      	add	r7, sp, #16
 80056ca:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80056cc:	2301      	movs	r3, #1
 80056ce:	2202      	movs	r2, #2
 80056d0:	2102      	movs	r1, #2
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fc66 	bl	8005fa4 <USBH_FindInterface>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2bff      	cmp	r3, #255	; 0xff
 80056e0:	d002      	beq.n	80056e8 <USBH_CDC_InterfaceInit+0x24>
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d901      	bls.n	80056ec <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056e8:	2302      	movs	r3, #2
 80056ea:	e13d      	b.n	8005968 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fc3b 	bl	8005f6c <USBH_SelectInterface>
 80056f6:	4603      	mov	r3, r0
 80056f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005700:	2302      	movs	r3, #2
 8005702:	e131      	b.n	8005968 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800570a:	2050      	movs	r0, #80	; 0x50
 800570c:	f002 fa00 	bl	8007b10 <malloc>
 8005710:	4603      	mov	r3, r0
 8005712:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005724:	2302      	movs	r3, #2
 8005726:	e11f      	b.n	8005968 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005728:	2250      	movs	r2, #80	; 0x50
 800572a:	2100      	movs	r1, #0
 800572c:	68b8      	ldr	r0, [r7, #8]
 800572e:	f002 f9ff 	bl	8007b30 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	211a      	movs	r1, #26
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	b25b      	sxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	da15      	bge.n	8005776 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	211a      	movs	r1, #26
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	211a      	movs	r1, #26
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005770:	881a      	ldrh	r2, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fe32 	bl	80073e6 <USBH_AllocPipe>
 8005782:	4603      	mov	r3, r0
 8005784:	461a      	mov	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	7819      	ldrb	r1, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	7858      	ldrb	r0, [r3, #1]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	8952      	ldrh	r2, [r2, #10]
 80057a2:	9202      	str	r2, [sp, #8]
 80057a4:	2203      	movs	r2, #3
 80057a6:	9201      	str	r2, [sp, #4]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4623      	mov	r3, r4
 80057ac:	4602      	mov	r2, r0
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fdea 	bl	8007388 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2200      	movs	r2, #0
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f002 f8f9 	bl	80079b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80057c2:	2300      	movs	r3, #0
 80057c4:	2200      	movs	r2, #0
 80057c6:	210a      	movs	r1, #10
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fbeb 	bl	8005fa4 <USBH_FindInterface>
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2bff      	cmp	r3, #255	; 0xff
 80057d6:	d002      	beq.n	80057de <USBH_CDC_InterfaceInit+0x11a>
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d901      	bls.n	80057e2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057de:	2302      	movs	r3, #2
 80057e0:	e0c2      	b.n	8005968 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	211a      	movs	r1, #26
 80057e8:	fb01 f303 	mul.w	r3, r1, r3
 80057ec:	4413      	add	r3, r2
 80057ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da16      	bge.n	8005828 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	211a      	movs	r1, #26
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	4413      	add	r3, r2
 8005806:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800580a:	781a      	ldrb	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	211a      	movs	r1, #26
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	4413      	add	r3, r2
 800581c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	835a      	strh	r2, [r3, #26]
 8005826:	e015      	b.n	8005854 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	211a      	movs	r1, #26
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	4413      	add	r3, r2
 8005834:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	211a      	movs	r1, #26
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	211a      	movs	r1, #26
 800585a:	fb01 f303 	mul.w	r3, r1, r3
 800585e:	4413      	add	r3, r2
 8005860:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b25b      	sxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	da16      	bge.n	800589a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	211a      	movs	r1, #26
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	f203 3356 	addw	r3, r3, #854	; 0x356
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	211a      	movs	r1, #26
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	835a      	strh	r2, [r3, #26]
 8005898:	e015      	b.n	80058c6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	211a      	movs	r1, #26
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058aa:	781a      	ldrb	r2, [r3, #0]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	211a      	movs	r1, #26
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80058c0:	881a      	ldrh	r2, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	7b9b      	ldrb	r3, [r3, #14]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fd8a 	bl	80073e6 <USBH_AllocPipe>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	7bdb      	ldrb	r3, [r3, #15]
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 fd80 	bl	80073e6 <USBH_AllocPipe>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	7b59      	ldrb	r1, [r3, #13]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	7b98      	ldrb	r0, [r3, #14]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	8b12      	ldrh	r2, [r2, #24]
 8005906:	9202      	str	r2, [sp, #8]
 8005908:	2202      	movs	r2, #2
 800590a:	9201      	str	r2, [sp, #4]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	4623      	mov	r3, r4
 8005910:	4602      	mov	r2, r0
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f001 fd38 	bl	8007388 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	7b19      	ldrb	r1, [r3, #12]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	7bd8      	ldrb	r0, [r3, #15]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	8b52      	ldrh	r2, [r2, #26]
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	2202      	movs	r2, #2
 8005934:	9201      	str	r2, [sp, #4]
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	4623      	mov	r3, r4
 800593a:	4602      	mov	r2, r0
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fd23 	bl	8007388 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	7b5b      	ldrb	r3, [r3, #13]
 800594e:	2200      	movs	r2, #0
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f002 f82e 	bl	80079b4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	7b1b      	ldrb	r3, [r3, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 f827 	bl	80079b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}

08005970 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00e      	beq.n	80059a8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fd18 	bl	80073c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 fd43 	bl	8007428 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	7b1b      	ldrb	r3, [r3, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00e      	beq.n	80059ce <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fd05 	bl	80073c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	7b1b      	ldrb	r3, [r3, #12]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 fd30 	bl	8007428 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	7b5b      	ldrb	r3, [r3, #13]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	7b5b      	ldrb	r3, [r3, #13]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fcf2 	bl	80073c6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	7b5b      	ldrb	r3, [r3, #13]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fd1d 	bl	8007428 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f002 f889 	bl	8007b20 <free>
    phost->pActiveClass->pData = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3340      	adds	r3, #64	; 0x40
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f8b1 	bl	8005ba2 <GetLineCoding>
 8005a40:	4603      	mov	r3, r0
 8005a42:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005a44:	7afb      	ldrb	r3, [r7, #11]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a50:	2102      	movs	r1, #2
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005a56:	7afb      	ldrb	r3, [r7, #11]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d877      	bhi.n	8005b74 <USBH_CDC_Process+0x114>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <USBH_CDC_Process+0x2c>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005aa1 	.word	0x08005aa1
 8005a90:	08005aa7 	.word	0x08005aa7
 8005a94:	08005ad7 	.word	0x08005ad7
 8005a98:	08005b4b 	.word	0x08005b4b
 8005a9c:	08005b59 	.word	0x08005b59
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e06d      	b.n	8005b82 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f897 	bl	8005be0 <SetLineCoding>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ac4:	e058      	b.n	8005b78 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d055      	beq.n	8005b78 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2204      	movs	r2, #4
 8005ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005ad4:	e050      	b.n	8005b78 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3340      	adds	r3, #64	; 0x40
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f860 	bl	8005ba2 <GetLineCoding>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d126      	bne.n	8005b3a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	791b      	ldrb	r3, [r3, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d13b      	bne.n	8005b7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d133      	bne.n	8005b7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d12b      	bne.n	8005b7c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d124      	bne.n	8005b7c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f958 	bl	8005de8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b38:	e020      	b.n	8005b7c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d01d      	beq.n	8005b7c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2204      	movs	r2, #4
 8005b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b48:	e018      	b.n	8005b7c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f867 	bl	8005c1e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8da 	bl	8005d0a <CDC_ProcessReception>
      break;
 8005b56:	e014      	b.n	8005b82 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005b58:	2100      	movs	r1, #0
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 ffe3 	bl	8006b26 <USBH_ClrFeature>
 8005b60:	4603      	mov	r3, r0
 8005b62:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005b72:	e005      	b.n	8005b80 <USBH_CDC_Process+0x120>

    default:
      break;
 8005b74:	bf00      	nop
 8005b76:	e004      	b.n	8005b82 <USBH_CDC_Process+0x122>
      break;
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <USBH_CDC_Process+0x122>
      break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <USBH_CDC_Process+0x122>
      break;
 8005b80:	bf00      	nop

  }

  return status;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	22a1      	movs	r2, #161	; 0xa1
 8005bb0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2221      	movs	r2, #33	; 0x21
 8005bb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2207      	movs	r2, #7
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f988 	bl	8006ee6 <USBH_CtlReq>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2221      	movs	r2, #33	; 0x21
 8005bee:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2207      	movs	r2, #7
 8005c06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2207      	movs	r2, #7
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f969 	bl	8006ee6 <USBH_CtlReq>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af02      	add	r7, sp, #8
 8005c24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <CDC_ProcessTransmission+0x26>
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d023      	beq.n	8005c8a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005c42:	e05e      	b.n	8005d02 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	8b12      	ldrh	r2, [r2, #24]
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d90b      	bls.n	8005c68 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8b1a      	ldrh	r2, [r3, #24]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	7b5b      	ldrb	r3, [r3, #13]
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	9000      	str	r0, [sp, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fb4e 	bl	8007302 <USBH_BulkSendData>
 8005c66:	e00b      	b.n	8005c80 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	7b5b      	ldrb	r3, [r3, #13]
 8005c76:	2001      	movs	r0, #1
 8005c78:	9000      	str	r0, [sp, #0]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f001 fb41 	bl	8007302 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005c88:	e03b      	b.n	8005d02 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	7b5b      	ldrb	r3, [r3, #13]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fe65 	bl	8007960 <USBH_LL_GetURBState>
 8005c96:	4603      	mov	r3, r0
 8005c98:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d128      	bne.n	8005cf2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	8b12      	ldrh	r2, [r2, #24]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d90e      	bls.n	8005cca <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	8b12      	ldrh	r2, [r2, #24]
 8005cb4:	1a9a      	subs	r2, r3, r2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	8b12      	ldrh	r2, [r2, #24]
 8005cc2:	441a      	add	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	61da      	str	r2, [r3, #28]
 8005cc8:	e002      	b.n	8005cd0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ce0:	e00e      	b.n	8005d00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f868 	bl	8005dc0 <USBH_CDC_TransmitCallback>
      break;
 8005cf0:	e006      	b.n	8005d00 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d103      	bne.n	8005d00 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005d00:	bf00      	nop
  }
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d002      	beq.n	8005d30 <CDC_ProcessReception+0x26>
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d00e      	beq.n	8005d4c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005d2e:	e043      	b.n	8005db8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	6a19      	ldr	r1, [r3, #32]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	8b5a      	ldrh	r2, [r3, #26]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	7b1b      	ldrb	r3, [r3, #12]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fb05 	bl	800734c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2204      	movs	r2, #4
 8005d46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005d4a:	e035      	b.n	8005db8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	7b1b      	ldrb	r3, [r3, #12]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fe04 	bl	8007960 <USBH_LL_GetURBState>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005d5c:	7cfb      	ldrb	r3, [r7, #19]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d129      	bne.n	8005db6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	7b1b      	ldrb	r3, [r3, #12]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 fd67 	bl	800783c <USBH_LL_GetLastXferSize>
 8005d6e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d016      	beq.n	8005da8 <CDC_ProcessReception+0x9e>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	8b5b      	ldrh	r3, [r3, #26]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d910      	bls.n	8005da8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad2      	subs	r2, r2, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	441a      	add	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2203      	movs	r2, #3
 8005da2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005da6:	e006      	b.n	8005db6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f80f 	bl	8005dd4 <USBH_CDC_ReceiveCallback>
      break;
 8005db6:	bf00      	nop
  }
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005e10:	2302      	movs	r3, #2
 8005e12:	e029      	b.n	8005e68 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	79fa      	ldrb	r2, [r7, #7]
 8005e18:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f81f 	bl	8005e70 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f001 fc37 	bl	80076d4 <USBH_LL_Init>

  return USBH_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e009      	b.n	8005e96 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	33e0      	adds	r3, #224	; 0xe0
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b0e      	cmp	r3, #14
 8005e9a:	d9f2      	bls.n	8005e82 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e009      	b.n	8005eb6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ebc:	d3f1      	bcc.n	8005ea2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2240      	movs	r2, #64	; 0x40
 8005ee2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d016      	beq.n	8005f5a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10e      	bne.n	8005f54 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	33de      	adds	r3, #222	; 0xde
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	e004      	b.n	8005f5e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005f54:	2302      	movs	r3, #2
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	e001      	b.n	8005f5e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d204      	bcs.n	8005f92 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005f90:	e001      	b.n	8005f96 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005f92:	2302      	movs	r3, #2
 8005f94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	4608      	mov	r0, r1
 8005fae:	4611      	mov	r1, r2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	70fb      	strb	r3, [r7, #3]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	70bb      	strb	r3, [r7, #2]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005fcc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005fce:	e025      	b.n	800601c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	221a      	movs	r2, #26
 8005fd4:	fb02 f303 	mul.w	r3, r2, r3
 8005fd8:	3308      	adds	r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	3302      	adds	r3, #2
 8005fe0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	795b      	ldrb	r3, [r3, #5]
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d002      	beq.n	8005ff2 <USBH_FindInterface+0x4e>
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2bff      	cmp	r3, #255	; 0xff
 8005ff0:	d111      	bne.n	8006016 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ff6:	78ba      	ldrb	r2, [r7, #2]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d002      	beq.n	8006002 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ffc:	78bb      	ldrb	r3, [r7, #2]
 8005ffe:	2bff      	cmp	r3, #255	; 0xff
 8006000:	d109      	bne.n	8006016 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006006:	787a      	ldrb	r2, [r7, #1]
 8006008:	429a      	cmp	r2, r3
 800600a:	d002      	beq.n	8006012 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800600c:	787b      	ldrb	r3, [r7, #1]
 800600e:	2bff      	cmp	r3, #255	; 0xff
 8006010:	d101      	bne.n	8006016 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	e006      	b.n	8006024 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	3301      	adds	r3, #1
 800601a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d9d6      	bls.n	8005fd0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006022:	23ff      	movs	r3, #255	; 0xff
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fb87 	bl	800774c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800603e:	2101      	movs	r1, #1
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fca0 	bl	8007986 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af04      	add	r7, sp, #16
 8006056:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006058:	2302      	movs	r3, #2
 800605a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d102      	bne.n	8006072 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2203      	movs	r2, #3
 8006070:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b0b      	cmp	r3, #11
 800607a:	f200 81b3 	bhi.w	80063e4 <USBH_Process+0x394>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <USBH_Process+0x34>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060b5 	.word	0x080060b5
 8006088:	080060e7 	.word	0x080060e7
 800608c:	0800614f 	.word	0x0800614f
 8006090:	0800637f 	.word	0x0800637f
 8006094:	080063e5 	.word	0x080063e5
 8006098:	080061f3 	.word	0x080061f3
 800609c:	08006325 	.word	0x08006325
 80060a0:	08006229 	.word	0x08006229
 80060a4:	08006249 	.word	0x08006249
 80060a8:	08006269 	.word	0x08006269
 80060ac:	08006297 	.word	0x08006297
 80060b0:	08006367 	.word	0x08006367
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8193 	beq.w	80063e8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80060c8:	20c8      	movs	r0, #200	; 0xc8
 80060ca:	f001 fca3 	bl	8007a14 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 fb99 	bl	8007806 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060e4:	e180      	b.n	80063e8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060fe:	e182      	b.n	8006406 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d914      	bls.n	8006136 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006112:	3301      	adds	r3, #1
 8006114:	b2da      	uxtb	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006122:	2b03      	cmp	r3, #3
 8006124:	d903      	bls.n	800612e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	220d      	movs	r2, #13
 800612a:	701a      	strb	r2, [r3, #0]
      break;
 800612c:	e16b      	b.n	8006406 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	701a      	strb	r2, [r3, #0]
      break;
 8006134:	e167      	b.n	8006406 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800613c:	f103 020a 	add.w	r2, r3, #10
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006146:	200a      	movs	r0, #10
 8006148:	f001 fc64 	bl	8007a14 <USBH_Delay>
      break;
 800614c:	e15b      	b.n	8006406 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800615e:	2104      	movs	r1, #4
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006164:	2064      	movs	r0, #100	; 0x64
 8006166:	f001 fc55 	bl	8007a14 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fb24 	bl	80077b8 <USBH_LL_GetSpeed>
 8006170:	4603      	mov	r3, r0
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2205      	movs	r2, #5
 800617e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006180:	2100      	movs	r1, #0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 f92f 	bl	80073e6 <USBH_AllocPipe>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 f927 	bl	80073e6 <USBH_AllocPipe>
 8006198:	4603      	mov	r3, r0
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7919      	ldrb	r1, [r3, #4]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80061b4:	b292      	uxth	r2, r2
 80061b6:	9202      	str	r2, [sp, #8]
 80061b8:	2200      	movs	r2, #0
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4603      	mov	r3, r0
 80061c0:	2280      	movs	r2, #128	; 0x80
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f8e0 	bl	8007388 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7959      	ldrb	r1, [r3, #5]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80061dc:	b292      	uxth	r2, r2
 80061de:	9202      	str	r2, [sp, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	4603      	mov	r3, r0
 80061e8:	2200      	movs	r2, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f001 f8cc 	bl	8007388 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061f0:	e109      	b.n	8006406 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f90c 	bl	8006410 <USBH_HandleEnum>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 80f3 	bne.w	80063ec <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006214:	2b01      	cmp	r3, #1
 8006216:	d103      	bne.n	8006220 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2208      	movs	r2, #8
 800621c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800621e:	e0e5      	b.n	80063ec <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2207      	movs	r2, #7
 8006224:	701a      	strb	r2, [r3, #0]
      break;
 8006226:	e0e1      	b.n	80063ec <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80de 	beq.w	80063f0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800623a:	2101      	movs	r1, #1
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2208      	movs	r2, #8
 8006244:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006246:	e0d3      	b.n	80063f0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800624e:	b29b      	uxth	r3, r3
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fc20 	bl	8006a98 <USBH_SetCfg>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 80ca 	bne.w	80063f4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2209      	movs	r2, #9
 8006264:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006266:	e0c5      	b.n	80063f4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006276:	2101      	movs	r1, #1
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc30 	bl	8006ade <USBH_SetFeature>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 80b9 	bne.w	80063f8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	220a      	movs	r2, #10
 800628a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800628c:	e0b4      	b.n	80063f8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	220a      	movs	r2, #10
 8006292:	701a      	strb	r2, [r3, #0]
      break;
 8006294:	e0b0      	b.n	80063f8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 80ad 	beq.w	80063fc <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
 80062ae:	e016      	b.n	80062de <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062b0:	7bfa      	ldrb	r2, [r7, #15]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32de      	adds	r2, #222	; 0xde
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	791a      	ldrb	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d108      	bne.n	80062d8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80062c6:	7bfa      	ldrb	r2, [r7, #15]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	32de      	adds	r2, #222	; 0xde
 80062cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80062d6:	e005      	b.n	80062e4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	3301      	adds	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0e5      	beq.n	80062b0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2206      	movs	r2, #6
 8006304:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800630c:	2103      	movs	r1, #3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006312:	e073      	b.n	80063fc <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	220d      	movs	r2, #13
 8006318:	701a      	strb	r2, [r3, #0]
      break;
 800631a:	e06f      	b.n	80063fc <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220d      	movs	r2, #13
 8006320:	701a      	strb	r2, [r3, #0]
      break;
 8006322:	e06b      	b.n	80063fc <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d017      	beq.n	800635e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
 800633a:	4603      	mov	r3, r0
 800633c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	220b      	movs	r2, #11
 800634a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800634c:	e058      	b.n	8006400 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800634e:	7bbb      	ldrb	r3, [r7, #14]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d154      	bne.n	8006400 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	220d      	movs	r2, #13
 800635a:	701a      	strb	r2, [r3, #0]
      break;
 800635c:	e050      	b.n	8006400 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	220d      	movs	r2, #13
 8006362:	701a      	strb	r2, [r3, #0]
      break;
 8006364:	e04c      	b.n	8006400 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d049      	beq.n	8006404 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
      }
      break;
 800637c:	e042      	b.n	8006404 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fd72 	bl	8005e70 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063ba:	2105      	movs	r1, #5
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fe2b 	bl	8006030 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063da:	e014      	b.n	8006406 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f9b5 	bl	800774c <USBH_LL_Start>
      break;
 80063e2:	e010      	b.n	8006406 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80063e4:	bf00      	nop
 80063e6:	e00e      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 80063e8:	bf00      	nop
 80063ea:	e00c      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 80063ec:	bf00      	nop
 80063ee:	e00a      	b.n	8006406 <USBH_Process+0x3b6>
    break;
 80063f0:	bf00      	nop
 80063f2:	e008      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 80063f4:	bf00      	nop
 80063f6:	e006      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 80063f8:	bf00      	nop
 80063fa:	e004      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 80063fc:	bf00      	nop
 80063fe:	e002      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 8006400:	bf00      	nop
 8006402:	e000      	b.n	8006406 <USBH_Process+0x3b6>
      break;
 8006404:	bf00      	nop
  }
  return USBH_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b088      	sub	sp, #32
 8006414:	af04      	add	r7, sp, #16
 8006416:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800641c:	2301      	movs	r3, #1
 800641e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b07      	cmp	r3, #7
 8006426:	f200 81c1 	bhi.w	80067ac <USBH_HandleEnum+0x39c>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <USBH_HandleEnum+0x20>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006451 	.word	0x08006451
 8006434:	0800650f 	.word	0x0800650f
 8006438:	08006579 	.word	0x08006579
 800643c:	08006607 	.word	0x08006607
 8006440:	08006671 	.word	0x08006671
 8006444:	080066e1 	.word	0x080066e1
 8006448:	08006727 	.word	0x08006727
 800644c:	0800676d 	.word	0x0800676d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006450:	2108      	movs	r1, #8
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa50 	bl	80068f8 <USBH_Get_DevDesc>
 8006458:	4603      	mov	r3, r0
 800645a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d130      	bne.n	80064c4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	7919      	ldrb	r1, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006486:	b292      	uxth	r2, r2
 8006488:	9202      	str	r2, [sp, #8]
 800648a:	2200      	movs	r2, #0
 800648c:	9201      	str	r2, [sp, #4]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	4603      	mov	r3, r0
 8006492:	2280      	movs	r2, #128	; 0x80
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 ff77 	bl	8007388 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7959      	ldrb	r1, [r3, #5]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064ae:	b292      	uxth	r2, r2
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	9201      	str	r2, [sp, #4]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	4603      	mov	r3, r0
 80064ba:	2200      	movs	r2, #0
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 ff63 	bl	8007388 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064c2:	e175      	b.n	80067b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	f040 8172 	bne.w	80067b0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064d2:	3301      	adds	r3, #1
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d903      	bls.n	80064ee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	220d      	movs	r2, #13
 80064ea:	701a      	strb	r2, [r3, #0]
      break;
 80064ec:	e160      	b.n	80067b0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	795b      	ldrb	r3, [r3, #5]
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 ff97 	bl	8007428 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	791b      	ldrb	r3, [r3, #4]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 ff91 	bl	8007428 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
      break;
 800650c:	e150      	b.n	80067b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800650e:	2112      	movs	r1, #18
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f9f1 	bl	80068f8 <USBH_Get_DevDesc>
 8006516:	4603      	mov	r3, r0
 8006518:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800651a:	7bbb      	ldrb	r3, [r7, #14]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006526:	e145      	b.n	80067b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b03      	cmp	r3, #3
 800652c:	f040 8142 	bne.w	80067b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006536:	3301      	adds	r3, #1
 8006538:	b2da      	uxtb	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006546:	2b03      	cmp	r3, #3
 8006548:	d903      	bls.n	8006552 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	220d      	movs	r2, #13
 800654e:	701a      	strb	r2, [r3, #0]
      break;
 8006550:	e130      	b.n	80067b4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	795b      	ldrb	r3, [r3, #5]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 ff65 	bl	8007428 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	791b      	ldrb	r3, [r3, #4]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ff5f 	bl	8007428 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
      break;
 8006576:	e11d      	b.n	80067b4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006578:	2101      	movs	r1, #1
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fa68 	bl	8006a50 <USBH_SetAddress>
 8006580:	4603      	mov	r3, r0
 8006582:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d132      	bne.n	80065f0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800658a:	2002      	movs	r0, #2
 800658c:	f001 fa42 	bl	8007a14 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2203      	movs	r2, #3
 800659c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	7919      	ldrb	r1, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80065b2:	b292      	uxth	r2, r2
 80065b4:	9202      	str	r2, [sp, #8]
 80065b6:	2200      	movs	r2, #0
 80065b8:	9201      	str	r2, [sp, #4]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	4603      	mov	r3, r0
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fee1 	bl	8007388 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	7959      	ldrb	r1, [r3, #5]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065da:	b292      	uxth	r2, r2
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	9201      	str	r2, [sp, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4603      	mov	r3, r0
 80065e6:	2200      	movs	r2, #0
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fecd 	bl	8007388 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065ee:	e0e3      	b.n	80067b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	f040 80e0 	bne.w	80067b8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	220d      	movs	r2, #13
 80065fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	705a      	strb	r2, [r3, #1]
      break;
 8006604:	e0d8      	b.n	80067b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006606:	2109      	movs	r1, #9
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f99d 	bl	8006948 <USBH_Get_CfgDesc>
 800660e:	4603      	mov	r3, r0
 8006610:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006612:	7bbb      	ldrb	r3, [r7, #14]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d103      	bne.n	8006620 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2204      	movs	r2, #4
 800661c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800661e:	e0cd      	b.n	80067bc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b03      	cmp	r3, #3
 8006624:	f040 80ca 	bne.w	80067bc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800662e:	3301      	adds	r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800663e:	2b03      	cmp	r3, #3
 8006640:	d903      	bls.n	800664a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	220d      	movs	r2, #13
 8006646:	701a      	strb	r2, [r3, #0]
      break;
 8006648:	e0b8      	b.n	80067bc <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	795b      	ldrb	r3, [r3, #5]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fee9 	bl	8007428 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fee3 	bl	8007428 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
      break;
 800666e:	e0a5      	b.n	80067bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f965 	bl	8006948 <USBH_Get_CfgDesc>
 800667e:	4603      	mov	r3, r0
 8006680:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2205      	movs	r2, #5
 800668c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800668e:	e097      	b.n	80067c0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	2b03      	cmp	r3, #3
 8006694:	f040 8094 	bne.w	80067c0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800669e:	3301      	adds	r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d903      	bls.n	80066ba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	220d      	movs	r2, #13
 80066b6:	701a      	strb	r2, [r3, #0]
      break;
 80066b8:	e082      	b.n	80067c0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	795b      	ldrb	r3, [r3, #5]
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 feb1 	bl	8007428 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	791b      	ldrb	r3, [r3, #4]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 feab 	bl	8007428 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
      break;
 80066de:	e06f      	b.n	80067c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d019      	beq.n	800671e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80066f6:	23ff      	movs	r3, #255	; 0xff
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f949 	bl	8006990 <USBH_Get_StringDesc>
 80066fe:	4603      	mov	r3, r0
 8006700:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2206      	movs	r2, #6
 800670c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800670e:	e059      	b.n	80067c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006710:	7bbb      	ldrb	r3, [r7, #14]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d156      	bne.n	80067c4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2206      	movs	r2, #6
 800671a:	705a      	strb	r2, [r3, #1]
      break;
 800671c:	e052      	b.n	80067c4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2206      	movs	r2, #6
 8006722:	705a      	strb	r2, [r3, #1]
      break;
 8006724:	e04e      	b.n	80067c4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800672c:	2b00      	cmp	r3, #0
 800672e:	d019      	beq.n	8006764 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800673c:	23ff      	movs	r3, #255	; 0xff
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f926 	bl	8006990 <USBH_Get_StringDesc>
 8006744:	4603      	mov	r3, r0
 8006746:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d103      	bne.n	8006756 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2207      	movs	r2, #7
 8006752:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006754:	e038      	b.n	80067c8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006756:	7bbb      	ldrb	r3, [r7, #14]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d135      	bne.n	80067c8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2207      	movs	r2, #7
 8006760:	705a      	strb	r2, [r3, #1]
      break;
 8006762:	e031      	b.n	80067c8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2207      	movs	r2, #7
 8006768:	705a      	strb	r2, [r3, #1]
      break;
 800676a:	e02d      	b.n	80067c8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006772:	2b00      	cmp	r3, #0
 8006774:	d017      	beq.n	80067a6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006782:	23ff      	movs	r3, #255	; 0xff
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f903 	bl	8006990 <USBH_Get_StringDesc>
 800678a:	4603      	mov	r3, r0
 800678c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006798:	e018      	b.n	80067cc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b03      	cmp	r3, #3
 800679e:	d115      	bne.n	80067cc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	73fb      	strb	r3, [r7, #15]
      break;
 80067a4:	e012      	b.n	80067cc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
      break;
 80067aa:	e00f      	b.n	80067cc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80067ac:	bf00      	nop
 80067ae:	e00e      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067b0:	bf00      	nop
 80067b2:	e00c      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067b4:	bf00      	nop
 80067b6:	e00a      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067b8:	bf00      	nop
 80067ba:	e008      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067bc:	bf00      	nop
 80067be:	e006      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067c0:	bf00      	nop
 80067c2:	e004      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067c4:	bf00      	nop
 80067c6:	e002      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067c8:	bf00      	nop
 80067ca:	e000      	b.n	80067ce <USBH_HandleEnum+0x3be>
      break;
 80067cc:	bf00      	nop
  }
  return Status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f804 	bl	800681a <USBH_HandleSof>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b0b      	cmp	r3, #11
 800682a:	d10a      	bne.n	8006842 <USBH_HandleSof+0x28>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d005      	beq.n	8006842 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
  }
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800685a:	bf00      	nop
}
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006876:	bf00      	nop
}
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 ff56 	bl	8007782 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fda3 	bl	8007428 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	795b      	ldrb	r3, [r3, #5]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fd9d 	bl	8007428 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	b29b      	uxth	r3, r3
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006916:	2100      	movs	r1, #0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f864 	bl	80069e6 <USBH_GetDescriptor>
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006934:	78fa      	ldrb	r2, [r7, #3]
 8006936:	b292      	uxth	r2, r2
 8006938:	4619      	mov	r1, r3
 800693a:	f000 f918 	bl	8006b6e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	331c      	adds	r3, #28
 8006958:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006964:	2100      	movs	r1, #0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f83d 	bl	80069e6 <USBH_GetDescriptor>
 800696c:	4603      	mov	r3, r0
 800696e:	72fb      	strb	r3, [r7, #11]
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800697c:	887a      	ldrh	r2, [r7, #2]
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 f964 	bl	8006c4e <USBH_ParseCfgDesc>
  }

  return status;
 8006986:	7afb      	ldrb	r3, [r7, #11]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	461a      	mov	r2, r3
 800699c:	460b      	mov	r3, r1
 800699e:	72fb      	strb	r3, [r7, #11]
 80069a0:	4613      	mov	r3, r2
 80069a2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069ac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80069b4:	893b      	ldrh	r3, [r7, #8]
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	460b      	mov	r3, r1
 80069ba:	2100      	movs	r1, #0
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 f812 	bl	80069e6 <USBH_GetDescriptor>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d107      	bne.n	80069dc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069d2:	893a      	ldrh	r2, [r7, #8]
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fa37 	bl	8006e4a <USBH_ParseStringDesc>
  }

  return status;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	72fb      	strb	r3, [r7, #11]
 80069f4:	4613      	mov	r3, r2
 80069f6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	789b      	ldrb	r3, [r3, #2]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d11c      	bne.n	8006a3a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2206      	movs	r2, #6
 8006a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	893a      	ldrh	r2, [r7, #8]
 8006a16:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a22:	d104      	bne.n	8006a2e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f240 4209 	movw	r2, #1033	; 0x409
 8006a2a:	829a      	strh	r2, [r3, #20]
 8006a2c:	e002      	b.n	8006a34 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8b3a      	ldrh	r2, [r7, #24]
 8006a38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006a3a:	8b3b      	ldrh	r3, [r7, #24]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fa50 	bl	8006ee6 <USBH_CtlReq>
 8006a46:	4603      	mov	r3, r0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	789b      	ldrb	r3, [r3, #2]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d10f      	bne.n	8006a84 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006a84:	2200      	movs	r2, #0
 8006a86:	2100      	movs	r1, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa2c 	bl	8006ee6 <USBH_CtlReq>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	789b      	ldrb	r3, [r3, #2]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d10e      	bne.n	8006aca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2209      	movs	r2, #9
 8006ab6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa09 	bl	8006ee6 <USBH_CtlReq>
 8006ad4:	4603      	mov	r3, r0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	789b      	ldrb	r3, [r3, #2]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10f      	bne.n	8006b12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2203      	movs	r2, #3
 8006afc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9e5 	bl	8006ee6 <USBH_CtlReq>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	789b      	ldrb	r3, [r3, #2]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d10f      	bne.n	8006b5a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9c1 	bl	8006ee6 <USBH_CtlReq>
 8006b64:	4603      	mov	r3, r0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	785a      	ldrb	r2, [r3, #1]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3302      	adds	r3, #2
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3303      	adds	r3, #3
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	791a      	ldrb	r2, [r3, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	795a      	ldrb	r2, [r3, #5]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	799a      	ldrb	r2, [r3, #6]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	79da      	ldrb	r2, [r3, #7]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d939      	bls.n	8006c42 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	3309      	adds	r3, #9
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	330a      	adds	r3, #10
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	330b      	adds	r3, #11
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	330d      	adds	r3, #13
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	021b      	lsls	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	7b9a      	ldrb	r2, [r3, #14]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	7bda      	ldrb	r2, [r3, #15]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	7c1a      	ldrb	r2, [r3, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	7c5a      	ldrb	r2, [r3, #17]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	745a      	strb	r2, [r3, #17]
  }
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b08a      	sub	sp, #40	; 0x28
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	785a      	ldrb	r2, [r3, #1]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	3302      	adds	r3, #2
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	3303      	adds	r3, #3
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	791a      	ldrb	r2, [r3, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	795a      	ldrb	r2, [r3, #5]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	799a      	ldrb	r2, [r3, #6]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	79da      	ldrb	r2, [r3, #7]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	7a1a      	ldrb	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d95f      	bls.n	8006d8a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006cca:	2309      	movs	r3, #9
 8006ccc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006cd2:	e051      	b.n	8006d78 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006cd4:	f107 0316 	add.w	r3, r7, #22
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cdc:	f000 f8e8 	bl	8006eb0 <USBH_GetNextDesc>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d146      	bne.n	8006d78 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cee:	221a      	movs	r2, #26
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d00:	69f8      	ldr	r0, [r7, #28]
 8006d02:	f000 f846 	bl	8006d92 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d10:	e022      	b.n	8006d58 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d12:	f107 0316 	add.w	r3, r7, #22
 8006d16:	4619      	mov	r1, r3
 8006d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d1a:	f000 f8c9 	bl	8006eb0 <USBH_GetNextDesc>
 8006d1e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b05      	cmp	r3, #5
 8006d26:	d117      	bne.n	8006d58 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d2c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d30:	3201      	adds	r2, #1
 8006d32:	00d2      	lsls	r2, r2, #3
 8006d34:	211a      	movs	r1, #26
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	3304      	adds	r3, #4
 8006d44:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006d46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d48:	69b8      	ldr	r0, [r7, #24]
 8006d4a:	f000 f851 	bl	8006df0 <USBH_ParseEPDesc>
            ep_ix++;
 8006d4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006d52:	3301      	adds	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d204      	bcs.n	8006d6e <USBH_ParseCfgDesc+0x120>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	885a      	ldrh	r2, [r3, #2]
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d8d1      	bhi.n	8006d12 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006d6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d72:	3301      	adds	r3, #1
 8006d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d804      	bhi.n	8006d8a <USBH_ParseCfgDesc+0x13c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	885a      	ldrh	r2, [r3, #2]
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d8a4      	bhi.n	8006cd4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	3728      	adds	r7, #40	; 0x28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	785a      	ldrb	r2, [r3, #1]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	789a      	ldrb	r2, [r3, #2]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	78da      	ldrb	r2, [r3, #3]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	791a      	ldrb	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	795a      	ldrb	r2, [r3, #5]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	799a      	ldrb	r2, [r3, #6]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	79da      	ldrb	r2, [r3, #7]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	7a1a      	ldrb	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	721a      	strb	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	785a      	ldrb	r2, [r3, #1]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	789a      	ldrb	r2, [r3, #2]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	78da      	ldrb	r2, [r3, #3]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	3305      	adds	r3, #5
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	799a      	ldrb	r2, [r3, #6]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	719a      	strb	r2, [r3, #6]
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b087      	sub	sp, #28
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	4613      	mov	r3, r2
 8006e56:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d120      	bne.n	8006ea4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	1e9a      	subs	r2, r3, #2
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	bf28      	it	cs
 8006e6e:	4613      	movcs	r3, r2
 8006e70:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3302      	adds	r3, #2
 8006e76:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e78:	2300      	movs	r3, #0
 8006e7a:	82fb      	strh	r3, [r7, #22]
 8006e7c:	e00b      	b.n	8006e96 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e7e:	8afb      	ldrh	r3, [r7, #22]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006e90:	8afb      	ldrh	r3, [r7, #22]
 8006e92:	3302      	adds	r3, #2
 8006e94:	82fb      	strh	r3, [r7, #22]
 8006e96:	8afa      	ldrh	r2, [r7, #22]
 8006e98:	8abb      	ldrh	r3, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3ef      	bcc.n	8006e7e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	789b      	ldrb	r3, [r3, #2]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d002      	beq.n	8006f06 <USBH_CtlReq+0x20>
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d00f      	beq.n	8006f24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f04:	e027      	b.n	8006f56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	88fa      	ldrh	r2, [r7, #6]
 8006f10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
      break;
 8006f22:	e018      	b.n	8006f56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f81b 	bl	8006f60 <USBH_HandleControl>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <USBH_CtlReq+0x54>
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d106      	bne.n	8006f48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	761a      	strb	r2, [r3, #24]
      break;
 8006f46:	e005      	b.n	8006f54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d102      	bne.n	8006f54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	709a      	strb	r2, [r3, #2]
      break;
 8006f54:	bf00      	nop
  }
  return status;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	7e1b      	ldrb	r3, [r3, #24]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	2b0a      	cmp	r3, #10
 8006f78:	f200 8156 	bhi.w	8007228 <USBH_HandleControl+0x2c8>
 8006f7c:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <USBH_HandleControl+0x24>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fcb 	.word	0x08006fcb
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	0800705b 	.word	0x0800705b
 8006f94:	08007093 	.word	0x08007093
 8006f98:	080070bd 	.word	0x080070bd
 8006f9c:	0800710f 	.word	0x0800710f
 8006fa0:	08007131 	.word	0x08007131
 8006fa4:	0800716d 	.word	0x0800716d
 8006fa8:	08007193 	.word	0x08007193
 8006fac:	080071d1 	.word	0x080071d1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f103 0110 	add.w	r1, r3, #16
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	795b      	ldrb	r3, [r3, #5]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f943 	bl	8007248 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	761a      	strb	r2, [r3, #24]
      break;
 8006fc8:	e139      	b.n	800723e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	795b      	ldrb	r3, [r3, #5]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fcc5 	bl	8007960 <USBH_LL_GetURBState>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d11e      	bne.n	800701e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fe8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8adb      	ldrh	r3, [r3, #22]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006ff2:	7b7b      	ldrb	r3, [r7, #13]
 8006ff4:	2b80      	cmp	r3, #128	; 0x80
 8006ff6:	d103      	bne.n	8007000 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ffe:	e115      	b.n	800722c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2205      	movs	r2, #5
 8007004:	761a      	strb	r2, [r3, #24]
      break;
 8007006:	e111      	b.n	800722c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007008:	7b7b      	ldrb	r3, [r7, #13]
 800700a:	2b80      	cmp	r3, #128	; 0x80
 800700c:	d103      	bne.n	8007016 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2209      	movs	r2, #9
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e10a      	b.n	800722c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2207      	movs	r2, #7
 800701a:	761a      	strb	r2, [r3, #24]
      break;
 800701c:	e106      	b.n	800722c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d003      	beq.n	800702c <USBH_HandleControl+0xcc>
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b02      	cmp	r3, #2
 8007028:	f040 8100 	bne.w	800722c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	220b      	movs	r2, #11
 8007030:	761a      	strb	r2, [r3, #24]
      break;
 8007032:	e0fb      	b.n	800722c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800703a:	b29a      	uxth	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6899      	ldr	r1, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	899a      	ldrh	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	791b      	ldrb	r3, [r3, #4]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f93a 	bl	80072c6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2204      	movs	r2, #4
 8007056:	761a      	strb	r2, [r3, #24]
      break;
 8007058:	e0f1      	b.n	800723e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	791b      	ldrb	r3, [r3, #4]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fc7d 	bl	8007960 <USBH_LL_GetURBState>
 8007066:	4603      	mov	r3, r0
 8007068:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d102      	bne.n	8007076 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2209      	movs	r2, #9
 8007074:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d102      	bne.n	8007082 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800707c:	2303      	movs	r3, #3
 800707e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007080:	e0d6      	b.n	8007230 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b04      	cmp	r3, #4
 8007086:	f040 80d3 	bne.w	8007230 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	220b      	movs	r2, #11
 800708e:	761a      	strb	r2, [r3, #24]
      break;
 8007090:	e0ce      	b.n	8007230 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6899      	ldr	r1, [r3, #8]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	899a      	ldrh	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	795b      	ldrb	r3, [r3, #5]
 800709e:	2001      	movs	r0, #1
 80070a0:	9000      	str	r0, [sp, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f8ea 	bl	800727c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2206      	movs	r2, #6
 80070b8:	761a      	strb	r2, [r3, #24]
      break;
 80070ba:	e0c0      	b.n	800723e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	795b      	ldrb	r3, [r3, #5]
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc4c 	bl	8007960 <USBH_LL_GetURBState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d103      	bne.n	80070da <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2207      	movs	r2, #7
 80070d6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80070d8:	e0ac      	b.n	8007234 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b05      	cmp	r3, #5
 80070de:	d105      	bne.n	80070ec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	220c      	movs	r2, #12
 80070e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80070e6:	2303      	movs	r3, #3
 80070e8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ea:	e0a3      	b.n	8007234 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d103      	bne.n	80070fa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2205      	movs	r2, #5
 80070f6:	761a      	strb	r2, [r3, #24]
      break;
 80070f8:	e09c      	b.n	8007234 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	f040 8099 	bne.w	8007234 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	220b      	movs	r2, #11
 8007106:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007108:	2302      	movs	r3, #2
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	e092      	b.n	8007234 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	791b      	ldrb	r3, [r3, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f8d5 	bl	80072c6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2208      	movs	r2, #8
 800712c:	761a      	strb	r2, [r3, #24]

      break;
 800712e:	e086      	b.n	800723e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fc12 	bl	8007960 <USBH_LL_GetURBState>
 800713c:	4603      	mov	r3, r0
 800713e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d105      	bne.n	8007152 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	220d      	movs	r2, #13
 800714a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007150:	e072      	b.n	8007238 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b04      	cmp	r3, #4
 8007156:	d103      	bne.n	8007160 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	220b      	movs	r2, #11
 800715c:	761a      	strb	r2, [r3, #24]
      break;
 800715e:	e06b      	b.n	8007238 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b05      	cmp	r3, #5
 8007164:	d168      	bne.n	8007238 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007166:	2303      	movs	r3, #3
 8007168:	73fb      	strb	r3, [r7, #15]
      break;
 800716a:	e065      	b.n	8007238 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	795b      	ldrb	r3, [r3, #5]
 8007170:	2201      	movs	r2, #1
 8007172:	9200      	str	r2, [sp, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	2100      	movs	r1, #0
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f87f 	bl	800727c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	220a      	movs	r2, #10
 800718e:	761a      	strb	r2, [r3, #24]
      break;
 8007190:	e055      	b.n	800723e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	795b      	ldrb	r3, [r3, #5]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fbe1 	bl	8007960 <USBH_LL_GetURBState>
 800719e:	4603      	mov	r3, r0
 80071a0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d105      	bne.n	80071b4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	220d      	movs	r2, #13
 80071b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071b2:	e043      	b.n	800723c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d103      	bne.n	80071c2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2209      	movs	r2, #9
 80071be:	761a      	strb	r2, [r3, #24]
      break;
 80071c0:	e03c      	b.n	800723c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b04      	cmp	r3, #4
 80071c6:	d139      	bne.n	800723c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	220b      	movs	r2, #11
 80071cc:	761a      	strb	r2, [r3, #24]
      break;
 80071ce:	e035      	b.n	800723c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7e5b      	ldrb	r3, [r3, #25]
 80071d4:	3301      	adds	r3, #1
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	765a      	strb	r2, [r3, #25]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7e5b      	ldrb	r3, [r3, #25]
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d806      	bhi.n	80071f2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80071f0:	e025      	b.n	800723e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f8:	2106      	movs	r1, #6
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	795b      	ldrb	r3, [r3, #5]
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f90c 	bl	8007428 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	791b      	ldrb	r3, [r3, #4]
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f906 	bl	8007428 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	73fb      	strb	r3, [r7, #15]
      break;
 8007226:	e00a      	b.n	800723e <USBH_HandleControl+0x2de>

    default:
      break;
 8007228:	bf00      	nop
 800722a:	e008      	b.n	800723e <USBH_HandleControl+0x2de>
      break;
 800722c:	bf00      	nop
 800722e:	e006      	b.n	800723e <USBH_HandleControl+0x2de>
      break;
 8007230:	bf00      	nop
 8007232:	e004      	b.n	800723e <USBH_HandleControl+0x2de>
      break;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <USBH_HandleControl+0x2de>
      break;
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <USBH_HandleControl+0x2de>
      break;
 800723c:	bf00      	nop
  }

  return status;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af04      	add	r7, sp, #16
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007256:	79f9      	ldrb	r1, [r7, #7]
 8007258:	2300      	movs	r3, #0
 800725a:	9303      	str	r3, [sp, #12]
 800725c:	2308      	movs	r3, #8
 800725e:	9302      	str	r3, [sp, #8]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	2200      	movs	r2, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fb46 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af04      	add	r7, sp, #16
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	4611      	mov	r1, r2
 8007288:	461a      	mov	r2, r3
 800728a:	460b      	mov	r3, r1
 800728c:	80fb      	strh	r3, [r7, #6]
 800728e:	4613      	mov	r3, r2
 8007290:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072a0:	7979      	ldrb	r1, [r7, #5]
 80072a2:	7e3b      	ldrb	r3, [r7, #24]
 80072a4:	9303      	str	r3, [sp, #12]
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	9302      	str	r3, [sp, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	2301      	movs	r3, #1
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	2200      	movs	r2, #0
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fb21 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b088      	sub	sp, #32
 80072ca:	af04      	add	r7, sp, #16
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	4611      	mov	r1, r2
 80072d2:	461a      	mov	r2, r3
 80072d4:	460b      	mov	r3, r1
 80072d6:	80fb      	strh	r3, [r7, #6]
 80072d8:	4613      	mov	r3, r2
 80072da:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80072dc:	7979      	ldrb	r1, [r7, #5]
 80072de:	2300      	movs	r3, #0
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	88fb      	ldrh	r3, [r7, #6]
 80072e4:	9302      	str	r3, [sp, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	2301      	movs	r3, #1
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	2300      	movs	r3, #0
 80072f0:	2201      	movs	r2, #1
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fb03 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80072f8:	2300      	movs	r3, #0

}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b088      	sub	sp, #32
 8007306:	af04      	add	r7, sp, #16
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	4611      	mov	r1, r2
 800730e:	461a      	mov	r2, r3
 8007310:	460b      	mov	r3, r1
 8007312:	80fb      	strh	r3, [r7, #6]
 8007314:	4613      	mov	r3, r2
 8007316:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007326:	7979      	ldrb	r1, [r7, #5]
 8007328:	7e3b      	ldrb	r3, [r7, #24]
 800732a:	9303      	str	r3, [sp, #12]
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	9302      	str	r3, [sp, #8]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	2301      	movs	r3, #1
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2302      	movs	r3, #2
 800733a:	2200      	movs	r2, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fade 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af04      	add	r7, sp, #16
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4611      	mov	r1, r2
 8007358:	461a      	mov	r2, r3
 800735a:	460b      	mov	r3, r1
 800735c:	80fb      	strh	r3, [r7, #6]
 800735e:	4613      	mov	r3, r2
 8007360:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007362:	7979      	ldrb	r1, [r7, #5]
 8007364:	2300      	movs	r3, #0
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	9302      	str	r3, [sp, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	9301      	str	r3, [sp, #4]
 8007370:	2301      	movs	r3, #1
 8007372:	9300      	str	r3, [sp, #0]
 8007374:	2302      	movs	r3, #2
 8007376:	2201      	movs	r2, #1
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fac0 	bl	80078fe <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af04      	add	r7, sp, #16
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	4603      	mov	r3, r0
 8007398:	70fb      	strb	r3, [r7, #3]
 800739a:	460b      	mov	r3, r1
 800739c:	70bb      	strb	r3, [r7, #2]
 800739e:	4613      	mov	r3, r2
 80073a0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073a2:	7878      	ldrb	r0, [r7, #1]
 80073a4:	78ba      	ldrb	r2, [r7, #2]
 80073a6:	78f9      	ldrb	r1, [r7, #3]
 80073a8:	8b3b      	ldrh	r3, [r7, #24]
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	7d3b      	ldrb	r3, [r7, #20]
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	7c3b      	ldrb	r3, [r7, #16]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4603      	mov	r3, r0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa53 	bl	8007862 <USBH_LL_OpenPipe>

  return USBH_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	460b      	mov	r3, r1
 80073d0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa72 	bl	80078c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f836 	bl	8007464 <USBH_GetFreePipe>
 80073f8:	4603      	mov	r3, r0
 80073fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007402:	4293      	cmp	r3, r2
 8007404:	d00a      	beq.n	800741c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	33e0      	adds	r3, #224	; 0xe0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	440b      	add	r3, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	b2db      	uxtb	r3, r3
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	2b0a      	cmp	r3, #10
 8007438:	d80d      	bhi.n	8007456 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	33e0      	adds	r3, #224	; 0xe0
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	33e0      	adds	r3, #224	; 0xe0
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
 8007474:	e00f      	b.n	8007496 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	33e0      	adds	r3, #224	; 0xe0
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	4413      	add	r3, r2
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	b29b      	uxth	r3, r3
 800748e:	e007      	b.n	80074a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	3301      	adds	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b0a      	cmp	r3, #10
 800749a:	d9ec      	bls.n	8007476 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800749c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074b0:	2201      	movs	r2, #1
 80074b2:	490e      	ldr	r1, [pc, #56]	; (80074ec <MX_USB_HOST_Init+0x40>)
 80074b4:	480e      	ldr	r0, [pc, #56]	; (80074f0 <MX_USB_HOST_Init+0x44>)
 80074b6:	f7fe fca1 	bl	8005dfc <USBH_Init>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074c0:	f7f9 fa4a 	bl	8000958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074c4:	490b      	ldr	r1, [pc, #44]	; (80074f4 <MX_USB_HOST_Init+0x48>)
 80074c6:	480a      	ldr	r0, [pc, #40]	; (80074f0 <MX_USB_HOST_Init+0x44>)
 80074c8:	f7fe fd26 	bl	8005f18 <USBH_RegisterClass>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074d2:	f7f9 fa41 	bl	8000958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074d6:	4806      	ldr	r0, [pc, #24]	; (80074f0 <MX_USB_HOST_Init+0x44>)
 80074d8:	f7fe fdaa 	bl	8006030 <USBH_Start>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80074e2:	f7f9 fa39 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	200001b8 	.word	0x200001b8
 80074f4:	2000000c 	.word	0x2000000c

080074f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80074fc:	4802      	ldr	r0, [pc, #8]	; (8007508 <MX_USB_HOST_Process+0x10>)
 80074fe:	f7fe fda7 	bl	8006050 <USBH_Process>
}
 8007502:	bf00      	nop
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200001b8 	.word	0x200001b8

0800750c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	3b01      	subs	r3, #1
 800751c:	2b04      	cmp	r3, #4
 800751e:	d819      	bhi.n	8007554 <USBH_UserProcess+0x48>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USBH_UserProcess+0x1c>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	08007555 	.word	0x08007555
 800752c:	08007545 	.word	0x08007545
 8007530:	08007555 	.word	0x08007555
 8007534:	0800754d 	.word	0x0800754d
 8007538:	0800753d 	.word	0x0800753d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <USBH_UserProcess+0x58>)
 800753e:	2203      	movs	r2, #3
 8007540:	701a      	strb	r2, [r3, #0]
  break;
 8007542:	e008      	b.n	8007556 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007544:	4b07      	ldr	r3, [pc, #28]	; (8007564 <USBH_UserProcess+0x58>)
 8007546:	2202      	movs	r2, #2
 8007548:	701a      	strb	r2, [r3, #0]
  break;
 800754a:	e004      	b.n	8007556 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800754c:	4b05      	ldr	r3, [pc, #20]	; (8007564 <USBH_UserProcess+0x58>)
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
  break;
 8007552:	e000      	b.n	8007556 <USBH_UserProcess+0x4a>

  default:
  break;
 8007554:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	200000b4 	.word	0x200000b4

08007568 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007570:	f107 0314 	add.w	r3, r7, #20
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007588:	d147      	bne.n	800761a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758a:	2300      	movs	r3, #0
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	4b25      	ldr	r3, [pc, #148]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	4a24      	ldr	r2, [pc, #144]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 8007594:	f043 0301 	orr.w	r3, r3, #1
 8007598:	6313      	str	r3, [r2, #48]	; 0x30
 800759a:	4b22      	ldr	r3, [pc, #136]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075b4:	f107 0314 	add.w	r3, r7, #20
 80075b8:	4619      	mov	r1, r3
 80075ba:	481b      	ldr	r0, [pc, #108]	; (8007628 <HAL_HCD_MspInit+0xc0>)
 80075bc:	f7f9 fd80 	bl	80010c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c6:	2302      	movs	r3, #2
 80075c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ce:	2300      	movs	r3, #0
 80075d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075d2:	230a      	movs	r3, #10
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d6:	f107 0314 	add.w	r3, r7, #20
 80075da:	4619      	mov	r1, r3
 80075dc:	4812      	ldr	r0, [pc, #72]	; (8007628 <HAL_HCD_MspInit+0xc0>)
 80075de:	f7f9 fd6f 	bl	80010c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075e2:	4b10      	ldr	r3, [pc, #64]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 80075e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ec:	6353      	str	r3, [r2, #52]	; 0x34
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	4a0b      	ldr	r2, [pc, #44]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 80075f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075fc:	6453      	str	r3, [r2, #68]	; 0x44
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <HAL_HCD_MspInit+0xbc>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800760a:	2200      	movs	r2, #0
 800760c:	2100      	movs	r1, #0
 800760e:	2043      	movs	r0, #67	; 0x43
 8007610:	f7f9 fd1f 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007614:	2043      	movs	r0, #67	; 0x43
 8007616:	f7f9 fd38 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800761a:	bf00      	nop
 800761c:	3728      	adds	r7, #40	; 0x28
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40020000 	.word	0x40020000

0800762c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f8db 	bl	80067f6 <USBH_LL_IncTimer>
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff f913 	bl	8006882 <USBH_LL_Connect>
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007672:	4618      	mov	r0, r3
 8007674:	f7ff f91c 	bl	80068b0 <USBH_LL_Disconnect>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
 800768c:	4613      	mov	r3, r2
 800768e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff f8cd 	bl	800684a <USBH_LL_PortEnabled>
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f8cd 	bl	8006866 <USBH_LL_PortDisabled>
}
 80076cc:	bf00      	nop
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d12a      	bne.n	800773c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80076e6:	4a18      	ldr	r2, [pc, #96]	; (8007748 <USBH_LL_Init+0x74>)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a15      	ldr	r2, [pc, #84]	; (8007748 <USBH_LL_Init+0x74>)
 80076f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <USBH_LL_Init+0x74>)
 80076f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <USBH_LL_Init+0x74>)
 8007700:	2208      	movs	r2, #8
 8007702:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <USBH_LL_Init+0x74>)
 8007706:	2201      	movs	r2, #1
 8007708:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <USBH_LL_Init+0x74>)
 800770c:	2200      	movs	r2, #0
 800770e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007710:	4b0d      	ldr	r3, [pc, #52]	; (8007748 <USBH_LL_Init+0x74>)
 8007712:	2202      	movs	r2, #2
 8007714:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <USBH_LL_Init+0x74>)
 8007718:	2200      	movs	r2, #0
 800771a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800771c:	480a      	ldr	r0, [pc, #40]	; (8007748 <USBH_LL_Init+0x74>)
 800771e:	f7f9 fe9d 	bl	800145c <HAL_HCD_Init>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007728:	f7f9 f916 	bl	8000958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800772c:	4806      	ldr	r0, [pc, #24]	; (8007748 <USBH_LL_Init+0x74>)
 800772e:	f7fa fa80 	bl	8001c32 <HAL_HCD_GetCurrentFrame>
 8007732:	4603      	mov	r3, r0
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7ff f84e 	bl	80067d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000590 	.word	0x20000590

0800774c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007762:	4618      	mov	r0, r3
 8007764:	f7fa f9ef 	bl	8001b46 <HAL_HCD_Start>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f95c 	bl	8007a2c <USBH_Get_USB_Status>
 8007774:	4603      	mov	r3, r0
 8007776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007778:	7bbb      	ldrb	r3, [r7, #14]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007798:	4618      	mov	r0, r3
 800779a:	f7fa f9f7 	bl	8001b8c <HAL_HCD_Stop>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 f941 	bl	8007a2c <USBH_Get_USB_Status>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fa fa3f 	bl	8001c4e <HAL_HCD_GetCurrentSpeed>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d00c      	beq.n	80077f0 <USBH_LL_GetSpeed+0x38>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d80d      	bhi.n	80077f6 <USBH_LL_GetSpeed+0x3e>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <USBH_LL_GetSpeed+0x2c>
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d003      	beq.n	80077ea <USBH_LL_GetSpeed+0x32>
 80077e2:	e008      	b.n	80077f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
    break;
 80077e8:	e008      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
    break;
 80077ee:	e005      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80077f0:	2302      	movs	r3, #2
 80077f2:	73fb      	strb	r3, [r7, #15]
    break;
 80077f4:	e002      	b.n	80077fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80077f6:	2301      	movs	r3, #1
 80077f8:	73fb      	strb	r3, [r7, #15]
    break;
 80077fa:	bf00      	nop
  }
  return  speed;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007812:	2300      	movs	r3, #0
 8007814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800781c:	4618      	mov	r0, r3
 800781e:	f7fa f9d2 	bl	8001bc6 <HAL_HCD_ResetPort>
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f8ff 	bl	8007a2c <USBH_Get_USB_Status>
 800782e:	4603      	mov	r3, r0
 8007830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007832:	7bbb      	ldrb	r3, [r7, #14]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	4611      	mov	r1, r2
 8007852:	4618      	mov	r0, r3
 8007854:	f7fa f9d9 	bl	8001c0a <HAL_HCD_HC_GetXferCount>
 8007858:	4603      	mov	r3, r0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007862:	b590      	push	{r4, r7, lr}
 8007864:	b089      	sub	sp, #36	; 0x24
 8007866:	af04      	add	r7, sp, #16
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	461a      	mov	r2, r3
 8007870:	4603      	mov	r3, r0
 8007872:	70fb      	strb	r3, [r7, #3]
 8007874:	460b      	mov	r3, r1
 8007876:	70bb      	strb	r3, [r7, #2]
 8007878:	4613      	mov	r3, r2
 800787a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800788a:	787c      	ldrb	r4, [r7, #1]
 800788c:	78ba      	ldrb	r2, [r7, #2]
 800788e:	78f9      	ldrb	r1, [r7, #3]
 8007890:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007892:	9302      	str	r3, [sp, #8]
 8007894:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	4623      	mov	r3, r4
 80078a2:	f7f9 fe3d 	bl	8001520 <HAL_HCD_HC_Init>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f8bd 	bl	8007a2c <USBH_Get_USB_Status>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd90      	pop	{r4, r7, pc}

080078c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	4611      	mov	r1, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7f9 fead 	bl	800163e <HAL_HCD_HC_Halt>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f89e 	bl	8007a2c <USBH_Get_USB_Status>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b089      	sub	sp, #36	; 0x24
 8007902:	af04      	add	r7, sp, #16
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	461a      	mov	r2, r3
 800790c:	4603      	mov	r3, r0
 800790e:	70fb      	strb	r3, [r7, #3]
 8007910:	460b      	mov	r3, r1
 8007912:	70bb      	strb	r3, [r7, #2]
 8007914:	4613      	mov	r3, r2
 8007916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007926:	787c      	ldrb	r4, [r7, #1]
 8007928:	78ba      	ldrb	r2, [r7, #2]
 800792a:	78f9      	ldrb	r1, [r7, #3]
 800792c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4623      	mov	r3, r4
 8007942:	f7f9 fe9f 	bl	8001684 <HAL_HCD_HC_SubmitRequest>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 f86d 	bl	8007a2c <USBH_Get_USB_Status>
 8007952:	4603      	mov	r3, r0
 8007954:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007956:	7bbb      	ldrb	r3, [r7, #14]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	bd90      	pop	{r4, r7, pc}

08007960 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	4611      	mov	r1, r2
 8007976:	4618      	mov	r0, r3
 8007978:	f7fa f933 	bl	8001be2 <HAL_HCD_HC_GetURBState>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	460b      	mov	r3, r1
 8007990:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007998:	2b01      	cmp	r3, #1
 800799a:	d103      	bne.n	80079a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f870 	bl	8007a84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079a4:	20c8      	movs	r0, #200	; 0xc8
 80079a6:	f7f9 fa55 	bl	8000e54 <HAL_Delay>
  return USBH_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
 80079c0:	4613      	mov	r3, r2
 80079c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	212c      	movs	r1, #44	; 0x2c
 80079d2:	fb01 f303 	mul.w	r3, r1, r3
 80079d6:	4413      	add	r3, r2
 80079d8:	333b      	adds	r3, #59	; 0x3b
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	212c      	movs	r1, #44	; 0x2c
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	4413      	add	r3, r2
 80079ec:	3354      	adds	r3, #84	; 0x54
 80079ee:	78ba      	ldrb	r2, [r7, #2]
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e008      	b.n	8007a06 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	212c      	movs	r1, #44	; 0x2c
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	4413      	add	r3, r2
 8007a00:	3355      	adds	r3, #85	; 0x55
 8007a02:	78ba      	ldrb	r2, [r7, #2]
 8007a04:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7f9 fa19 	bl	8000e54 <HAL_Delay>
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d817      	bhi.n	8007a70 <USBH_Get_USB_Status+0x44>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USBH_Get_USB_Status+0x1c>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a5f 	.word	0x08007a5f
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a6b 	.word	0x08007a6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5c:	e00b      	b.n	8007a76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	73fb      	strb	r3, [r7, #15]
    break;
 8007a62:	e008      	b.n	8007a76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
    break;
 8007a68:	e005      	b.n	8007a76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6e:	e002      	b.n	8007a76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	bf00      	nop
  }
  return usb_status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
 8007a9c:	e001      	b.n	8007aa2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4803      	ldr	r0, [pc, #12]	; (8007ab8 <MX_DriverVbusFS+0x34>)
 8007aaa:	f7f9 fca5 	bl	80013f8 <HAL_GPIO_WritePin>
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40020800 	.word	0x40020800

08007abc <__errno>:
 8007abc:	4b01      	ldr	r3, [pc, #4]	; (8007ac4 <__errno+0x8>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	2000002c 	.word	0x2000002c

08007ac8 <__libc_init_array>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	4d0d      	ldr	r5, [pc, #52]	; (8007b00 <__libc_init_array+0x38>)
 8007acc:	4c0d      	ldr	r4, [pc, #52]	; (8007b04 <__libc_init_array+0x3c>)
 8007ace:	1b64      	subs	r4, r4, r5
 8007ad0:	10a4      	asrs	r4, r4, #2
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	42a6      	cmp	r6, r4
 8007ad6:	d109      	bne.n	8007aec <__libc_init_array+0x24>
 8007ad8:	4d0b      	ldr	r5, [pc, #44]	; (8007b08 <__libc_init_array+0x40>)
 8007ada:	4c0c      	ldr	r4, [pc, #48]	; (8007b0c <__libc_init_array+0x44>)
 8007adc:	f000 f8f8 	bl	8007cd0 <_init>
 8007ae0:	1b64      	subs	r4, r4, r5
 8007ae2:	10a4      	asrs	r4, r4, #2
 8007ae4:	2600      	movs	r6, #0
 8007ae6:	42a6      	cmp	r6, r4
 8007ae8:	d105      	bne.n	8007af6 <__libc_init_array+0x2e>
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af0:	4798      	blx	r3
 8007af2:	3601      	adds	r6, #1
 8007af4:	e7ee      	b.n	8007ad4 <__libc_init_array+0xc>
 8007af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afa:	4798      	blx	r3
 8007afc:	3601      	adds	r6, #1
 8007afe:	e7f2      	b.n	8007ae6 <__libc_init_array+0x1e>
 8007b00:	08007d0c 	.word	0x08007d0c
 8007b04:	08007d0c 	.word	0x08007d0c
 8007b08:	08007d0c 	.word	0x08007d0c
 8007b0c:	08007d10 	.word	0x08007d10

08007b10 <malloc>:
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <malloc+0xc>)
 8007b12:	4601      	mov	r1, r0
 8007b14:	6818      	ldr	r0, [r3, #0]
 8007b16:	f000 b863 	b.w	8007be0 <_malloc_r>
 8007b1a:	bf00      	nop
 8007b1c:	2000002c 	.word	0x2000002c

08007b20 <free>:
 8007b20:	4b02      	ldr	r3, [pc, #8]	; (8007b2c <free+0xc>)
 8007b22:	4601      	mov	r1, r0
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	f000 b80b 	b.w	8007b40 <_free_r>
 8007b2a:	bf00      	nop
 8007b2c:	2000002c 	.word	0x2000002c

08007b30 <memset>:
 8007b30:	4402      	add	r2, r0
 8007b32:	4603      	mov	r3, r0
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d100      	bne.n	8007b3a <memset+0xa>
 8007b38:	4770      	bx	lr
 8007b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b3e:	e7f9      	b.n	8007b34 <memset+0x4>

08007b40 <_free_r>:
 8007b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b42:	2900      	cmp	r1, #0
 8007b44:	d048      	beq.n	8007bd8 <_free_r+0x98>
 8007b46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b4a:	9001      	str	r0, [sp, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007b52:	bfb8      	it	lt
 8007b54:	18e4      	addlt	r4, r4, r3
 8007b56:	f000 f8ad 	bl	8007cb4 <__malloc_lock>
 8007b5a:	4a20      	ldr	r2, [pc, #128]	; (8007bdc <_free_r+0x9c>)
 8007b5c:	9801      	ldr	r0, [sp, #4]
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	4615      	mov	r5, r2
 8007b62:	b933      	cbnz	r3, 8007b72 <_free_r+0x32>
 8007b64:	6063      	str	r3, [r4, #4]
 8007b66:	6014      	str	r4, [r2, #0]
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b6e:	f000 b8a7 	b.w	8007cc0 <__malloc_unlock>
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	d90b      	bls.n	8007b8e <_free_r+0x4e>
 8007b76:	6821      	ldr	r1, [r4, #0]
 8007b78:	1862      	adds	r2, r4, r1
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	bf04      	itt	eq
 8007b7e:	681a      	ldreq	r2, [r3, #0]
 8007b80:	685b      	ldreq	r3, [r3, #4]
 8007b82:	6063      	str	r3, [r4, #4]
 8007b84:	bf04      	itt	eq
 8007b86:	1852      	addeq	r2, r2, r1
 8007b88:	6022      	streq	r2, [r4, #0]
 8007b8a:	602c      	str	r4, [r5, #0]
 8007b8c:	e7ec      	b.n	8007b68 <_free_r+0x28>
 8007b8e:	461a      	mov	r2, r3
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	b10b      	cbz	r3, 8007b98 <_free_r+0x58>
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	d9fa      	bls.n	8007b8e <_free_r+0x4e>
 8007b98:	6811      	ldr	r1, [r2, #0]
 8007b9a:	1855      	adds	r5, r2, r1
 8007b9c:	42a5      	cmp	r5, r4
 8007b9e:	d10b      	bne.n	8007bb8 <_free_r+0x78>
 8007ba0:	6824      	ldr	r4, [r4, #0]
 8007ba2:	4421      	add	r1, r4
 8007ba4:	1854      	adds	r4, r2, r1
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	d1dd      	bne.n	8007b68 <_free_r+0x28>
 8007bac:	681c      	ldr	r4, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	6053      	str	r3, [r2, #4]
 8007bb2:	4421      	add	r1, r4
 8007bb4:	6011      	str	r1, [r2, #0]
 8007bb6:	e7d7      	b.n	8007b68 <_free_r+0x28>
 8007bb8:	d902      	bls.n	8007bc0 <_free_r+0x80>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	6003      	str	r3, [r0, #0]
 8007bbe:	e7d3      	b.n	8007b68 <_free_r+0x28>
 8007bc0:	6825      	ldr	r5, [r4, #0]
 8007bc2:	1961      	adds	r1, r4, r5
 8007bc4:	428b      	cmp	r3, r1
 8007bc6:	bf04      	itt	eq
 8007bc8:	6819      	ldreq	r1, [r3, #0]
 8007bca:	685b      	ldreq	r3, [r3, #4]
 8007bcc:	6063      	str	r3, [r4, #4]
 8007bce:	bf04      	itt	eq
 8007bd0:	1949      	addeq	r1, r1, r5
 8007bd2:	6021      	streq	r1, [r4, #0]
 8007bd4:	6054      	str	r4, [r2, #4]
 8007bd6:	e7c7      	b.n	8007b68 <_free_r+0x28>
 8007bd8:	b003      	add	sp, #12
 8007bda:	bd30      	pop	{r4, r5, pc}
 8007bdc:	200000b8 	.word	0x200000b8

08007be0 <_malloc_r>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	1ccd      	adds	r5, r1, #3
 8007be4:	f025 0503 	bic.w	r5, r5, #3
 8007be8:	3508      	adds	r5, #8
 8007bea:	2d0c      	cmp	r5, #12
 8007bec:	bf38      	it	cc
 8007bee:	250c      	movcc	r5, #12
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	db01      	blt.n	8007bfa <_malloc_r+0x1a>
 8007bf6:	42a9      	cmp	r1, r5
 8007bf8:	d903      	bls.n	8007c02 <_malloc_r+0x22>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	6033      	str	r3, [r6, #0]
 8007bfe:	2000      	movs	r0, #0
 8007c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c02:	f000 f857 	bl	8007cb4 <__malloc_lock>
 8007c06:	4921      	ldr	r1, [pc, #132]	; (8007c8c <_malloc_r+0xac>)
 8007c08:	680a      	ldr	r2, [r1, #0]
 8007c0a:	4614      	mov	r4, r2
 8007c0c:	b99c      	cbnz	r4, 8007c36 <_malloc_r+0x56>
 8007c0e:	4f20      	ldr	r7, [pc, #128]	; (8007c90 <_malloc_r+0xb0>)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	b923      	cbnz	r3, 8007c1e <_malloc_r+0x3e>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4630      	mov	r0, r6
 8007c18:	f000 f83c 	bl	8007c94 <_sbrk_r>
 8007c1c:	6038      	str	r0, [r7, #0]
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4630      	mov	r0, r6
 8007c22:	f000 f837 	bl	8007c94 <_sbrk_r>
 8007c26:	1c43      	adds	r3, r0, #1
 8007c28:	d123      	bne.n	8007c72 <_malloc_r+0x92>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 f846 	bl	8007cc0 <__malloc_unlock>
 8007c34:	e7e3      	b.n	8007bfe <_malloc_r+0x1e>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	1b5b      	subs	r3, r3, r5
 8007c3a:	d417      	bmi.n	8007c6c <_malloc_r+0x8c>
 8007c3c:	2b0b      	cmp	r3, #11
 8007c3e:	d903      	bls.n	8007c48 <_malloc_r+0x68>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	441c      	add	r4, r3
 8007c44:	6025      	str	r5, [r4, #0]
 8007c46:	e004      	b.n	8007c52 <_malloc_r+0x72>
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	42a2      	cmp	r2, r4
 8007c4c:	bf0c      	ite	eq
 8007c4e:	600b      	streq	r3, [r1, #0]
 8007c50:	6053      	strne	r3, [r2, #4]
 8007c52:	4630      	mov	r0, r6
 8007c54:	f000 f834 	bl	8007cc0 <__malloc_unlock>
 8007c58:	f104 000b 	add.w	r0, r4, #11
 8007c5c:	1d23      	adds	r3, r4, #4
 8007c5e:	f020 0007 	bic.w	r0, r0, #7
 8007c62:	1ac2      	subs	r2, r0, r3
 8007c64:	d0cc      	beq.n	8007c00 <_malloc_r+0x20>
 8007c66:	1a1b      	subs	r3, r3, r0
 8007c68:	50a3      	str	r3, [r4, r2]
 8007c6a:	e7c9      	b.n	8007c00 <_malloc_r+0x20>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	6864      	ldr	r4, [r4, #4]
 8007c70:	e7cc      	b.n	8007c0c <_malloc_r+0x2c>
 8007c72:	1cc4      	adds	r4, r0, #3
 8007c74:	f024 0403 	bic.w	r4, r4, #3
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d0e3      	beq.n	8007c44 <_malloc_r+0x64>
 8007c7c:	1a21      	subs	r1, r4, r0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	f000 f808 	bl	8007c94 <_sbrk_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d1dd      	bne.n	8007c44 <_malloc_r+0x64>
 8007c88:	e7cf      	b.n	8007c2a <_malloc_r+0x4a>
 8007c8a:	bf00      	nop
 8007c8c:	200000b8 	.word	0x200000b8
 8007c90:	200000bc 	.word	0x200000bc

08007c94 <_sbrk_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d06      	ldr	r5, [pc, #24]	; (8007cb0 <_sbrk_r+0x1c>)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7f8 fff4 	bl	8000c8c <_sbrk>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_sbrk_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_sbrk_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	20000894 	.word	0x20000894

08007cb4 <__malloc_lock>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <__malloc_lock+0x8>)
 8007cb6:	f000 b809 	b.w	8007ccc <__retarget_lock_acquire_recursive>
 8007cba:	bf00      	nop
 8007cbc:	2000089c 	.word	0x2000089c

08007cc0 <__malloc_unlock>:
 8007cc0:	4801      	ldr	r0, [pc, #4]	; (8007cc8 <__malloc_unlock+0x8>)
 8007cc2:	f000 b804 	b.w	8007cce <__retarget_lock_release_recursive>
 8007cc6:	bf00      	nop
 8007cc8:	2000089c 	.word	0x2000089c

08007ccc <__retarget_lock_acquire_recursive>:
 8007ccc:	4770      	bx	lr

08007cce <__retarget_lock_release_recursive>:
 8007cce:	4770      	bx	lr

08007cd0 <_init>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr

08007cdc <_fini>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	bf00      	nop
 8007ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce2:	bc08      	pop	{r3}
 8007ce4:	469e      	mov	lr, r3
 8007ce6:	4770      	bx	lr
