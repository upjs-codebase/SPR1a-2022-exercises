
pwm01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d6c  08007d6c  00017d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d88  08007d88  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007d88  08007d88  00017d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d90  08007d90  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000858  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e8  200008e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9da  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f3c  00000000  00000000  0003ea9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000429d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e0  00000000  00000000  00044038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024914  00000000  00000000  00045518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c759  00000000  00000000  00069e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b62  00000000  00000000  00086585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a0e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006110  00000000  00000000  0015a13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d54 	.word	0x08007d54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007d54 	.word	0x08007d54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fd59 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f885 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa19 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8eb 	bl	80006ac <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f917 	bl	8000708 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f945 	bl	8000768 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004de:	f007 f87f 	bl	80075e0 <MX_USB_HOST_Init>
  MX_TIM4_Init();
 80004e2:	f000 f977 	bl	80007d4 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80004e6:	2100      	movs	r1, #0
 80004e8:	483a      	ldr	r0, [pc, #232]	; (80005d4 <main+0x114>)
 80004ea:	f004 faaf 	bl	8004a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4838      	ldr	r0, [pc, #224]	; (80005d4 <main+0x114>)
 80004f2:	f004 faab 	bl	8004a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004f6:	2108      	movs	r1, #8
 80004f8:	4836      	ldr	r0, [pc, #216]	; (80005d4 <main+0x114>)
 80004fa:	f004 faa7 	bl	8004a4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80004fe:	210c      	movs	r1, #12
 8000500:	4834      	ldr	r0, [pc, #208]	; (80005d4 <main+0x114>)
 8000502:	f004 faa3 	bl	8004a4c <HAL_TIM_PWM_Start>

  uint16_t step = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	80fb      	strh	r3, [r7, #6]
  uint16_t phase = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	80bb      	strh	r3, [r7, #4]

  while (1)
  {
	  if(phase%8 == 0 || phase%8 == 1) __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, step);
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	b29b      	uxth	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d005      	beq.n	8000526 <main+0x66>
 800051a:	88bb      	ldrh	r3, [r7, #4]
 800051c:	f003 0307 	and.w	r3, r3, #7
 8000520:	b29b      	uxth	r3, r3
 8000522:	2b01      	cmp	r3, #1
 8000524:	d103      	bne.n	800052e <main+0x6e>
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <main+0x114>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	88fa      	ldrh	r2, [r7, #6]
 800052c:	635a      	str	r2, [r3, #52]	; 0x34
	  if(phase%8 == 2 || phase%8 == 3) __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, step);
 800052e:	88bb      	ldrh	r3, [r7, #4]
 8000530:	f003 0307 	and.w	r3, r3, #7
 8000534:	b29b      	uxth	r3, r3
 8000536:	2b02      	cmp	r3, #2
 8000538:	d005      	beq.n	8000546 <main+0x86>
 800053a:	88bb      	ldrh	r3, [r7, #4]
 800053c:	f003 0307 	and.w	r3, r3, #7
 8000540:	b29b      	uxth	r3, r3
 8000542:	2b03      	cmp	r3, #3
 8000544:	d103      	bne.n	800054e <main+0x8e>
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <main+0x114>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	88fa      	ldrh	r2, [r7, #6]
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
	  if(phase%8 == 4 || phase%8 == 5) __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, step);
 800054e:	88bb      	ldrh	r3, [r7, #4]
 8000550:	f003 0307 	and.w	r3, r3, #7
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b04      	cmp	r3, #4
 8000558:	d005      	beq.n	8000566 <main+0xa6>
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	f003 0307 	and.w	r3, r3, #7
 8000560:	b29b      	uxth	r3, r3
 8000562:	2b05      	cmp	r3, #5
 8000564:	d103      	bne.n	800056e <main+0xae>
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <main+0x114>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	88fa      	ldrh	r2, [r7, #6]
 800056c:	639a      	str	r2, [r3, #56]	; 0x38
	  if(phase%8 == 6 || phase%8 == 7) __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, step);
 800056e:	88bb      	ldrh	r3, [r7, #4]
 8000570:	f003 0307 	and.w	r3, r3, #7
 8000574:	b29b      	uxth	r3, r3
 8000576:	2b06      	cmp	r3, #6
 8000578:	d005      	beq.n	8000586 <main+0xc6>
 800057a:	88bb      	ldrh	r3, [r7, #4]
 800057c:	f003 0307 	and.w	r3, r3, #7
 8000580:	b29b      	uxth	r3, r3
 8000582:	2b07      	cmp	r3, #7
 8000584:	d103      	bne.n	800058e <main+0xce>
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <main+0x114>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	88fa      	ldrh	r2, [r7, #6]
 800058c:	641a      	str	r2, [r3, #64]	; 0x40


	  if(phase%2 == 0) {
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	b29b      	uxth	r3, r3
 8000596:	2b00      	cmp	r3, #0
 8000598:	d109      	bne.n	80005ae <main+0xee>
		  if(step == 1000) phase++;
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005a0:	d102      	bne.n	80005a8 <main+0xe8>
 80005a2:	88bb      	ldrh	r3, [r7, #4]
 80005a4:	3301      	adds	r3, #1
 80005a6:	80bb      	strh	r3, [r7, #4]
		  step += 10;
 80005a8:	88fb      	ldrh	r3, [r7, #6]
 80005aa:	330a      	adds	r3, #10
 80005ac:	80fb      	strh	r3, [r7, #6]
	  }

	  if(phase%2 == 1) {
 80005ae:	88bb      	ldrh	r3, [r7, #4]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d008      	beq.n	80005cc <main+0x10c>
		  if(step == 0) phase++;
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <main+0x106>
 80005c0:	88bb      	ldrh	r3, [r7, #4]
 80005c2:	3301      	adds	r3, #1
 80005c4:	80bb      	strh	r3, [r7, #4]
		  step -= 10;
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	3b0a      	subs	r3, #10
 80005ca:	80fb      	strh	r3, [r7, #6]
	  }

	  HAL_Delay(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f000 fd47 	bl	8001060 <HAL_Delay>
	  if(phase%8 == 0 || phase%8 == 1) __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, step);
 80005d2:	e79c      	b.n	800050e <main+0x4e>
 80005d4:	200000bc 	.word	0x200000bc

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fae4 	bl	8007bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fb22 	bl	8003ca8 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066a:	f000 fa47 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2105      	movs	r1, #5
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fd83 	bl	8004198 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 fa30 	bl	8000afc <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f002 fcf9 	bl	80030e0 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 fa02 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000104 	.word	0x20000104
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_I2S3_Init+0x54>)
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <MX_I2S3_Init+0x58>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2S3_Init+0x54>)
 8000714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000718:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_I2S3_Init+0x54>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2S3_Init+0x54>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_I2S3_Init+0x54>)
 8000730:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <MX_I2S3_Init+0x5c>)
 8000732:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_I2S3_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2S3_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_I2S3_Init+0x54>)
 8000748:	f002 fe0e 	bl	8003368 <HAL_I2S_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000752:	f000 f9d3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001b0 	.word	0x200001b0
 8000760:	40003c00 	.word	0x40003c00
 8000764:	00017700 	.word	0x00017700

08000768 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_SPI1_Init+0x64>)
 800076e:	4a18      	ldr	r2, [pc, #96]	; (80007d0 <MX_SPI1_Init+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI1_Init+0x64>)
 8000774:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000778:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI1_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_SPI1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI1_Init+0x64>)
 8000794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000798:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI1_Init+0x64>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_SPI1_Init+0x64>)
 80007ba:	f004 f815 	bl	80047e8 <HAL_SPI_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c4:	f000 f99a 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000158 	.word	0x20000158
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000804:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <MX_TIM4_Init+0x128>)
 8000806:	4a3e      	ldr	r2, [pc, #248]	; (8000900 <MX_TIM4_Init+0x12c>)
 8000808:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 256;
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <MX_TIM4_Init+0x128>)
 800080c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000810:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <MX_TIM4_Init+0x128>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000818:	4b38      	ldr	r3, [pc, #224]	; (80008fc <MX_TIM4_Init+0x128>)
 800081a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800081e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <MX_TIM4_Init+0x128>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <MX_TIM4_Init+0x128>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800082c:	4833      	ldr	r0, [pc, #204]	; (80008fc <MX_TIM4_Init+0x128>)
 800082e:	f004 f864 	bl	80048fa <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000838:	f000 f960 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	4619      	mov	r1, r3
 8000848:	482c      	ldr	r0, [pc, #176]	; (80008fc <MX_TIM4_Init+0x128>)
 800084a:	f004 fa89 	bl	8004d60 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000854:	f000 f952 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000858:	4828      	ldr	r0, [pc, #160]	; (80008fc <MX_TIM4_Init+0x128>)
 800085a:	f004 f89d 	bl	8004998 <HAL_TIM_PWM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000864:	f000 f94a 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4619      	mov	r1, r3
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <MX_TIM4_Init+0x128>)
 8000878:	f004 fe4a 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000882:	f000 f93b 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000886:	2360      	movs	r3, #96	; 0x60
 8000888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_TIM4_Init+0x128>)
 800089e:	f004 f99d 	bl	8004bdc <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80008a8:	f000 f928 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2204      	movs	r2, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <MX_TIM4_Init+0x128>)
 80008b4:	f004 f992 	bl	8004bdc <HAL_TIM_PWM_ConfigChannel>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80008be:	f000 f91d 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2208      	movs	r2, #8
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_TIM4_Init+0x128>)
 80008ca:	f004 f987 	bl	8004bdc <HAL_TIM_PWM_ConfigChannel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80008d4:	f000 f912 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	220c      	movs	r2, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4807      	ldr	r0, [pc, #28]	; (80008fc <MX_TIM4_Init+0x128>)
 80008e0:	f004 f97c 	bl	8004bdc <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 80008ea:	f000 f907 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <MX_TIM4_Init+0x128>)
 80008f0:	f000 fa64 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	; 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000bc 	.word	0x200000bc
 8000900:	40000800 	.word	0x40000800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	4b71      	ldr	r3, [pc, #452]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a70      	ldr	r2, [pc, #448]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a69      	ldr	r2, [pc, #420]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b67      	ldr	r3, [pc, #412]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b63      	ldr	r3, [pc, #396]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b60      	ldr	r3, [pc, #384]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a5b      	ldr	r2, [pc, #364]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b59      	ldr	r3, [pc, #356]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a54      	ldr	r2, [pc, #336]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b52      	ldr	r3, [pc, #328]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a4d      	ldr	r2, [pc, #308]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4848      	ldr	r0, [pc, #288]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 80009c8:	f000 fe1c 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	4846      	ldr	r0, [pc, #280]	; (8000aec <MX_GPIO_Init+0x1e8>)
 80009d2:	f000 fe17 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2110      	movs	r1, #16
 80009da:	4845      	ldr	r0, [pc, #276]	; (8000af0 <MX_GPIO_Init+0x1ec>)
 80009dc:	f000 fe12 	bl	8001604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009e0:	2308      	movs	r3, #8
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 80009f8:	f000 fc68 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4836      	ldr	r0, [pc, #216]	; (8000aec <MX_GPIO_Init+0x1e8>)
 8000a14:	f000 fc5a 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482e      	ldr	r0, [pc, #184]	; (8000aec <MX_GPIO_Init+0x1e8>)
 8000a34:	f000 fc4a 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4829      	ldr	r0, [pc, #164]	; (8000af4 <MX_GPIO_Init+0x1f0>)
 8000a4e:	f000 fc3d 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a52:	2304      	movs	r3, #4
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4824      	ldr	r0, [pc, #144]	; (8000af8 <MX_GPIO_Init+0x1f4>)
 8000a66:	f000 fc31 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a7c:	2305      	movs	r3, #5
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_GPIO_Init+0x1f4>)
 8000a88:	f000 fc20 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4813      	ldr	r0, [pc, #76]	; (8000af0 <MX_GPIO_Init+0x1ec>)
 8000aa4:	f000 fc12 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_GPIO_Init+0x1ec>)
 8000abc:	f000 fc06 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ac4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000ad6:	f000 fbf9 	bl	80012cc <HAL_GPIO_Init>

}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020c00 	.word	0x40020c00
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b46:	2007      	movs	r0, #7
 8000b48:	f000 fb7e 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <HAL_I2C_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d12c      	bne.n	8000bd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9c:	2312      	movs	r3, #18
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <HAL_I2C_MspInit+0x8c>)
 8000bb4:	f000 fb8a 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_I2C_MspInit+0x88>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	; 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400

08000be8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	; 0x38
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_I2S_MspInit+0xf0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d15a      	bne.n	8000cce <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c1c:	23c0      	movs	r3, #192	; 0xc0
 8000c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 fc9d 	bl	8004568 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c34:	f7ff ff62 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	4b27      	ldr	r3, [pc, #156]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a18      	ldr	r2, [pc, #96]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_I2S_MspInit+0xf4>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480e      	ldr	r0, [pc, #56]	; (8000ce0 <HAL_I2S_MspInit+0xf8>)
 8000ca8:	f000 fb10 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cbe:	2306      	movs	r3, #6
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_I2S_MspInit+0xfc>)
 8000cca:	f000 faff 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40003c00 	.word	0x40003c00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	40020800 	.word	0x40020800

08000ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_SPI_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d42:	23e0      	movs	r3, #224	; 0xe0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d52:	2305      	movs	r3, #5
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d5e:	f000 fab5 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40013000 	.word	0x40013000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10d      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_TIM_Base_MspInit+0x40>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40000800 	.word	0x40000800
 8000db8:	40023800 	.word	0x40023800

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_TIM_MspPostInit+0x68>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d11e      	bne.n	8000e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dfa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_TIM_MspPostInit+0x70>)
 8000e18:	f000 fa58 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40000800 	.word	0x40000800
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f8d0 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f000 fe3f 	bl	8001b0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200005d4 	.word	0x200005d4

08000e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea0:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <_sbrk+0x5c>)
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_sbrk+0x60>)
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eac:	4b13      	ldr	r3, [pc, #76]	; (8000efc <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <_sbrk+0x64>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <_sbrk+0x68>)
 8000eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d207      	bcs.n	8000ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec8:	f006 fe3a 	bl	8007b40 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	220c      	movs	r2, #12
 8000ed0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	e009      	b.n	8000eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <_sbrk+0x64>)
 8000ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eea:	68fb      	ldr	r3, [r7, #12]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20020000 	.word	0x20020000
 8000ef8:	00000400 	.word	0x00000400
 8000efc:	200000ac 	.word	0x200000ac
 8000f00:	200008e8 	.word	0x200008e8

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f52:	f7ff ffd7 	bl	8000f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f006 fdf9 	bl	8007b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fab1 	bl	80004c0 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f6c:	08007d98 	.word	0x08007d98
  ldr r2, =_sbss
 8000f70:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f74:	200008e8 	.word	0x200008e8

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f94f 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fdaa 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f967 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f92f 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	200001f8 	.word	0x200001f8

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001f8 	.word	0x200001f8

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff3e 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff31 	bl	800110c <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa2 	bl	8001204 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e16b      	b.n	80015c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 815a 	bne.w	80015ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d005      	beq.n	800131e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	2b02      	cmp	r3, #2
 800131c:	d130      	bne.n	8001380 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b4 	beq.w	80015ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b60      	ldr	r3, [pc, #384]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b5d      	ldr	r3, [pc, #372]	; (80015d8 <HAL_GPIO_Init+0x30c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800146e:	4a5b      	ldr	r2, [pc, #364]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_GPIO_Init+0x314>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <HAL_GPIO_Init+0x318>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a50      	ldr	r2, [pc, #320]	; (80015e8 <HAL_GPIO_Init+0x31c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x320>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x216>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x328>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x212>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x20e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x330>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20a>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e00e      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014d6:	2308      	movs	r3, #8
 80014d8:	e00c      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014da:	2306      	movs	r3, #6
 80014dc:	e00a      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014de:	2305      	movs	r3, #5
 80014e0:	e008      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014e6:	2303      	movs	r3, #3
 80014e8:	e004      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e002      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <HAL_GPIO_Init+0x228>
 80014f2:	2300      	movs	r3, #0
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	f002 0203 	and.w	r2, r2, #3
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	4093      	lsls	r3, r2
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <HAL_GPIO_Init+0x310>)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001512:	4b3b      	ldr	r3, [pc, #236]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800153c:	4b30      	ldr	r3, [pc, #192]	; (8001600 <HAL_GPIO_Init+0x334>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001560:	4a27      	ldr	r2, [pc, #156]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	43db      	mvns	r3, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4013      	ands	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800158a:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x334>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_GPIO_Init+0x334>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_GPIO_Init+0x334>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	f67f ae90 	bls.w	80012e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40013800 	.word	0x40013800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400
 80015e8:	40020800 	.word	0x40020800
 80015ec:	40020c00 	.word	0x40020c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40021400 	.word	0x40021400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021c00 	.word	0x40021c00
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]
 8001610:	4613      	mov	r3, r2
 8001612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001614:	787b      	ldrb	r3, [r7, #1]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161a:	887a      	ldrh	r2, [r7, #2]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001638:	b08f      	sub	sp, #60	; 0x3c
 800163a:	af0a      	add	r7, sp, #40	; 0x28
 800163c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e054      	b.n	80016f2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f006 f810 	bl	8007688 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f830 	bl	80056ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	687e      	ldr	r6, [r7, #4]
 8001694:	466d      	mov	r5, sp
 8001696:	f106 0410 	add.w	r4, r6, #16
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80016aa:	1d33      	adds	r3, r6, #4
 80016ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ae:	6838      	ldr	r0, [r7, #0]
 80016b0:	f003 ffaa 	bl	8005608 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 f827 	bl	800570e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	687e      	ldr	r6, [r7, #4]
 80016c8:	466d      	mov	r5, sp
 80016ca:	f106 0410 	add.w	r4, r6, #16
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016da:	e885 0003 	stmia.w	r5, {r0, r1}
 80016de:	1d33      	adds	r3, r6, #4
 80016e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e2:	6838      	ldr	r0, [r7, #0]
 80016e4:	f004 f98e 	bl	8005a04 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016fa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016fa:	b590      	push	{r4, r7, lr}
 80016fc:	b089      	sub	sp, #36	; 0x24
 80016fe:	af04      	add	r7, sp, #16
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	4608      	mov	r0, r1
 8001704:	4611      	mov	r1, r2
 8001706:	461a      	mov	r2, r3
 8001708:	4603      	mov	r3, r0
 800170a:	70fb      	strb	r3, [r7, #3]
 800170c:	460b      	mov	r3, r1
 800170e:	70bb      	strb	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_HCD_HC_Init+0x28>
 800171e:	2302      	movs	r3, #2
 8001720:	e076      	b.n	8001810 <HAL_HCD_HC_Init+0x116>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	333d      	adds	r3, #61	; 0x3d
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	212c      	movs	r1, #44	; 0x2c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	3338      	adds	r3, #56	; 0x38
 800174a:	787a      	ldrb	r2, [r7, #1]
 800174c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	3340      	adds	r3, #64	; 0x40
 800175c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800175e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	3339      	adds	r3, #57	; 0x39
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	212c      	movs	r1, #44	; 0x2c
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	333f      	adds	r3, #63	; 0x3f
 8001780:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001784:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	78ba      	ldrb	r2, [r7, #2]
 800178a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800178e:	b2d0      	uxtb	r0, r2
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	333a      	adds	r3, #58	; 0x3a
 800179c:	4602      	mov	r2, r0
 800179e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80017a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da09      	bge.n	80017bc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	212c      	movs	r1, #44	; 0x2c
 80017ae:	fb01 f303 	mul.w	r3, r1, r3
 80017b2:	4413      	add	r3, r2
 80017b4:	333b      	adds	r3, #59	; 0x3b
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e008      	b.n	80017ce <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	fb01 f303 	mul.w	r3, r1, r3
 80017c6:	4413      	add	r3, r2
 80017c8:	333b      	adds	r3, #59	; 0x3b
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017ce:	78fb      	ldrb	r3, [r7, #3]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	212c      	movs	r1, #44	; 0x2c
 80017d4:	fb01 f303 	mul.w	r3, r1, r3
 80017d8:	4413      	add	r3, r2
 80017da:	333c      	adds	r3, #60	; 0x3c
 80017dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017e0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	787c      	ldrb	r4, [r7, #1]
 80017e8:	78ba      	ldrb	r2, [r7, #2]
 80017ea:	78f9      	ldrb	r1, [r7, #3]
 80017ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	f004 fa51 	bl	8005ca4 <USB_HC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_HCD_HC_Halt+0x1e>
 8001832:	2302      	movs	r3, #2
 8001834:	e00f      	b.n	8001856 <HAL_HCD_HC_Halt+0x3e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f004 fc8d 	bl	8006166 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	4608      	mov	r0, r1
 800186a:	4611      	mov	r1, r2
 800186c:	461a      	mov	r2, r3
 800186e:	4603      	mov	r3, r0
 8001870:	70fb      	strb	r3, [r7, #3]
 8001872:	460b      	mov	r3, r1
 8001874:	70bb      	strb	r3, [r7, #2]
 8001876:	4613      	mov	r3, r2
 8001878:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	333b      	adds	r3, #59	; 0x3b
 8001888:	78ba      	ldrb	r2, [r7, #2]
 800188a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	333f      	adds	r3, #63	; 0x3f
 800189a:	787a      	ldrb	r2, [r7, #1]
 800189c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800189e:	7c3b      	ldrb	r3, [r7, #16]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d112      	bne.n	80018ca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	212c      	movs	r1, #44	; 0x2c
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	4413      	add	r3, r2
 80018b0:	3342      	adds	r3, #66	; 0x42
 80018b2:	2203      	movs	r2, #3
 80018b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	333d      	adds	r3, #61	; 0x3d
 80018c4:	7f3a      	ldrb	r2, [r7, #28]
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e008      	b.n	80018dc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	f200 80c6 	bhi.w	8001a70 <HAL_HCD_HC_SubmitRequest+0x210>
 80018e4:	a201      	add	r2, pc, #4	; (adr r2, 80018ec <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	08001a5d 	.word	0x08001a5d
 80018f4:	08001961 	.word	0x08001961
 80018f8:	080019df 	.word	0x080019df
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018fc:	7c3b      	ldrb	r3, [r7, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	f040 80b8 	bne.w	8001a74 <HAL_HCD_HC_SubmitRequest+0x214>
 8001904:	78bb      	ldrb	r3, [r7, #2]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 80b4 	bne.w	8001a74 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800190c:	8b3b      	ldrh	r3, [r7, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d108      	bne.n	8001924 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	3355      	adds	r3, #85	; 0x55
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	212c      	movs	r1, #44	; 0x2c
 800192a:	fb01 f303 	mul.w	r3, r1, r3
 800192e:	4413      	add	r3, r2
 8001930:	3355      	adds	r3, #85	; 0x55
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d109      	bne.n	800194c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800194a:	e093      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	212c      	movs	r1, #44	; 0x2c
 8001952:	fb01 f303 	mul.w	r3, r1, r3
 8001956:	4413      	add	r3, r2
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2202      	movs	r2, #2
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e089      	b.n	8001a74 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001960:	78bb      	ldrb	r3, [r7, #2]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11d      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3355      	adds	r3, #85	; 0x55
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800198c:	e073      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3342      	adds	r3, #66	; 0x42
 800199c:	2202      	movs	r2, #2
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e069      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	212c      	movs	r1, #44	; 0x2c
 80019a8:	fb01 f303 	mul.w	r3, r1, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	3354      	adds	r3, #84	; 0x54
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	212c      	movs	r1, #44	; 0x2c
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	3342      	adds	r3, #66	; 0x42
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
      break;
 80019c8:	e055      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	212c      	movs	r1, #44	; 0x2c
 80019d0:	fb01 f303 	mul.w	r3, r1, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3342      	adds	r3, #66	; 0x42
 80019d8:	2202      	movs	r2, #2
 80019da:	701a      	strb	r2, [r3, #0]
      break;
 80019dc:	e04b      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019de:	78bb      	ldrb	r3, [r7, #2]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d11d      	bne.n	8001a20 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	212c      	movs	r1, #44	; 0x2c
 80019ea:	fb01 f303 	mul.w	r3, r1, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	3355      	adds	r3, #85	; 0x55
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	212c      	movs	r1, #44	; 0x2c
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a0a:	e034      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
      break;
 8001a1e:	e02a      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3354      	adds	r3, #84	; 0x54
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	212c      	movs	r1, #44	; 0x2c
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	3342      	adds	r3, #66	; 0x42
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
      break;
 8001a46:	e016      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	212c      	movs	r1, #44	; 0x2c
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e00c      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	212c      	movs	r1, #44	; 0x2c
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3342      	adds	r3, #66	; 0x42
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
      break;
 8001a6e:	e002      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a70:	bf00      	nop
 8001a72:	e000      	b.n	8001a76 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a74:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3344      	adds	r3, #68	; 0x44
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	8b3a      	ldrh	r2, [r7, #24]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	202c      	movs	r0, #44	; 0x2c
 8001a90:	fb00 f303 	mul.w	r3, r0, r3
 8001a94:	440b      	add	r3, r1
 8001a96:	334c      	adds	r3, #76	; 0x4c
 8001a98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3360      	adds	r3, #96	; 0x60
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3350      	adds	r3, #80	; 0x50
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3339      	adds	r3, #57	; 0x39
 8001acc:	78fa      	ldrb	r2, [r7, #3]
 8001ace:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3361      	adds	r3, #97	; 0x61
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	222c      	movs	r2, #44	; 0x2c
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	3338      	adds	r3, #56	; 0x38
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	18d1      	adds	r1, r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	f004 f9e0 	bl	8005ec0 <USB_HC_StartXfer>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop

08001b0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 ff2d 	bl	8005982 <USB_GetMode>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80f6 	bne.w	8001d1c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 ff11 	bl	800595c <USB_ReadInterrupts>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ec 	beq.w	8001d1a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 ff08 	bl	800595c <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fef8 	bl	800595c <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b76:	d104      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fee8 	bl	800595c <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b96:	d104      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 fed8 	bl	800595c <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 feca 	bl	800595c <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bd2:	d11c      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bdc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10f      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bee:	2110      	movs	r1, #16
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f003 fdd9 	bl	80057a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bf6:	6938      	ldr	r0, [r7, #16]
 8001bf8:	f003 fdfa 	bl	80057f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 ffb2 	bl	8005b6c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f005 fdbb 	bl	8007784 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fea2 	bl	800595c <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c22:	d102      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f001 f9e7 	bl	8002ff8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fe94 	bl	800595c <USB_ReadInterrupts>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d106      	bne.n	8001c4c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f005 fd84 	bl	800774c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fe83 	bl	800595c <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d101      	bne.n	8001c64 <HAL_HCD_IRQHandler+0x158>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_HCD_IRQHandler+0x15a>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d012      	beq.n	8001c90 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0210 	bic.w	r2, r2, #16
 8001c78:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f001 f8ea 	bl	8002e54 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0210 	orr.w	r2, r2, #16
 8001c8e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fe61 	bl	800595c <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca4:	d13a      	bne.n	8001d1c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fa4a 	bl	8006144 <USB_HC_ReadInterrupt>
 8001cb0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e025      	b.n	8001d04 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d018      	beq.n	8001cfe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f88f 	bl	8001e0e <HCD_HC_IN_IRQHandler>
 8001cf0:	e005      	b.n	8001cfe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fcaa 	bl	8002652 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3301      	adds	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3d4      	bcc.n	8001cb8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	e000      	b.n	8001d1c <HAL_HCD_IRQHandler+0x210>
      return;
 8001d1a:	bf00      	nop
    }
  }
}
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_HCD_Start+0x16>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e013      	b.n	8001d60 <HAL_HCD_Start+0x3e>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 ff4a 	bl	8005be0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fcba 	bl	80056ca <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_HCD_Stop+0x16>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e00d      	b.n	8001d9a <HAL_HCD_Stop+0x32>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fb44 	bl	8006418 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	781b      	ldrb	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3350      	adds	r3, #80	; 0x50
 8001de4:	681b      	ldr	r3, [r3, #0]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 ff3e 	bl	8005c80 <USB_GetCurrentFrame>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d119      	bne.n	8001e72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	0151      	lsls	r1, r2, #5
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	440a      	add	r2, r1
 8001e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	60d3      	str	r3, [r2, #12]
 8001e70:	e101      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d12b      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3361      	adds	r3, #97	; 0x61
 8001eac:	2207      	movs	r2, #7
 8001eae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	0151      	lsls	r1, r2, #5
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eca:	f043 0302 	orr.w	r3, r3, #2
 8001ece:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f943 	bl	8006166 <USB_HC_Halt>
 8001ee0:	e0c9      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d109      	bne.n	8001f0c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2320      	movs	r3, #32
 8001f08:	6093      	str	r3, [r2, #8]
 8001f0a:	e0b4      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	015a      	lsls	r2, r3, #5
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4413      	add	r3, r2
 8001f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d133      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	0151      	lsls	r1, r2, #5
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	440a      	add	r2, r1
 8001f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3361      	adds	r3, #97	; 0x61
 8001f50:	2205      	movs	r2, #5
 8001f52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f60:	461a      	mov	r2, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2308      	movs	r3, #8
 8001f76:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8ef 	bl	8006166 <USB_HC_Halt>
 8001f88:	e075      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa0:	d134      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	0151      	lsls	r1, r2, #5
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	440a      	add	r2, r1
 8001fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	212c      	movs	r1, #44	; 0x2c
 8001fc8:	fb01 f303 	mul.w	r3, r1, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3361      	adds	r3, #97	; 0x61
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f004 f8ae 	bl	8006166 <USB_HC_Halt>
 800200a:	e034      	b.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4413      	add	r3, r2
 8002014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b80      	cmp	r3, #128	; 0x80
 8002020:	d129      	bne.n	8002076 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	212c      	movs	r1, #44	; 0x2c
 8002048:	fb01 f303 	mul.w	r3, r1, r3
 800204c:	4413      	add	r3, r2
 800204e:	3361      	adds	r3, #97	; 0x61
 8002050:	2206      	movs	r2, #6
 8002052:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f004 f881 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208c:	d122      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 f854 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020d2:	e2ba      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 811b 	bne.w	8002322 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d019      	beq.n	8002128 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	0159      	lsls	r1, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	440b      	add	r3, r1
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	202c      	movs	r0, #44	; 0x2c
 800211e:	fb00 f303 	mul.w	r3, r0, r3
 8002122:	440b      	add	r3, r1
 8002124:	3350      	adds	r3, #80	; 0x50
 8002126:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3361      	adds	r3, #97	; 0x61
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	335c      	adds	r3, #92	; 0x5c
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	333f      	adds	r3, #63	; 0x3f
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d009      	beq.n	8002186 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333f      	adds	r3, #63	; 0x3f
 8002180:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002182:	2b02      	cmp	r3, #2
 8002184:	d121      	bne.n	80021ca <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	0151      	lsls	r1, r2, #5
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	440a      	add	r2, r1
 800219c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 ffd8 	bl	8006166 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	2310      	movs	r3, #16
 80021c6:	6093      	str	r3, [r2, #8]
 80021c8:	e066      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	333f      	adds	r3, #63	; 0x3f
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d127      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	0151      	lsls	r1, r2, #5
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	440a      	add	r2, r1
 80021f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021fc:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3360      	adds	r3, #96	; 0x60
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	b2d9      	uxtb	r1, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	202c      	movs	r0, #44	; 0x2c
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	4413      	add	r3, r2
 8002220:	3360      	adds	r3, #96	; 0x60
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f005 faba 	bl	80077a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800222c:	e034      	b.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	212c      	movs	r1, #44	; 0x2c
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	4413      	add	r3, r2
 800223a:	333f      	adds	r3, #63	; 0x3f
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d12a      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	212c      	movs	r1, #44	; 0x2c
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	4413      	add	r3, r2
 800224e:	3360      	adds	r3, #96	; 0x60
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3354      	adds	r3, #84	; 0x54
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f083 0301 	eor.w	r3, r3, #1
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	212c      	movs	r1, #44	; 0x2c
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	4413      	add	r3, r2
 8002276:	3354      	adds	r3, #84	; 0x54
 8002278:	4602      	mov	r2, r0
 800227a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	b2d9      	uxtb	r1, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	202c      	movs	r0, #44	; 0x2c
 8002286:	fb00 f303 	mul.w	r3, r0, r3
 800228a:	4413      	add	r3, r2
 800228c:	3360      	adds	r3, #96	; 0x60
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fa84 	bl	80077a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d12b      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3348      	adds	r3, #72	; 0x48
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	202c      	movs	r0, #44	; 0x2c
 80022b6:	fb00 f202 	mul.w	r2, r0, r2
 80022ba:	440a      	add	r2, r1
 80022bc:	3240      	adds	r2, #64	; 0x40
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 81be 	beq.w	800264a <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3354      	adds	r3, #84	; 0x54
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2d8      	uxtb	r0, r3
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3354      	adds	r3, #84	; 0x54
 80022f2:	4602      	mov	r2, r0
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	e1a8      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	3354      	adds	r3, #84	; 0x54
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f083 0301 	eor.w	r3, r3, #1
 800230c:	b2d8      	uxtb	r0, r3
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3354      	adds	r3, #84	; 0x54
 800231c:	4602      	mov	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	e193      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 8106 	bne.w	8002546 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	0151      	lsls	r1, r2, #5
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	440a      	add	r2, r1
 8002350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3361      	adds	r3, #97	; 0x61
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d109      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3360      	adds	r3, #96	; 0x60
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e0c9      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3361      	adds	r3, #97	; 0x61
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d109      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3360      	adds	r3, #96	; 0x60
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e0b5      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3361      	adds	r3, #97	; 0x61
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d009      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	3361      	adds	r3, #97	; 0x61
 80023cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d150      	bne.n	8002474 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	202c      	movs	r0, #44	; 0x2c
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	440b      	add	r3, r1
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	335c      	adds	r3, #92	; 0x5c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d912      	bls.n	800242e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	335c      	adds	r3, #92	; 0x5c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	2204      	movs	r2, #4
 800242a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800242c:	e073      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3360      	adds	r3, #96	; 0x60
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002456:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800245e:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002472:	e050      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d122      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e023      	b.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	d119      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	335c      	adds	r3, #92	; 0x5c
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	202c      	movs	r0, #44	; 0x2c
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	440b      	add	r3, r1
 8002500:	335c      	adds	r3, #92	; 0x5c
 8002502:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3360      	adds	r3, #96	; 0x60
 8002512:	2204      	movs	r2, #4
 8002514:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	461a      	mov	r2, r3
 8002524:	2302      	movs	r3, #2
 8002526:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	b2d9      	uxtb	r1, r3
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	4413      	add	r3, r2
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f005 f92e 	bl	80077a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002544:	e081      	b.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b10      	cmp	r3, #16
 800255a:	d176      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d121      	bne.n	80025b4 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	335c      	adds	r3, #92	; 0x5c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fdda 	bl	8006166 <USB_HC_Halt>
 80025b2:	e041      	b.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	333f      	adds	r3, #63	; 0x3f
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	333f      	adds	r3, #63	; 0x3f
 80025d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d12d      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	335c      	adds	r3, #92	; 0x5c
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d120      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	3361      	adds	r3, #97	; 0x61
 8002604:	2203      	movs	r2, #3
 8002606:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	0151      	lsls	r1, r2, #5
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	440a      	add	r2, r1
 800261e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002622:	f043 0302 	orr.w	r3, r3, #2
 8002626:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fd97 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	2310      	movs	r3, #16
 8002648:	6093      	str	r3, [r2, #8]
}
 800264a:	bf00      	nop
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b088      	sub	sp, #32
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b04      	cmp	r3, #4
 8002680:	d119      	bne.n	80026b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2304      	movs	r3, #4
 8002692:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026b4:	e3ca      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d13e      	bne.n	800274a <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	2320      	movs	r3, #32
 80026dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333d      	adds	r3, #61	; 0x3d
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 83ac 	bne.w	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	333d      	adds	r3, #61	; 0x3d
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3360      	adds	r3, #96	; 0x60
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	440a      	add	r2, r1
 800272e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fd0f 	bl	8006166 <USB_HC_Halt>
}
 8002748:	e380      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002760:	d122      	bne.n	80027a8 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	0151      	lsls	r1, r2, #5
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	440a      	add	r2, r1
 8002778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fcea 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	461a      	mov	r2, r3
 80027a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a4:	6093      	str	r3, [r2, #8]
}
 80027a6:	e351      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d150      	bne.n	8002860 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d111      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333d      	adds	r3, #61	; 0x3d
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	461a      	mov	r2, r3
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	0151      	lsls	r1, r2, #5
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	440a      	add	r2, r1
 8002820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fc96 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2301      	movs	r3, #1
 800284a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
}
 800285e:	e2f5      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b40      	cmp	r3, #64	; 0x40
 8002874:	d13c      	bne.n	80028f0 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3361      	adds	r3, #97	; 0x61
 8002884:	2204      	movs	r2, #4
 8002886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	333d      	adds	r3, #61	; 0x3d
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	0151      	lsls	r1, r2, #5
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	440a      	add	r2, r1
 80028c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fc45 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2340      	movs	r3, #64	; 0x40
 80028ec:	6093      	str	r3, [r2, #8]
}
 80028ee:	e2ad      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b08      	cmp	r3, #8
 8002904:	d12a      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2308      	movs	r3, #8
 8002916:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fc0f 	bl	8006166 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3361      	adds	r3, #97	; 0x61
 8002956:	2205      	movs	r2, #5
 8002958:	701a      	strb	r2, [r3, #0]
}
 800295a:	e277      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d150      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	335c      	adds	r3, #92	; 0x5c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	2203      	movs	r2, #3
 8002994:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333d      	adds	r3, #61	; 0x3d
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d112      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333c      	adds	r3, #60	; 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d108      	bne.n	80029d0 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333d      	adds	r3, #61	; 0x3d
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 fbb3 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2310      	movs	r3, #16
 8002a10:	6093      	str	r3, [r2, #8]
}
 8002a12:	e21b      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d174      	bne.n	8002b14 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d121      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3361      	adds	r3, #97	; 0x61
 8002a40:	2206      	movs	r2, #6
 8002a42:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fb79 	bl	8006166 <USB_HC_Halt>
 8002a74:	e044      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	202c      	movs	r0, #44	; 0x2c
 8002a8e:	fb00 f303 	mul.w	r3, r0, r3
 8002a92:	440b      	add	r3, r1
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d920      	bls.n	8002aee <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3360      	adds	r3, #96	; 0x60
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	b2d9      	uxtb	r1, r3
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	202c      	movs	r0, #44	; 0x2c
 8002ada:	fb00 f303 	mul.w	r3, r0, r3
 8002ade:	4413      	add	r3, r2
 8002ae0:	3360      	adds	r3, #96	; 0x60
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f004 fe5a 	bl	80077a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aec:	e008      	b.n	8002b00 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3360      	adds	r3, #96	; 0x60
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	6093      	str	r3, [r2, #8]
}
 8002b12:	e19b      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d134      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b46:	f043 0302 	orr.w	r3, r3, #2
 8002b4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fb05 	bl	8006166 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	2208      	movs	r2, #8
 8002b92:	701a      	strb	r2, [r3, #0]
}
 8002b94:	e15a      	b.n	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f040 814f 	bne.w	8002e4c <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	0151      	lsls	r1, r2, #5
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	440a      	add	r2, r1
 8002bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	3361      	adds	r3, #97	; 0x61
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d17d      	bne.n	8002cde <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	212c      	movs	r1, #44	; 0x2c
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	4413      	add	r3, r2
 8002c00:	333f      	adds	r3, #63	; 0x3f
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d00a      	beq.n	8002c1e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	333f      	adds	r3, #63	; 0x3f
 8002c16:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	f040 8100 	bne.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	3355      	adds	r3, #85	; 0x55
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2d8      	uxtb	r0, r3
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3355      	adds	r3, #85	; 0x55
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f040 80e3 	bne.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	334c      	adds	r3, #76	; 0x4c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80d8 	beq.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	334c      	adds	r3, #76	; 0x4c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	202c      	movs	r0, #44	; 0x2c
 8002c84:	fb00 f202 	mul.w	r2, r0, r2
 8002c88:	440a      	add	r2, r1
 8002c8a:	3240      	adds	r2, #64	; 0x40
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b01      	subs	r3, #1
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	202c      	movs	r0, #44	; 0x2c
 8002c98:	fb00 f202 	mul.w	r2, r0, r2
 8002c9c:	440a      	add	r2, r1
 8002c9e:	3240      	adds	r2, #64	; 0x40
 8002ca0:	8812      	ldrh	r2, [r2, #0]
 8002ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80b5 	beq.w	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3355      	adds	r3, #85	; 0x55
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	f083 0301 	eor.w	r3, r3, #1
 8002cc8:	b2d8      	uxtb	r0, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3355      	adds	r3, #85	; 0x55
 8002cd8:	4602      	mov	r2, r0
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e09f      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3361      	adds	r3, #97	; 0x61
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d109      	bne.n	8002d06 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e08b      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3361      	adds	r3, #97	; 0x61
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d109      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	3360      	adds	r3, #96	; 0x60
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e077      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3361      	adds	r3, #97	; 0x61
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d109      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	2205      	movs	r2, #5
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e063      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3361      	adds	r3, #97	; 0x61
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d009      	beq.n	8002d7e <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3361      	adds	r3, #97	; 0x61
 8002d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d14f      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	335c      	adds	r3, #92	; 0x5c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	202c      	movs	r0, #44	; 0x2c
 8002d96:	fb00 f303 	mul.w	r3, r0, r3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d912      	bls.n	8002dda <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	335c      	adds	r3, #92	; 0x5c
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e021      	b.n	8002e1e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3360      	adds	r3, #96	; 0x60
 8002de8:	2202      	movs	r2, #2
 8002dea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e02:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	b2d9      	uxtb	r1, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	fb00 f303 	mul.w	r3, r0, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f004 fcaa 	bl	80077a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	0c5b      	lsrs	r3, r3, #17
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e88:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d004      	beq.n	8002e9a <HCD_RXQLVL_IRQHandler+0x46>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	f000 80a9 	beq.w	8002fea <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e98:	e0aa      	b.n	8002ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80a6 	beq.w	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3344      	adds	r3, #68	; 0x44
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 809b 	beq.w	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3350      	adds	r3, #80	; 0x50
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	441a      	add	r2, r3
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	202c      	movs	r0, #44	; 0x2c
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d87a      	bhi.n	8002fd6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3344      	adds	r3, #68	; 0x44
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f002 fcd7 	bl	80058ac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3344      	adds	r3, #68	; 0x44
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	441a      	add	r2, r3
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	202c      	movs	r0, #44	; 0x2c
 8002f18:	fb00 f303 	mul.w	r3, r0, r3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3344      	adds	r3, #68	; 0x44
 8002f20:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	441a      	add	r2, r3
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	202c      	movs	r0, #44	; 0x2c
 8002f3c:	fb00 f303 	mul.w	r3, r0, r3
 8002f40:	440b      	add	r3, r1
 8002f42:	3350      	adds	r3, #80	; 0x50
 8002f44:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	0cdb      	lsrs	r3, r3, #19
 8002f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3340      	adds	r3, #64	; 0x40
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d13c      	bne.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d039      	beq.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f90:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f98:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3354      	adds	r3, #84	; 0x54
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2d8      	uxtb	r0, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	701a      	strb	r2, [r3, #0]
      break;
 8002fd4:	e00b      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	212c      	movs	r1, #44	; 0x2c
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	701a      	strb	r2, [r3, #0]
      break;
 8002fe8:	e001      	b.n	8002fee <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fee:	bf00      	nop
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003024:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d10b      	bne.n	8003048 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f004 fb94 	bl	8007768 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b08      	cmp	r3, #8
 8003050:	d132      	bne.n	80030b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f043 0308 	orr.w	r3, r3, #8
 8003058:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b04      	cmp	r3, #4
 8003062:	d126      	bne.n	80030b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d113      	bne.n	8003094 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003076:	d106      	bne.n	8003086 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2102      	movs	r1, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f002 fd74 	bl	8005b6c <USB_InitFSLSPClkSel>
 8003084:	e011      	b.n	80030aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f002 fd6d 	bl	8005b6c <USB_InitFSLSPClkSel>
 8003092:	e00a      	b.n	80030aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d106      	bne.n	80030aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a2:	461a      	mov	r2, r3
 80030a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f004 fb86 	bl	80077bc <HAL_HCD_PortEnabled_Callback>
 80030b0:	e002      	b.n	80030b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f004 fb90 	bl	80077d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d103      	bne.n	80030ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f043 0320 	orr.w	r3, r3, #32
 80030c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030d0:	461a      	mov	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6013      	str	r3, [r2, #0]
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e12b      	b.n	800334a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fd26 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003144:	f001 f9fc 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a81      	ldr	r2, [pc, #516]	; (8003354 <HAL_I2C_Init+0x274>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d807      	bhi.n	8003164 <HAL_I2C_Init+0x84>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a80      	ldr	r2, [pc, #512]	; (8003358 <HAL_I2C_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e006      	b.n	8003172 <HAL_I2C_Init+0x92>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a7d      	ldr	r2, [pc, #500]	; (800335c <HAL_I2C_Init+0x27c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	bf94      	ite	ls
 800316c:	2301      	movls	r3, #1
 800316e:	2300      	movhi	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0e7      	b.n	800334a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a78      	ldr	r2, [pc, #480]	; (8003360 <HAL_I2C_Init+0x280>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0c9b      	lsrs	r3, r3, #18
 8003184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_I2C_Init+0x274>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d802      	bhi.n	80031b4 <HAL_I2C_Init+0xd4>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	e009      	b.n	80031c8 <HAL_I2C_Init+0xe8>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_I2C_Init+0x284>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_I2C_Init+0x274>)
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d819      	bhi.n	800321c <HAL_I2C_Init+0x13c>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e59      	subs	r1, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031fc:	400b      	ands	r3, r1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_I2C_Init+0x138>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e59      	subs	r1, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	e051      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003218:	2304      	movs	r3, #4
 800321a:	e04f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_I2C_Init+0x168>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e012      	b.n	800326e <HAL_I2C_Init+0x18e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Init+0x196>
 8003272:	2301      	movs	r3, #1
 8003274:	e022      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <HAL_I2C_Init+0x1bc>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e58      	subs	r0, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	440b      	add	r3, r1
 800328c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	e00f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e58      	subs	r0, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	0099      	lsls	r1, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	6809      	ldr	r1, [r1, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6911      	ldr	r1, [r2, #16]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68d2      	ldr	r2, [r2, #12]
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	000186a0 	.word	0x000186a0
 8003358:	001e847f 	.word	0x001e847f
 800335c:	003d08ff 	.word	0x003d08ff
 8003360:	431bde83 	.word	0x431bde83
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e128      	b.n	80035cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a90      	ldr	r2, [pc, #576]	; (80035d4 <HAL_I2S_Init+0x26c>)
 8003392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fd fc27 	bl	8000be8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b0:	f023 030f 	bic.w	r3, r3, #15
 80033b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2202      	movs	r2, #2
 80033bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d060      	beq.n	8003488 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ce:	2310      	movs	r3, #16
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e001      	b.n	80033d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d802      	bhi.n	80033e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f001 f9a0 	bl	800472c <HAL_RCCEx_GetPeriphCLKFreq>
 80033ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f6:	d125      	bne.n	8003444 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	fbb2 f2f3 	udiv	r2, r2, r3
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	461a      	mov	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	3305      	adds	r3, #5
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	e01f      	b.n	8003462 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	3305      	adds	r3, #5
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e00e      	b.n	8003462 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	fbb2 f2f3 	udiv	r2, r2, r3
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	461a      	mov	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	3305      	adds	r3, #5
 8003460:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_I2S_Init+0x270>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	08db      	lsrs	r3, r3, #3
 800346c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e003      	b.n	8003490 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003488:	2302      	movs	r3, #2
 800348a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d902      	bls.n	800349c <HAL_I2S_Init+0x134>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2bff      	cmp	r3, #255	; 0xff
 800349a:	d907      	bls.n	80034ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0210 	orr.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e08f      	b.n	80035cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	ea42 0103 	orr.w	r1, r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	430a      	orrs	r2, r1
 80034be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ca:	f023 030f 	bic.w	r3, r3, #15
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6851      	ldr	r1, [r2, #4]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6892      	ldr	r2, [r2, #8]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68d2      	ldr	r2, [r2, #12]
 80034dc:	4311      	orrs	r1, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6992      	ldr	r2, [r2, #24]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d161      	bne.n	80035bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a38      	ldr	r2, [pc, #224]	; (80035dc <HAL_I2S_Init+0x274>)
 80034fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <HAL_I2S_Init+0x278>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_I2S_Init+0x1a4>
 8003508:	4b36      	ldr	r3, [pc, #216]	; (80035e4 <HAL_I2S_Init+0x27c>)
 800350a:	e001      	b.n	8003510 <HAL_I2S_Init+0x1a8>
 800350c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	4932      	ldr	r1, [pc, #200]	; (80035e0 <HAL_I2S_Init+0x278>)
 8003518:	428a      	cmp	r2, r1
 800351a:	d101      	bne.n	8003520 <HAL_I2S_Init+0x1b8>
 800351c:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <HAL_I2S_Init+0x27c>)
 800351e:	e001      	b.n	8003524 <HAL_I2S_Init+0x1bc>
 8003520:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003524:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003528:	f023 030f 	bic.w	r3, r3, #15
 800352c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_I2S_Init+0x278>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_I2S_Init+0x1d4>
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <HAL_I2S_Init+0x27c>)
 800353a:	e001      	b.n	8003540 <HAL_I2S_Init+0x1d8>
 800353c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003540:	2202      	movs	r2, #2
 8003542:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <HAL_I2S_Init+0x278>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_I2S_Init+0x1ea>
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_I2S_Init+0x27c>)
 8003550:	e001      	b.n	8003556 <HAL_I2S_Init+0x1ee>
 8003552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003562:	d003      	beq.n	800356c <HAL_I2S_Init+0x204>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d103      	bne.n	8003574 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800356c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e001      	b.n	8003578 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003582:	4313      	orrs	r3, r2
 8003584:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800358c:	4313      	orrs	r3, r2
 800358e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003596:	4313      	orrs	r3, r2
 8003598:	b29a      	uxth	r2, r3
 800359a:	897b      	ldrh	r3, [r7, #10]
 800359c:	4313      	orrs	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_I2S_Init+0x278>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_I2S_Init+0x24c>
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <HAL_I2S_Init+0x27c>)
 80035b2:	e001      	b.n	80035b8 <HAL_I2S_Init+0x250>
 80035b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b8:	897a      	ldrh	r2, [r7, #10]
 80035ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	080036df 	.word	0x080036df
 80035d8:	cccccccd 	.word	0xcccccccd
 80035dc:	080037f5 	.word	0x080037f5
 80035e0:	40003800 	.word	0x40003800
 80035e4:	40003400 	.word	0x40003400

080035e8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c9a      	adds	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003668:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff ffb8 	bl	80035e8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	b292      	uxth	r2, r2
 8003694:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	1c9a      	adds	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10e      	bne.n	80036d6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036c6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff93 	bl	80035fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d13a      	bne.n	8003770 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b01      	cmp	r3, #1
 8003702:	d109      	bne.n	8003718 <I2S_IRQHandler+0x3a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d102      	bne.n	8003718 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffb4 	bl	8003680 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d126      	bne.n	8003770 <I2S_IRQHandler+0x92>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d11f      	bne.n	8003770 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800373e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003740:	2300      	movs	r3, #0
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f043 0202 	orr.w	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ff50 	bl	8003610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d136      	bne.n	80037ea <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d109      	bne.n	800379a <I2S_IRQHandler+0xbc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b80      	cmp	r3, #128	; 0x80
 8003792:	d102      	bne.n	800379a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff45 	bl	8003624 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d122      	bne.n	80037ea <I2S_IRQHandler+0x10c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d11b      	bne.n	80037ea <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	f043 0204 	orr.w	r2, r3, #4
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff13 	bl	8003610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4aa2      	ldr	r2, [pc, #648]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d101      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800380e:	4ba2      	ldr	r3, [pc, #648]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003810:	e001      	b.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a9b      	ldr	r2, [pc, #620]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800382c:	4b9a      	ldr	r3, [pc, #616]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800382e:	e001      	b.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d004      	beq.n	800384c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8099 	bne.w	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b02      	cmp	r3, #2
 8003854:	d107      	bne.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f925 	bl	8003ab0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f9c8 	bl	8003c10 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d13a      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d035      	beq.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7e      	ldr	r2, [pc, #504]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800389e:	4b7e      	ldr	r3, [pc, #504]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a0:	e001      	b.n	80038a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4979      	ldr	r1, [pc, #484]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ae:	428b      	cmp	r3, r1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038b2:	4b79      	ldr	r3, [pc, #484]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038b4:	e001      	b.n	80038ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038be:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fe88 	bl	8003610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	f040 80be 	bne.w	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80b8 	beq.w	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003926:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003932:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003934:	e001      	b.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4954      	ldr	r1, [pc, #336]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003942:	428b      	cmp	r3, r1
 8003944:	d101      	bne.n	800394a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003946:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003948:	e001      	b.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003952:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe4a 	bl	8003610 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800397c:	e084      	b.n	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8be 	bl	8003b14 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f8fd 	bl	8003bac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d12f      	bne.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02a      	beq.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e2:	e001      	b.n	80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4929      	ldr	r1, [pc, #164]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039f4:	4b28      	ldr	r3, [pc, #160]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f6:	e001      	b.n	80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fdfa 	bl	8003610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d131      	bne.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d02c      	beq.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a3a:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3c:	e001      	b.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4912      	ldr	r1, [pc, #72]	; (8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a4a:	428b      	cmp	r3, r1
 8003a4c:	d101      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a50:	e001      	b.n	8003a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fdc5 	bl	8003610 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	e000      	b.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a88:	bf00      	nop
}
 8003a8a:	bf00      	nop
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40003800 	.word	0x40003800
 8003a98:	40003400 	.word	0x40003400

08003a9c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c99      	adds	r1, r3, #2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d113      	bne.n	8003b0a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ffc9 	bl	8003a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	1c99      	adds	r1, r3, #2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6251      	str	r1, [r2, #36]	; 0x24
 8003b26:	8819      	ldrh	r1, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <I2SEx_TxISR_I2SExt+0x22>
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b34:	e001      	b.n	8003b3a <I2SEx_TxISR_I2SExt+0x26>
 8003b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d121      	bne.n	8003b9a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <I2SEx_TxISR_I2SExt+0x50>
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b62:	e001      	b.n	8003b68 <I2SEx_TxISR_I2SExt+0x54>
 8003b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	490d      	ldr	r1, [pc, #52]	; (8003ba4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b70:	428b      	cmp	r3, r1
 8003b72:	d101      	bne.n	8003b78 <I2SEx_TxISR_I2SExt+0x64>
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b76:	e001      	b.n	8003b7c <I2SEx_TxISR_I2SExt+0x68>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff81 	bl	8003a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40003800 	.word	0x40003800
 8003ba8:	40003400 	.word	0x40003400

08003bac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68d8      	ldr	r0, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	1c99      	adds	r1, r3, #2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bc4:	b282      	uxth	r2, r0
 8003bc6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d113      	bne.n	8003c08 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff4a 	bl	8003a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a20      	ldr	r2, [pc, #128]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <I2SEx_RxISR_I2SExt+0x16>
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c24:	e001      	b.n	8003c2a <I2SEx_RxISR_I2SExt+0x1a>
 8003c26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2a:	68d8      	ldr	r0, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	1c99      	adds	r1, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c36:	b282      	uxth	r2, r0
 8003c38:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d121      	bne.n	8003c96 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <I2SEx_RxISR_I2SExt+0x50>
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c5e:	e001      	b.n	8003c64 <I2SEx_RxISR_I2SExt+0x54>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	490d      	ldr	r1, [pc, #52]	; (8003ca0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d101      	bne.n	8003c74 <I2SEx_RxISR_I2SExt+0x64>
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c72:	e001      	b.n	8003c78 <I2SEx_RxISR_I2SExt+0x68>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ff03 	bl	8003a9c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40003800 	.word	0x40003800
 8003ca4:	40003400 	.word	0x40003400

08003ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e264      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d075      	beq.n	8003db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cc6:	4ba3      	ldr	r3, [pc, #652]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d00c      	beq.n	8003cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4ba0      	ldr	r3, [pc, #640]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d112      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b9d      	ldr	r3, [pc, #628]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	4b99      	ldr	r3, [pc, #612]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d05b      	beq.n	8003db0 <HAL_RCC_OscConfig+0x108>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d157      	bne.n	8003db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e23f      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0c:	d106      	bne.n	8003d1c <HAL_RCC_OscConfig+0x74>
 8003d0e:	4b91      	ldr	r3, [pc, #580]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a90      	ldr	r2, [pc, #576]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e01d      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x98>
 8003d26:	4b8b      	ldr	r3, [pc, #556]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a8a      	ldr	r2, [pc, #552]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b88      	ldr	r3, [pc, #544]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a87      	ldr	r2, [pc, #540]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0xb0>
 8003d40:	4b84      	ldr	r3, [pc, #528]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a83      	ldr	r2, [pc, #524]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a80      	ldr	r2, [pc, #512]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fd f972 	bl	8001048 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd f96e 	bl	8001048 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e204      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7a:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0xc0>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fd f95e 	bl	8001048 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fd f95a 	bl	8001048 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1f0      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da2:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0xe8>
 8003dae:	e000      	b.n	8003db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d063      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b62      	ldr	r3, [pc, #392]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d11c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d116      	bne.n	8003e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1c4      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4952      	ldr	r1, [pc, #328]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	e03a      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e18:	4b4f      	ldr	r3, [pc, #316]	; (8003f58 <HAL_RCC_OscConfig+0x2b0>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f913 	bl	8001048 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fd f90f 	bl	8001048 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1a5      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	4b46      	ldr	r3, [pc, #280]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4940      	ldr	r1, [pc, #256]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
 8003e58:	e015      	b.n	8003e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_OscConfig+0x2b0>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd f8f2 	bl	8001048 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fd f8ee 	bl	8001048 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e184      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d030      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <HAL_RCC_OscConfig+0x2b4>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd f8d2 	bl	8001048 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fd f8ce 	bl	8001048 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e164      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x200>
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x2b4>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ece:	f7fd f8bb 	bl	8001048 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fd f8b7 	bl	8001048 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e14d      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a0 	beq.w	8004042 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10f      	bne.n	8003f32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
 8003f22:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCC_OscConfig+0x2b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d121      	bne.n	8003f82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f3e:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_RCC_OscConfig+0x2b8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <HAL_RCC_OscConfig+0x2b8>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f4a:	f7fd f87d 	bl	8001048 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f50:	e011      	b.n	8003f76 <HAL_RCC_OscConfig+0x2ce>
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	42470000 	.word	0x42470000
 8003f5c:	42470e80 	.word	0x42470e80
 8003f60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f64:	f7fd f870 	bl	8001048 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e106      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	4b85      	ldr	r3, [pc, #532]	; (800418c <HAL_RCC_OscConfig+0x4e4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2f0>
 8003f8a:	4b81      	ldr	r3, [pc, #516]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a80      	ldr	r2, [pc, #512]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x32a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x312>
 8003fa0:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a7a      	ldr	r2, [pc, #488]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	4b78      	ldr	r3, [pc, #480]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a77      	ldr	r2, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	e00b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x32a>
 8003fba:	4b75      	ldr	r3, [pc, #468]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a74      	ldr	r2, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	4b72      	ldr	r3, [pc, #456]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a71      	ldr	r2, [pc, #452]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd f835 	bl	8001048 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fd f831 	bl	8001048 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0c5      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x33a>
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fd f81f 	bl	8001048 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fd f81b 	bl	8001048 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e0af      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	4b5a      	ldr	r3, [pc, #360]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ee      	bne.n	800400e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b56      	ldr	r3, [pc, #344]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a55      	ldr	r2, [pc, #340]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 809b 	beq.w	8004182 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d05c      	beq.n	8004112 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d141      	bne.n	80040e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b4c      	ldr	r3, [pc, #304]	; (8004194 <HAL_RCC_OscConfig+0x4ec>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fc ffef 	bl	8001048 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406e:	f7fc ffeb 	bl	8001048 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e081      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004080:	4b43      	ldr	r3, [pc, #268]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	019b      	lsls	r3, r3, #6
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	061b      	lsls	r3, r3, #24
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_RCC_OscConfig+0x4ec>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fc ffc4 	bl	8001048 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fc ffc0 	bl	8001048 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e056      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	4b2e      	ldr	r3, [pc, #184]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x41c>
 80040e2:	e04e      	b.n	8004182 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_OscConfig+0x4ec>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fc ffad 	bl	8001048 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fc ffa9 	bl	8001048 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e03f      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004104:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x44a>
 8004110:	e037      	b.n	8004182 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e032      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800411e:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <HAL_RCC_OscConfig+0x4e8>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d028      	beq.n	800417e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d121      	bne.n	800417e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d11a      	bne.n	800417e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800414e:	4013      	ands	r3, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004154:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004156:	4293      	cmp	r3, r2
 8004158:	d111      	bne.n	800417e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	3b01      	subs	r3, #1
 8004168:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d107      	bne.n	800417e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40007000 	.word	0x40007000
 8004190:	40023800 	.word	0x40023800
 8004194:	42470060 	.word	0x42470060

08004198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0cc      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ac:	4b68      	ldr	r3, [pc, #416]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90c      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b63      	ldr	r3, [pc, #396]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b8      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d020      	beq.n	8004222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041ec:	4b59      	ldr	r3, [pc, #356]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004204:	4b53      	ldr	r3, [pc, #332]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800420e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	494d      	ldr	r1, [pc, #308]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d044      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d107      	bne.n	8004246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d119      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e07f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d003      	beq.n	8004256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	2b03      	cmp	r3, #3
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004256:	4b3f      	ldr	r3, [pc, #252]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004266:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e067      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b37      	ldr	r3, [pc, #220]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4934      	ldr	r1, [pc, #208]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004288:	f7fc fede 	bl	8001048 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fc feda 	bl	8001048 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04f      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d20c      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c6:	4b22      	ldr	r3, [pc, #136]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_RCC_ClockConfig+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e032      	b.n	8004346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4916      	ldr	r1, [pc, #88]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800431e:	f000 f821 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	fa22 f303 	lsr.w	r3, r2, r3
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1c4>)
 8004338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800433a:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7fc fe3e 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40023c00 	.word	0x40023c00
 8004354:	40023800 	.word	0x40023800
 8004358:	08007d70 	.word	0x08007d70
 800435c:	20000000 	.word	0x20000000
 8004360:	20000004 	.word	0x20000004

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800437c:	4b67      	ldr	r3, [pc, #412]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b08      	cmp	r3, #8
 8004386:	d00d      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004388:	2b08      	cmp	r3, #8
 800438a:	f200 80bd 	bhi.w	8004508 <HAL_RCC_GetSysClockFreq+0x1a4>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 8004392:	2b04      	cmp	r3, #4
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x3a>
 8004396:	e0b7      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800439a:	60bb      	str	r3, [r7, #8]
       break;
 800439c:	e0b7      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800439e:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80043a0:	60bb      	str	r3, [r7, #8]
      break;
 80043a2:	e0b4      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043a4:	4b5d      	ldr	r3, [pc, #372]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ae:	4b5b      	ldr	r3, [pc, #364]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04d      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b58      	ldr	r3, [pc, #352]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	461a      	mov	r2, r3
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	ea02 0800 	and.w	r8, r2, r0
 80043d2:	ea03 0901 	and.w	r9, r3, r1
 80043d6:	4640      	mov	r0, r8
 80043d8:	4649      	mov	r1, r9
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	014b      	lsls	r3, r1, #5
 80043e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e8:	0142      	lsls	r2, r0, #5
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	ebb0 0008 	subs.w	r0, r0, r8
 80043f2:	eb61 0109 	sbc.w	r1, r1, r9
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	018b      	lsls	r3, r1, #6
 8004400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004404:	0182      	lsls	r2, r0, #6
 8004406:	1a12      	subs	r2, r2, r0
 8004408:	eb63 0301 	sbc.w	r3, r3, r1
 800440c:	f04f 0000 	mov.w	r0, #0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	00d9      	lsls	r1, r3, #3
 8004416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800441a:	00d0      	lsls	r0, r2, #3
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	eb12 0208 	adds.w	r2, r2, r8
 8004424:	eb43 0309 	adc.w	r3, r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0259      	lsls	r1, r3, #9
 8004432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004436:	0250      	lsls	r0, r2, #9
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f7fb febe 	bl	80001c8 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e04a      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	461a      	mov	r2, r3
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	ea02 0400 	and.w	r4, r2, r0
 800446e:	ea03 0501 	and.w	r5, r3, r1
 8004472:	4620      	mov	r0, r4
 8004474:	4629      	mov	r1, r5
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	014b      	lsls	r3, r1, #5
 8004480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004484:	0142      	lsls	r2, r0, #5
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	1b00      	subs	r0, r0, r4
 800448c:	eb61 0105 	sbc.w	r1, r1, r5
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	018b      	lsls	r3, r1, #6
 800449a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800449e:	0182      	lsls	r2, r0, #6
 80044a0:	1a12      	subs	r2, r2, r0
 80044a2:	eb63 0301 	sbc.w	r3, r3, r1
 80044a6:	f04f 0000 	mov.w	r0, #0
 80044aa:	f04f 0100 	mov.w	r1, #0
 80044ae:	00d9      	lsls	r1, r3, #3
 80044b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044b4:	00d0      	lsls	r0, r2, #3
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	1912      	adds	r2, r2, r4
 80044bc:	eb45 0303 	adc.w	r3, r5, r3
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0299      	lsls	r1, r3, #10
 80044ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044ce:	0290      	lsls	r0, r2, #10
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f7fb fe72 	bl	80001c8 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	3301      	adds	r3, #1
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	60bb      	str	r3, [r7, #8]
      break;
 8004506:	e002      	b.n	800450e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800450a:	60bb      	str	r3, [r7, #8]
      break;
 800450c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	00f42400 	.word	0x00f42400
 8004524:	007a1200 	.word	0x007a1200

08004528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800452c:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_RCC_GetHCLKFreq+0x14>)
 800452e:	681b      	ldr	r3, [r3, #0]
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000000 	.word	0x20000000

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004544:	f7ff fff0 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0a9b      	lsrs	r3, r3, #10
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	08007d80 	.word	0x08007d80

08004568 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d105      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800458c:	2b00      	cmp	r3, #0
 800458e:	d035      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004590:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004596:	f7fc fd57 	bl	8001048 <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800459e:	f7fc fd53 	bl	8001048 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0b0      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b0:	4b5b      	ldr	r3, [pc, #364]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	019a      	lsls	r2, r3, #6
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	071b      	lsls	r3, r3, #28
 80045c8:	4955      	ldr	r1, [pc, #340]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045d0:	4b52      	ldr	r3, [pc, #328]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045d6:	f7fc fd37 	bl	8001048 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045de:	f7fc fd33 	bl	8001048 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e090      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f0:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8083 	beq.w	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	4b44      	ldr	r3, [pc, #272]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a43      	ldr	r2, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b41      	ldr	r3, [pc, #260]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004632:	f7fc fd09 	bl	8001048 <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004638:	e008      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fc fd05 	bl	8001048 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e062      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800464c:	4b35      	ldr	r3, [pc, #212]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004658:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004660:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02f      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d028      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800468c:	4a24      	ldr	r2, [pc, #144]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d114      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800469e:	f7fc fcd3 	bl	8001048 <HAL_GetTick>
 80046a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fc fccf 	bl	8001048 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e02a      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ee      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d4:	d10d      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046d6:	4b12      	ldr	r3, [pc, #72]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ea:	490d      	ldr	r1, [pc, #52]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]
 80046f0:	e005      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046f2:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046fc:	6093      	str	r3, [r2, #8]
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470a:	4905      	ldr	r1, [pc, #20]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	42470068 	.word	0x42470068
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
 8004728:	42470e40 	.word	0x42470e40

0800472c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d13e      	bne.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800474a:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d12f      	bne.n	80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004762:	617b      	str	r3, [r7, #20]
          break;
 8004764:	e02f      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004766:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004772:	d108      	bne.n	8004786 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800477c:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e007      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b0:	0f1b      	lsrs	r3, r3, #28
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]
          break;
 80047be:	e002      	b.n	80047c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
          break;
 80047c4:	bf00      	nop
        }
      }
      break;
 80047c6:	bf00      	nop
    }
  }
  return frequency;
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40023800 	.word	0x40023800
 80047dc:	00bb8000 	.word	0x00bb8000
 80047e0:	007a1200 	.word	0x007a1200
 80047e4:	00f42400 	.word	0x00f42400

080047e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e07b      	b.n	80048f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d108      	bne.n	8004814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800480a:	d009      	beq.n	8004820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	61da      	str	r2, [r3, #28]
 8004812:	e005      	b.n	8004820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fa54 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	ea42 0103 	orr.w	r1, r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0104 	and.w	r1, r3, #4
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f003 0210 	and.w	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e041      	b.n	8004990 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc fa29 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fad9 	bl	8004ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e041      	b.n	8004a2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f839 	bl	8004a36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fa8a 	bl	8004ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
	...

08004a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_TIM_PWM_Start+0x24>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	bf14      	ite	ne
 8004a68:	2301      	movne	r3, #1
 8004a6a:	2300      	moveq	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e022      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d109      	bne.n	8004a8a <HAL_TIM_PWM_Start+0x3e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	bf14      	ite	ne
 8004a82:	2301      	movne	r3, #1
 8004a84:	2300      	moveq	r3, #0
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e015      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d109      	bne.n	8004aa4 <HAL_TIM_PWM_Start+0x58>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	bf14      	ite	ne
 8004a9c:	2301      	movne	r3, #1
 8004a9e:	2300      	moveq	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	e008      	b.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07c      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Start+0x82>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	e013      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	e00b      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d104      	bne.n	8004aee <HAL_TIM_PWM_Start+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	e003      	b.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2201      	movs	r2, #1
 8004afc:	6839      	ldr	r1, [r7, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fce0 	bl	80054c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2d      	ldr	r2, [pc, #180]	; (8004bc0 <HAL_TIM_PWM_Start+0x174>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_PWM_Start+0xcc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <HAL_TIM_PWM_Start+0x178>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d101      	bne.n	8004b1c <HAL_TIM_PWM_Start+0xd0>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <HAL_TIM_PWM_Start+0xd2>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a22      	ldr	r2, [pc, #136]	; (8004bc0 <HAL_TIM_PWM_Start+0x174>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d01d      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_TIM_PWM_Start+0x17c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <HAL_TIM_PWM_Start+0x180>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_TIM_PWM_Start+0x184>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a16      	ldr	r2, [pc, #88]	; (8004bc4 <HAL_TIM_PWM_Start+0x178>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <HAL_TIM_PWM_Start+0x188>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIM_PWM_Start+0x136>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <HAL_TIM_PWM_Start+0x18c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b06      	cmp	r3, #6
 8004b92:	d010      	beq.n	8004bb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba4:	e007      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40010400 	.word	0x40010400
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800

08004bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0ae      	b.n	8004d58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b0c      	cmp	r3, #12
 8004c06:	f200 809f 	bhi.w	8004d48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c45 	.word	0x08004c45
 8004c14:	08004d49 	.word	0x08004d49
 8004c18:	08004d49 	.word	0x08004d49
 8004c1c:	08004d49 	.word	0x08004d49
 8004c20:	08004c85 	.word	0x08004c85
 8004c24:	08004d49 	.word	0x08004d49
 8004c28:	08004d49 	.word	0x08004d49
 8004c2c:	08004d49 	.word	0x08004d49
 8004c30:	08004cc7 	.word	0x08004cc7
 8004c34:	08004d49 	.word	0x08004d49
 8004c38:	08004d49 	.word	0x08004d49
 8004c3c:	08004d49 	.word	0x08004d49
 8004c40:	08004d07 	.word	0x08004d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f9f0 	bl	8005030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699a      	ldr	r2, [r3, #24]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0204 	bic.w	r2, r2, #4
 8004c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6999      	ldr	r1, [r3, #24]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	619a      	str	r2, [r3, #24]
      break;
 8004c82:	e064      	b.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fa40 	bl	8005110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	021a      	lsls	r2, r3, #8
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	619a      	str	r2, [r3, #24]
      break;
 8004cc4:	e043      	b.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fa95 	bl	80051fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69da      	ldr	r2, [r3, #28]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0208 	orr.w	r2, r2, #8
 8004ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0204 	bic.w	r2, r2, #4
 8004cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69d9      	ldr	r1, [r3, #28]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	61da      	str	r2, [r3, #28]
      break;
 8004d04:	e023      	b.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fae9 	bl	80052e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	021a      	lsls	r2, r3, #8
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	61da      	str	r2, [r3, #28]
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0b4      	b.n	8004ee6 <HAL_TIM_ConfigClockSource+0x186>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db4:	d03e      	beq.n	8004e34 <HAL_TIM_ConfigClockSource+0xd4>
 8004db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dba:	f200 8087 	bhi.w	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	f000 8086 	beq.w	8004ed2 <HAL_TIM_ConfigClockSource+0x172>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	d87f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b70      	cmp	r3, #112	; 0x70
 8004dce:	d01a      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0xa6>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d87b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d050      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0x11a>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d877      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b50      	cmp	r3, #80	; 0x50
 8004dde:	d03c      	beq.n	8004e5a <HAL_TIM_ConfigClockSource+0xfa>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d873      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d058      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x13a>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d86f      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b30      	cmp	r3, #48	; 0x30
 8004dee:	d064      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d86b      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d060      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d867      	bhi.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d05c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d05a      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x15a>
 8004e04:	e062      	b.n	8004ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6899      	ldr	r1, [r3, #8]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f000 fb35 	bl	8005484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	609a      	str	r2, [r3, #8]
      break;
 8004e32:	e04f      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f000 fb1e 	bl	8005484 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e56:	609a      	str	r2, [r3, #8]
      break;
 8004e58:	e03c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6859      	ldr	r1, [r3, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f000 fa92 	bl	8005390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2150      	movs	r1, #80	; 0x50
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 faeb 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8004e78:	e02c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 fab1 	bl	80053ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2160      	movs	r1, #96	; 0x60
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fadb 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fa72 	bl	8005390 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2140      	movs	r1, #64	; 0x40
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 facb 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e00c      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 fac2 	bl	800544e <TIM_ITRx_SetConfig>
      break;
 8004eca:	e003      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed0:	e000      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a40      	ldr	r2, [pc, #256]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f0e:	d00f      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3d      	ldr	r2, [pc, #244]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3c      	ldr	r2, [pc, #240]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d108      	bne.n	8004f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d02b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f50:	d027      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2c      	ldr	r2, [pc, #176]	; (8005008 <TIM_Base_SetConfig+0x118>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d023      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2b      	ldr	r2, [pc, #172]	; (800500c <TIM_Base_SetConfig+0x11c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	; (8005010 <TIM_Base_SetConfig+0x120>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d017      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a28      	ldr	r2, [pc, #160]	; (8005018 <TIM_Base_SetConfig+0x128>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a27      	ldr	r2, [pc, #156]	; (800501c <TIM_Base_SetConfig+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <TIM_Base_SetConfig+0x130>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	; (8005024 <TIM_Base_SetConfig+0x134>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a24      	ldr	r2, [pc, #144]	; (8005028 <TIM_Base_SetConfig+0x138>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a23      	ldr	r2, [pc, #140]	; (800502c <TIM_Base_SetConfig+0x13c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <TIM_Base_SetConfig+0x114>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d103      	bne.n	8004ff0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40010400 	.word	0x40010400
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800
 8005024:	40001800 	.word	0x40001800
 8005028:	40001c00 	.word	0x40001c00
 800502c:	40002000 	.word	0x40002000

08005030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 0302 	bic.w	r3, r3, #2
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a20      	ldr	r2, [pc, #128]	; (8005108 <TIM_OC1_SetConfig+0xd8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC1_SetConfig+0x64>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1f      	ldr	r2, [pc, #124]	; (800510c <TIM_OC1_SetConfig+0xdc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10c      	bne.n	80050ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0308 	bic.w	r3, r3, #8
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC1_SetConfig+0xd8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_OC1_SetConfig+0x8e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a14      	ldr	r2, [pc, #80]	; (800510c <TIM_OC1_SetConfig+0xdc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d111      	bne.n	80050e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	621a      	str	r2, [r3, #32]
}
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40010000 	.word	0x40010000
 800510c:	40010400 	.word	0x40010400

08005110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0210 	bic.w	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	021b      	lsls	r3, r3, #8
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0320 	bic.w	r3, r3, #32
 800515a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a22      	ldr	r2, [pc, #136]	; (80051f4 <TIM_OC2_SetConfig+0xe4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_OC2_SetConfig+0x68>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a21      	ldr	r2, [pc, #132]	; (80051f8 <TIM_OC2_SetConfig+0xe8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d10d      	bne.n	8005194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800517e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <TIM_OC2_SetConfig+0xe4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_OC2_SetConfig+0x94>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a16      	ldr	r2, [pc, #88]	; (80051f8 <TIM_OC2_SetConfig+0xe8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d113      	bne.n	80051cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40010400 	.word	0x40010400

080051fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800522a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a21      	ldr	r2, [pc, #132]	; (80052dc <TIM_OC3_SetConfig+0xe0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_OC3_SetConfig+0x66>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a20      	ldr	r2, [pc, #128]	; (80052e0 <TIM_OC3_SetConfig+0xe4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10d      	bne.n	800527e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800527c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a16      	ldr	r2, [pc, #88]	; (80052dc <TIM_OC3_SetConfig+0xe0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC3_SetConfig+0x92>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a15      	ldr	r2, [pc, #84]	; (80052e0 <TIM_OC3_SetConfig+0xe4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d113      	bne.n	80052b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	621a      	str	r2, [r3, #32]
}
 80052d0:	bf00      	nop
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400

080052e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800532e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <TIM_OC4_SetConfig+0xa4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC4_SetConfig+0x68>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a11      	ldr	r2, [pc, #68]	; (800538c <TIM_OC4_SetConfig+0xa8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d109      	bne.n	8005360 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	019b      	lsls	r3, r3, #6
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40010400 	.word	0x40010400

08005390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f023 0201 	bic.w	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 030a 	bic.w	r3, r3, #10
 80053cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b087      	sub	sp, #28
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f023 0210 	bic.w	r2, r3, #16
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	031b      	lsls	r3, r3, #12
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800544e:	b480      	push	{r7}
 8005450:	b085      	sub	sp, #20
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	f043 0307 	orr.w	r3, r3, #7
 8005470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	609a      	str	r2, [r3, #8]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	021a      	lsls	r2, r3, #8
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	431a      	orrs	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2201      	movs	r2, #1
 80054d8:	fa02 f303 	lsl.w	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1a      	ldr	r2, [r3, #32]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e05a      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005574:	d01d      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d018      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1b      	ldr	r2, [pc, #108]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d013      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1a      	ldr	r2, [pc, #104]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a17      	ldr	r2, [pc, #92]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40000800 	.word	0x40000800
 80055f8:	40000c00 	.word	0x40000c00
 80055fc:	40010400 	.word	0x40010400
 8005600:	40014000 	.word	0x40014000
 8005604:	40001800 	.word	0x40001800

08005608 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005608:	b084      	sub	sp, #16
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	f107 001c 	add.w	r0, r7, #28
 8005616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d122      	bne.n	8005666 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f9a0 	bl	80059a0 <USB_CoreReset>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e01a      	b.n	800569c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f994 	bl	80059a0 <USB_CoreReset>
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
 800568e:	e005      	b.n	800569c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d10b      	bne.n	80056ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f043 0206 	orr.w	r2, r3, #6
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f043 0220 	orr.w	r2, r3, #32
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c6:	b004      	add	sp, #16
 80056c8:	4770      	bx	lr

080056ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f023 0201 	bic.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d115      	bne.n	800575c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800573c:	2001      	movs	r0, #1
 800573e:	f7fb fc8f 	bl	8001060 <HAL_Delay>
      ms++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f91a 	bl	8005982 <USB_GetMode>
 800574e:	4603      	mov	r3, r0
 8005750:	2b01      	cmp	r3, #1
 8005752:	d01e      	beq.n	8005792 <USB_SetCurrentMode+0x84>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b31      	cmp	r3, #49	; 0x31
 8005758:	d9f0      	bls.n	800573c <USB_SetCurrentMode+0x2e>
 800575a:	e01a      	b.n	8005792 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d115      	bne.n	800578e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800576e:	2001      	movs	r0, #1
 8005770:	f7fb fc76 	bl	8001060 <HAL_Delay>
      ms++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f901 	bl	8005982 <USB_GetMode>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <USB_SetCurrentMode+0x84>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b31      	cmp	r3, #49	; 0x31
 800578a:	d9f0      	bls.n	800576e <USB_SetCurrentMode+0x60>
 800578c:	e001      	b.n	8005792 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e005      	b.n	800579e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b32      	cmp	r3, #50	; 0x32
 8005796:	d101      	bne.n	800579c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	f043 0220 	orr.w	r2, r3, #32
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <USB_FlushTxFifo+0x44>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d901      	bls.n	80057d2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d0f1      	beq.n	80057c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	00030d40 	.word	0x00030d40

080057f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2210      	movs	r2, #16
 8005800:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3301      	adds	r3, #1
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <USB_FlushRxFifo+0x3c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e006      	b.n	8005820 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b10      	cmp	r3, #16
 800581c:	d0f1      	beq.n	8005802 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	00030d40 	.word	0x00030d40

08005830 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	; 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	460b      	mov	r3, r1
 8005840:	71fb      	strb	r3, [r7, #7]
 8005842:	4613      	mov	r3, r2
 8005844:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800584e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d123      	bne.n	800589e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005856:	88bb      	ldrh	r3, [r7, #4]
 8005858:	3303      	adds	r3, #3
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e018      	b.n	8005896 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	031a      	lsls	r2, r3, #12
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	461a      	mov	r2, r3
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3301      	adds	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	3301      	adds	r3, #1
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	429a      	cmp	r2, r3
 800589c:	d3e2      	bcc.n	8005864 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3724      	adds	r7, #36	; 0x24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b08b      	sub	sp, #44	; 0x2c
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058d2:	2300      	movs	r3, #0
 80058d4:	623b      	str	r3, [r7, #32]
 80058d6:	e014      	b.n	8005902 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	3301      	adds	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	3301      	adds	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	3301      	adds	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	3301      	adds	r3, #1
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	429a      	cmp	r2, r3
 8005908:	d3e6      	bcc.n	80058d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800590a:	8bfb      	ldrh	r3, [r7, #30]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01e      	beq.n	800594e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800591a:	461a      	mov	r2, r3
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
 8005930:	b2da      	uxtb	r2, r3
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	701a      	strb	r2, [r3, #0]
      i++;
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	3301      	adds	r3, #1
 800593a:	623b      	str	r3, [r7, #32]
      pDest++;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	3301      	adds	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005942:	8bfb      	ldrh	r3, [r7, #30]
 8005944:	3b01      	subs	r3, #1
 8005946:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005948:	8bfb      	ldrh	r3, [r7, #30]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ea      	bne.n	8005924 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005950:	4618      	mov	r0, r3
 8005952:	372c      	adds	r7, #44	; 0x2c
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4013      	ands	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005974:	68fb      	ldr	r3, [r7, #12]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0301 	and.w	r3, r3, #1
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <USB_CoreReset+0x60>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e01a      	b.n	80059f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	daf3      	bge.n	80059ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <USB_CoreReset+0x60>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d901      	bls.n	80059e4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e006      	b.n	80059f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d0f1      	beq.n	80059d4 <USB_CoreReset+0x34>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	00030d40 	.word	0x00030d40

08005a04 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a04:	b084      	sub	sp, #16
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	f107 001c 	add.w	r0, r7, #28
 8005a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d018      	beq.n	8005a88 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d10a      	bne.n	8005a72 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a6a:	f043 0304 	orr.w	r3, r3, #4
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e014      	b.n	8005a9c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	e009      	b.n	8005a9c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a96:	f023 0304 	bic.w	r3, r3, #4
 8005a9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005a9c:	2110      	movs	r1, #16
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff fe82 	bl	80057a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fea3 	bl	80057f0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e015      	b.n	8005adc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abc:	461a      	mov	r2, r3
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d3e5      	bcc.n	8005ab0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <USB_HostInit+0x154>)
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <USB_HostInit+0x158>)
 8005b10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b14:	e009      	b.n	8005b2a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <USB_HostInit+0x15c>)
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <USB_HostInit+0x160>)
 8005b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f043 0210 	orr.w	r2, r3, #16
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699a      	ldr	r2, [r3, #24]
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <USB_HostInit+0x164>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b54:	b004      	add	sp, #16
 8005b56:	4770      	bx	lr
 8005b58:	01000200 	.word	0x01000200
 8005b5c:	00e00300 	.word	0x00e00300
 8005b60:	00600080 	.word	0x00600080
 8005b64:	004000e0 	.word	0x004000e0
 8005b68:	a3200008 	.word	0xa3200008

08005b6c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bba:	6053      	str	r3, [r2, #4]
 8005bbc:	e009      	b.n	8005bd2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d106      	bne.n	8005bd2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005bd0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <USB_DriveVbus+0x44>
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d106      	bne.n	8005c24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c2e:	d109      	bne.n	8005c44 <USB_DriveVbus+0x64>
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	0c5b      	lsrs	r3, r3, #17
 8005c70:	f003 0303 	and.w	r3, r3, #3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	b29b      	uxth	r3, r3
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	70fb      	strb	r3, [r7, #3]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70bb      	strb	r3, [r7, #2]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d87e      	bhi.n	8005de0 <USB_HC_Init+0x13c>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <USB_HC_Init+0x44>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005cf9 	.word	0x08005cf9
 8005cec:	08005da3 	.word	0x08005da3
 8005cf0:	08005cf9 	.word	0x08005cf9
 8005cf4:	08005d65 	.word	0x08005d65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	461a      	mov	r2, r3
 8005d06:	f240 439d 	movw	r3, #1181	; 0x49d
 8005d0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da10      	bge.n	8005d36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	78fa      	ldrb	r2, [r7, #3]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d32:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005d34:	e057      	b.n	8005de6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d051      	beq.n	8005de6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	78fa      	ldrb	r2, [r7, #3]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d60:	60d3      	str	r3, [r2, #12]
      break;
 8005d62:	e040      	b.n	8005de6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	461a      	mov	r2, r3
 8005d72:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da34      	bge.n	8005dea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005da0:	e023      	b.n	8005dea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	461a      	mov	r2, r3
 8005db0:	f240 2325 	movw	r3, #549	; 0x225
 8005db4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005db6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da17      	bge.n	8005dee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005dbe:	78fb      	ldrb	r3, [r7, #3]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	78fa      	ldrb	r2, [r7, #3]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ddc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005dde:	e006      	b.n	8005dee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	77fb      	strb	r3, [r7, #31]
      break;
 8005de4:	e004      	b.n	8005df0 <USB_HC_Init+0x14c>
      break;
 8005de6:	bf00      	nop
 8005de8:	e002      	b.n	8005df0 <USB_HC_Init+0x14c>
      break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <USB_HC_Init+0x14c>
      break;
 8005dee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df6:	699a      	ldr	r2, [r3, #24]
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2101      	movs	r1, #1
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	6939      	ldr	r1, [r7, #16]
 8005e06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005e1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da03      	bge.n	8005e2a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e001      	b.n	8005e2e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ff0f 	bl	8005c52 <USB_GetHostSpeed>
 8005e34:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d106      	bne.n	8005e4c <USB_HC_Init+0x1a8>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d003      	beq.n	8005e4c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e001      	b.n	8005e50 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e50:	787b      	ldrb	r3, [r7, #1]
 8005e52:	059b      	lsls	r3, r3, #22
 8005e54:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e58:	78bb      	ldrb	r3, [r7, #2]
 8005e5a:	02db      	lsls	r3, r3, #11
 8005e5c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e60:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e66:	049b      	lsls	r3, r3, #18
 8005e68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e6c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	0159      	lsls	r1, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e8c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d10f      	bne.n	8005eb6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eb4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005edc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d02d      	beq.n	8005f46 <USB_HC_StartXfer+0x86>
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	791b      	ldrb	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d129      	bne.n	8005f46 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d117      	bne.n	8005f28 <USB_HC_StartXfer+0x68>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	79db      	ldrb	r3, [r3, #7]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <USB_HC_StartXfer+0x48>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	79db      	ldrb	r3, [r3, #7]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d10f      	bne.n	8005f28 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	69fa      	ldr	r2, [r7, #28]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	6a3a      	ldr	r2, [r7, #32]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005f28:	79fb      	ldrb	r3, [r7, #7]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <USB_HC_StartXfer+0x86>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	795b      	ldrb	r3, [r3, #5]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d107      	bne.n	8005f46 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fa2f 	bl	80063a0 <USB_DoPing>
      return HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e0f8      	b.n	8006138 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d018      	beq.n	8005f80 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	8912      	ldrh	r2, [r2, #8]
 8005f56:	4413      	add	r3, r2
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	8912      	ldrh	r2, [r2, #8]
 8005f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f62:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f66:	8b7b      	ldrh	r3, [r7, #26]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d90b      	bls.n	8005f84 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005f6c:	8b7b      	ldrh	r3, [r7, #26]
 8005f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	8912      	ldrh	r2, [r2, #8]
 8005f76:	fb02 f203 	mul.w	r2, r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	611a      	str	r2, [r3, #16]
 8005f7e:	e001      	b.n	8005f84 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005f80:	2301      	movs	r3, #1
 8005f82:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	78db      	ldrb	r3, [r3, #3]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	8912      	ldrh	r2, [r2, #8]
 8005f92:	fb02 f203 	mul.w	r2, r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	611a      	str	r2, [r3, #16]
 8005f9a:	e003      	b.n	8005fa4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fae:	04d9      	lsls	r1, r3, #19
 8005fb0:	4b63      	ldr	r3, [pc, #396]	; (8006140 <USB_HC_StartXfer+0x280>)
 8005fb2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fb4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	7a9b      	ldrb	r3, [r3, #10]
 8005fba:	075b      	lsls	r3, r3, #29
 8005fbc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	0148      	lsls	r0, r1, #5
 8005fc4:	6a39      	ldr	r1, [r7, #32]
 8005fc6:	4401      	add	r1, r0
 8005fc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005fcc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005fce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005fd0:	79fb      	ldrb	r3, [r7, #7]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	68d9      	ldr	r1, [r3, #12]
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	460a      	mov	r2, r1
 8005fe8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006020:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	7e7b      	ldrb	r3, [r7, #25]
 8006032:	075b      	lsls	r3, r3, #29
 8006034:	69f9      	ldr	r1, [r7, #28]
 8006036:	0148      	lsls	r0, r1, #5
 8006038:	6a39      	ldr	r1, [r7, #32]
 800603a:	4401      	add	r1, r0
 800603c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	4413      	add	r3, r2
 800604c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800605a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e003      	b.n	8006076 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006074:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608a:	461a      	mov	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e04e      	b.n	8006138 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d149      	bne.n	8006136 <USB_HC_StartXfer+0x276>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d045      	beq.n	8006136 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	79db      	ldrb	r3, [r3, #7]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d830      	bhi.n	8006114 <USB_HC_StartXfer+0x254>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <USB_HC_StartXfer+0x1f8>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	080060ed 	.word	0x080060ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	3303      	adds	r3, #3
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80060d2:	8afa      	ldrh	r2, [r7, #22]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	b29b      	uxth	r3, r3
 80060da:	429a      	cmp	r2, r3
 80060dc:	d91c      	bls.n	8006118 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80060ea:	e015      	b.n	8006118 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	3303      	adds	r3, #3
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060f6:	8afa      	ldrh	r2, [r7, #22]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	b29b      	uxth	r3, r3
 8006102:	429a      	cmp	r2, r3
 8006104:	d90a      	bls.n	800611c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	619a      	str	r2, [r3, #24]
        }
        break;
 8006112:	e003      	b.n	800611c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <USB_HC_StartXfer+0x25e>
        break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <USB_HC_StartXfer+0x25e>
        break;
 800611c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	68d9      	ldr	r1, [r3, #12]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785a      	ldrb	r2, [r3, #1]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	b29b      	uxth	r3, r3
 800612c:	2000      	movs	r0, #0
 800612e:	9000      	str	r0, [sp, #0]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fb7d 	bl	8005830 <USB_WritePacket>
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	1ff80000 	.word	0x1ff80000

08006144 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	b29b      	uxth	r3, r3
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006166:	b480      	push	{r7}
 8006168:	b089      	sub	sp, #36	; 0x24
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0c9b      	lsrs	r3, r3, #18
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	0fdb      	lsrs	r3, r3, #31
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d104      	bne.n	80061c0 <USB_HC_Halt+0x5a>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e0e8      	b.n	8006392 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <USB_HC_Halt+0x66>
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d173      	bne.n	80062b4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	0151      	lsls	r1, r2, #5
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	440a      	add	r2, r1
 80061e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 80cb 	bne.w	8006390 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d143      	bne.n	800628e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	440a      	add	r2, r1
 800621c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006224:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	0151      	lsls	r1, r2, #5
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	440a      	add	r2, r1
 800623c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006244:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006264:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3301      	adds	r3, #1
 800626a:	61fb      	str	r3, [r7, #28]
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006272:	d81d      	bhi.n	80062b0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800628a:	d0ec      	beq.n	8006266 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800628c:	e080      	b.n	8006390 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ae:	e06f      	b.n	8006390 <USB_HC_Halt+0x22a>
            break;
 80062b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062b2:	e06d      	b.n	8006390 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d143      	bne.n	800636c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006302:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	4413      	add	r3, r2
 800630c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	440a      	add	r2, r1
 800631a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800631e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006322:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006342:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	3301      	adds	r3, #1
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006350:	d81d      	bhi.n	800638e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	4413      	add	r3, r2
 800635a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006364:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006368:	d0ec      	beq.n	8006344 <USB_HC_Halt+0x1de>
 800636a:	e011      	b.n	8006390 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	440a      	add	r2, r1
 8006382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e000      	b.n	8006390 <USB_HC_Halt+0x22a>
          break;
 800638e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80063b4:	2301      	movs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	04da      	lsls	r2, r3, #19
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <USB_DoPing+0x74>)
 80063be:	4013      	ands	r3, r2
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	461a      	mov	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	1ff80000 	.word	0x1ff80000

08006418 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff f95f 	bl	80056ec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800642e:	2110      	movs	r1, #16
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff f9b9 	bl	80057a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff f9da 	bl	80057f0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	e01f      	b.n	8006482 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006458:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006460:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006468:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006476:	461a      	mov	r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3301      	adds	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b0f      	cmp	r3, #15
 8006486:	d9dc      	bls.n	8006442 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006488:	2300      	movs	r3, #0
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	e034      	b.n	80064f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	461a      	mov	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3301      	adds	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d4:	d80c      	bhi.n	80064f0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ec:	d0ec      	beq.n	80064c8 <USB_StopHost+0xb0>
 80064ee:	e000      	b.n	80064f2 <USB_StopHost+0xda>
        break;
 80064f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3301      	adds	r3, #1
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b0f      	cmp	r3, #15
 80064fc:	d9c7      	bls.n	800648e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006504:	461a      	mov	r2, r3
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f04f 32ff 	mov.w	r2, #4294967295
 8006512:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff f8d8 	bl	80056ca <USB_EnableGlobalInt>

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b089      	sub	sp, #36	; 0x24
 8006528:	af04      	add	r7, sp, #16
 800652a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800652c:	2301      	movs	r3, #1
 800652e:	2202      	movs	r2, #2
 8006530:	2102      	movs	r1, #2
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fc66 	bl	8006e04 <USBH_FindInterface>
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2bff      	cmp	r3, #255	; 0xff
 8006540:	d002      	beq.n	8006548 <USBH_CDC_InterfaceInit+0x24>
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d901      	bls.n	800654c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006548:	2302      	movs	r3, #2
 800654a:	e13d      	b.n	80067c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fc3b 	bl	8006dcc <USBH_SelectInterface>
 8006556:	4603      	mov	r3, r0
 8006558:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006560:	2302      	movs	r3, #2
 8006562:	e131      	b.n	80067c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800656a:	2050      	movs	r0, #80	; 0x50
 800656c:	f001 fb12 	bl	8007b94 <malloc>
 8006570:	4603      	mov	r3, r0
 8006572:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	e11f      	b.n	80067c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006588:	2250      	movs	r2, #80	; 0x50
 800658a:	2100      	movs	r1, #0
 800658c:	68b8      	ldr	r0, [r7, #8]
 800658e:	f001 fb11 	bl	8007bb4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	211a      	movs	r1, #26
 8006598:	fb01 f303 	mul.w	r3, r1, r3
 800659c:	4413      	add	r3, r2
 800659e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	b25b      	sxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da15      	bge.n	80065d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	211a      	movs	r1, #26
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	4413      	add	r3, r2
 80065b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	211a      	movs	r1, #26
 80065c6:	fb01 f303 	mul.w	r3, r1, r3
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80065d0:	881a      	ldrh	r2, [r3, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	4619      	mov	r1, r3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 ff9c 	bl	800751a <USBH_AllocPipe>
 80065e2:	4603      	mov	r3, r0
 80065e4:	461a      	mov	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	7819      	ldrb	r1, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	7858      	ldrb	r0, [r3, #1]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	8952      	ldrh	r2, [r2, #10]
 8006602:	9202      	str	r2, [sp, #8]
 8006604:	2203      	movs	r2, #3
 8006606:	9201      	str	r2, [sp, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4623      	mov	r3, r4
 800660c:	4602      	mov	r2, r0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 ff54 	bl	80074bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2200      	movs	r2, #0
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fa17 	bl	8007a50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006622:	2300      	movs	r3, #0
 8006624:	2200      	movs	r2, #0
 8006626:	210a      	movs	r1, #10
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fbeb 	bl	8006e04 <USBH_FindInterface>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	2bff      	cmp	r3, #255	; 0xff
 8006636:	d002      	beq.n	800663e <USBH_CDC_InterfaceInit+0x11a>
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d901      	bls.n	8006642 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800663e:	2302      	movs	r3, #2
 8006640:	e0c2      	b.n	80067c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	211a      	movs	r1, #26
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	b25b      	sxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	da16      	bge.n	8006688 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	211a      	movs	r1, #26
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	4413      	add	r3, r2
 8006666:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800666a:	781a      	ldrb	r2, [r3, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	211a      	movs	r1, #26
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006680:	881a      	ldrh	r2, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	835a      	strh	r2, [r3, #26]
 8006686:	e015      	b.n	80066b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	211a      	movs	r1, #26
 800668e:	fb01 f303 	mul.w	r3, r1, r3
 8006692:	4413      	add	r3, r2
 8006694:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006698:	781a      	ldrb	r2, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	211a      	movs	r1, #26
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	211a      	movs	r1, #26
 80066ba:	fb01 f303 	mul.w	r3, r1, r3
 80066be:	4413      	add	r3, r2
 80066c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	da16      	bge.n	80066fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	211a      	movs	r1, #26
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	211a      	movs	r1, #26
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80066f2:	881a      	ldrh	r2, [r3, #0]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	835a      	strh	r2, [r3, #26]
 80066f8:	e015      	b.n	8006726 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	211a      	movs	r1, #26
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	f203 3356 	addw	r3, r3, #854	; 0x356
 800670a:	781a      	ldrb	r2, [r3, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	211a      	movs	r1, #26
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	7b9b      	ldrb	r3, [r3, #14]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fef4 	bl	800751a <USBH_AllocPipe>
 8006732:	4603      	mov	r3, r0
 8006734:	461a      	mov	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	7bdb      	ldrb	r3, [r3, #15]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 feea 	bl	800751a <USBH_AllocPipe>
 8006746:	4603      	mov	r3, r0
 8006748:	461a      	mov	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	7b59      	ldrb	r1, [r3, #13]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7b98      	ldrb	r0, [r3, #14]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	8b12      	ldrh	r2, [r2, #24]
 8006766:	9202      	str	r2, [sp, #8]
 8006768:	2202      	movs	r2, #2
 800676a:	9201      	str	r2, [sp, #4]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4623      	mov	r3, r4
 8006770:	4602      	mov	r2, r0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fea2 	bl	80074bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	7b19      	ldrb	r1, [r3, #12]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	7bd8      	ldrb	r0, [r3, #15]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	8b52      	ldrh	r2, [r2, #26]
 8006790:	9202      	str	r2, [sp, #8]
 8006792:	2202      	movs	r2, #2
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4623      	mov	r3, r4
 800679a:	4602      	mov	r2, r0
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fe8d 	bl	80074bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	7b5b      	ldrb	r3, [r3, #13]
 80067ae:	2200      	movs	r2, #0
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f94c 	bl	8007a50 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	7b1b      	ldrb	r3, [r3, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 f945 	bl	8007a50 <USBH_LL_SetToggle>

  return USBH_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd90      	pop	{r4, r7, pc}

080067d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fe82 	bl	80074fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fead 	bl	800755c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	7b1b      	ldrb	r3, [r3, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00e      	beq.n	800682e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	7b1b      	ldrb	r3, [r3, #12]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fe6f 	bl	80074fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	7b1b      	ldrb	r3, [r3, #12]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fe9a 	bl	800755c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	7b5b      	ldrb	r3, [r3, #13]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	7b5b      	ldrb	r3, [r3, #13]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fe5c 	bl	80074fa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	7b5b      	ldrb	r3, [r3, #13]
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fe87 	bl	800755c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00b      	beq.n	8006878 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	4618      	mov	r0, r3
 800686a:	f001 f99b 	bl	8007ba4 <free>
    phost->pActiveClass->pData = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006874:	2200      	movs	r2, #0
 8006876:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3340      	adds	r3, #64	; 0x40
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8b1 	bl	8006a02 <GetLineCoding>
 80068a0:	4603      	mov	r3, r0
 80068a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068b0:	2102      	movs	r1, #2
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80068b6:	7afb      	ldrb	r3, [r7, #11]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068c8:	2301      	movs	r3, #1
 80068ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d877      	bhi.n	80069d4 <USBH_CDC_Process+0x114>
 80068e4:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <USBH_CDC_Process+0x2c>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006901 	.word	0x08006901
 80068f0:	08006907 	.word	0x08006907
 80068f4:	08006937 	.word	0x08006937
 80068f8:	080069ab 	.word	0x080069ab
 80068fc:	080069b9 	.word	0x080069b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	73fb      	strb	r3, [r7, #15]
      break;
 8006904:	e06d      	b.n	80069e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f897 	bl	8006a40 <SetLineCoding>
 8006912:	4603      	mov	r3, r0
 8006914:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006924:	e058      	b.n	80069d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d055      	beq.n	80069d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2204      	movs	r2, #4
 8006930:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006934:	e050      	b.n	80069d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	3340      	adds	r3, #64	; 0x40
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f860 	bl	8006a02 <GetLineCoding>
 8006942:	4603      	mov	r3, r0
 8006944:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006946:	7bbb      	ldrb	r3, [r7, #14]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d126      	bne.n	800699a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	791b      	ldrb	r3, [r3, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d13b      	bne.n	80069dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006970:	429a      	cmp	r2, r3
 8006972:	d133      	bne.n	80069dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006980:	429a      	cmp	r2, r3
 8006982:	d12b      	bne.n	80069dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800698e:	429a      	cmp	r2, r3
 8006990:	d124      	bne.n	80069dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f958 	bl	8006c48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006998:	e020      	b.n	80069dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d01d      	beq.n	80069dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2204      	movs	r2, #4
 80069a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069a8:	e018      	b.n	80069dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f867 	bl	8006a7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f8da 	bl	8006b6a <CDC_ProcessReception>
      break;
 80069b6:	e014      	b.n	80069e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80069b8:	2100      	movs	r1, #0
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fb08 	bl	8006fd0 <USBH_ClrFeature>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80069d2:	e005      	b.n	80069e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80069d4:	bf00      	nop
 80069d6:	e004      	b.n	80069e2 <USBH_CDC_Process+0x122>
      break;
 80069d8:	bf00      	nop
 80069da:	e002      	b.n	80069e2 <USBH_CDC_Process+0x122>
      break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <USBH_CDC_Process+0x122>
      break;
 80069e0:	bf00      	nop

  }

  return status;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	22a1      	movs	r2, #161	; 0xa1
 8006a10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2221      	movs	r2, #33	; 0x21
 8006a16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2207      	movs	r2, #7
 8006a28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2207      	movs	r2, #7
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 faf1 	bl	8007018 <USBH_CtlReq>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2221      	movs	r2, #33	; 0x21
 8006a4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2207      	movs	r2, #7
 8006a66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fad2 	bl	8007018 <USBH_CtlReq>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af02      	add	r7, sp, #8
 8006a84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d002      	beq.n	8006aa4 <CDC_ProcessTransmission+0x26>
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d023      	beq.n	8006aea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006aa2:	e05e      	b.n	8006b62 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	8b12      	ldrh	r2, [r2, #24]
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d90b      	bls.n	8006ac8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	69d9      	ldr	r1, [r3, #28]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8b1a      	ldrh	r2, [r3, #24]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7b5b      	ldrb	r3, [r3, #13]
 8006abc:	2001      	movs	r0, #1
 8006abe:	9000      	str	r0, [sp, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fcb8 	bl	8007436 <USBH_BulkSendData>
 8006ac6:	e00b      	b.n	8006ae0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	7b5b      	ldrb	r3, [r3, #13]
 8006ad6:	2001      	movs	r0, #1
 8006ad8:	9000      	str	r0, [sp, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fcab 	bl	8007436 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ae8:	e03b      	b.n	8006b62 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	7b5b      	ldrb	r3, [r3, #13]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 ff83 	bl	80079fc <USBH_LL_GetURBState>
 8006af6:	4603      	mov	r3, r0
 8006af8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d128      	bne.n	8006b52 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	8b12      	ldrh	r2, [r2, #24]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d90e      	bls.n	8006b2a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	8b12      	ldrh	r2, [r2, #24]
 8006b14:	1a9a      	subs	r2, r3, r2
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	8b12      	ldrh	r2, [r2, #24]
 8006b22:	441a      	add	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	61da      	str	r2, [r3, #28]
 8006b28:	e002      	b.n	8006b30 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b40:	e00e      	b.n	8006b60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f868 	bl	8006c20 <USBH_CDC_TransmitCallback>
      break;
 8006b50:	e006      	b.n	8006b60 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d103      	bne.n	8006b60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b60:	bf00      	nop
  }
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d002      	beq.n	8006b90 <CDC_ProcessReception+0x26>
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d00e      	beq.n	8006bac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006b8e:	e043      	b.n	8006c18 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	6a19      	ldr	r1, [r3, #32]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	8b5a      	ldrh	r2, [r3, #26]
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	7b1b      	ldrb	r3, [r3, #12]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fc6f 	bl	8007480 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006baa:	e035      	b.n	8006c18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	7b1b      	ldrb	r3, [r3, #12]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 ff22 	bl	80079fc <USBH_LL_GetURBState>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006bbc:	7cfb      	ldrb	r3, [r7, #19]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d129      	bne.n	8006c16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	7b1b      	ldrb	r3, [r3, #12]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fe85 	bl	80078d8 <USBH_LL_GetLastXferSize>
 8006bce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d016      	beq.n	8006c08 <CDC_ProcessReception+0x9e>
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	8b5b      	ldrh	r3, [r3, #26]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d910      	bls.n	8006c08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a1a      	ldr	r2, [r3, #32]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	441a      	add	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c06:	e006      	b.n	8006c16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f80f 	bl	8006c34 <USBH_CDC_ReceiveCallback>
      break;
 8006c16:	bf00      	nop
  }
}
 8006c18:	bf00      	nop
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	4613      	mov	r3, r2
 8006c68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c70:	2302      	movs	r3, #2
 8006c72:	e029      	b.n	8006cc8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	79fa      	ldrb	r2, [r7, #7]
 8006c78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f81f 	bl	8006cd0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fd97 	bl	80077f4 <USBH_LL_Init>

  return USBH_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	e009      	b.n	8006cf6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	33e0      	adds	r3, #224	; 0xe0
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	2200      	movs	r2, #0
 8006cee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b0e      	cmp	r3, #14
 8006cfa:	d9f2      	bls.n	8006ce2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	e009      	b.n	8006d16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1c:	d3f1      	bcc.n	8006d02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2240      	movs	r2, #64	; 0x40
 8006d42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d016      	beq.n	8006dba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10e      	bne.n	8006db4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d9c:	1c59      	adds	r1, r3, #1
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	33de      	adds	r3, #222	; 0xde
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	e004      	b.n	8006dbe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006db4:	2302      	movs	r3, #2
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	e001      	b.n	8006dbe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006de2:	78fa      	ldrb	r2, [r7, #3]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d204      	bcs.n	8006df2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006df0:	e001      	b.n	8006df6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	70fb      	strb	r3, [r7, #3]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70bb      	strb	r3, [r7, #2]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006e2c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e2e:	e025      	b.n	8006e7c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	221a      	movs	r2, #26
 8006e34:	fb02 f303 	mul.w	r3, r2, r3
 8006e38:	3308      	adds	r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3302      	adds	r3, #2
 8006e40:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	795b      	ldrb	r3, [r3, #5]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d002      	beq.n	8006e52 <USBH_FindInterface+0x4e>
 8006e4c:	78fb      	ldrb	r3, [r7, #3]
 8006e4e:	2bff      	cmp	r3, #255	; 0xff
 8006e50:	d111      	bne.n	8006e76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e56:	78ba      	ldrb	r2, [r7, #2]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d002      	beq.n	8006e62 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e5c:	78bb      	ldrb	r3, [r7, #2]
 8006e5e:	2bff      	cmp	r3, #255	; 0xff
 8006e60:	d109      	bne.n	8006e76 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e66:	787a      	ldrb	r2, [r7, #1]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d002      	beq.n	8006e72 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e6c:	787b      	ldrb	r3, [r7, #1]
 8006e6e:	2bff      	cmp	r3, #255	; 0xff
 8006e70:	d101      	bne.n	8006e76 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	e006      	b.n	8006e84 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d9d6      	bls.n	8006e30 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e82:	23ff      	movs	r3, #255	; 0xff
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fce7 	bl	800786c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fdbe 	bl	8007a22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f804 	bl	8006ef2 <USBH_HandleSof>
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b0b      	cmp	r3, #11
 8006f02:	d10a      	bne.n	8006f1a <USBH_HandleSof+0x28>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
  }
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006f32:	bf00      	nop
}
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f4e:	bf00      	nop
}
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc7a 	bl	80078a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	791b      	ldrb	r3, [r3, #4]
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fad1 	bl	800755c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	795b      	ldrb	r3, [r3, #5]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 facb 	bl	800755c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	460b      	mov	r3, r1
 8006fda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	789b      	ldrb	r3, [r3, #2]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d10f      	bne.n	8007004 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006ff6:	78fb      	ldrb	r3, [r7, #3]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007004:	2200      	movs	r2, #0
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f805 	bl	8007018 <USBH_CtlReq>
 800700e:	4603      	mov	r3, r0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007026:	2301      	movs	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	789b      	ldrb	r3, [r3, #2]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d002      	beq.n	8007038 <USBH_CtlReq+0x20>
 8007032:	2b02      	cmp	r3, #2
 8007034:	d00f      	beq.n	8007056 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007036:	e027      	b.n	8007088 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2202      	movs	r2, #2
 800704e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
      break;
 8007054:	e018      	b.n	8007088 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f81c 	bl	8007094 <USBH_HandleControl>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007060:	7dfb      	ldrb	r3, [r7, #23]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <USBH_CtlReq+0x54>
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b03      	cmp	r3, #3
 800706a:	d106      	bne.n	800707a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	761a      	strb	r2, [r3, #24]
      break;
 8007078:	e005      	b.n	8007086 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800707a:	7dfb      	ldrb	r3, [r7, #23]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d102      	bne.n	8007086 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	709a      	strb	r2, [r3, #2]
      break;
 8007086:	bf00      	nop
  }
  return status;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af02      	add	r7, sp, #8
 800709a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	7e1b      	ldrb	r3, [r3, #24]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2b0a      	cmp	r3, #10
 80070ac:	f200 8156 	bhi.w	800735c <USBH_HandleControl+0x2c8>
 80070b0:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USBH_HandleControl+0x24>)
 80070b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b6:	bf00      	nop
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070ff 	.word	0x080070ff
 80070c0:	08007169 	.word	0x08007169
 80070c4:	0800718f 	.word	0x0800718f
 80070c8:	080071c7 	.word	0x080071c7
 80070cc:	080071f1 	.word	0x080071f1
 80070d0:	08007243 	.word	0x08007243
 80070d4:	08007265 	.word	0x08007265
 80070d8:	080072a1 	.word	0x080072a1
 80070dc:	080072c7 	.word	0x080072c7
 80070e0:	08007305 	.word	0x08007305
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f103 0110 	add.w	r1, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	795b      	ldrb	r3, [r3, #5]
 80070ee:	461a      	mov	r2, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f943 	bl	800737c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	761a      	strb	r2, [r3, #24]
      break;
 80070fc:	e139      	b.n	8007372 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	795b      	ldrb	r3, [r3, #5]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc79 	bl	80079fc <USBH_LL_GetURBState>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d11e      	bne.n	8007152 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7c1b      	ldrb	r3, [r3, #16]
 8007118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800711c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8adb      	ldrh	r3, [r3, #22]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007126:	7b7b      	ldrb	r3, [r7, #13]
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d103      	bne.n	8007134 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007132:	e115      	b.n	8007360 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2205      	movs	r2, #5
 8007138:	761a      	strb	r2, [r3, #24]
      break;
 800713a:	e111      	b.n	8007360 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800713c:	7b7b      	ldrb	r3, [r7, #13]
 800713e:	2b80      	cmp	r3, #128	; 0x80
 8007140:	d103      	bne.n	800714a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2209      	movs	r2, #9
 8007146:	761a      	strb	r2, [r3, #24]
      break;
 8007148:	e10a      	b.n	8007360 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2207      	movs	r2, #7
 800714e:	761a      	strb	r2, [r3, #24]
      break;
 8007150:	e106      	b.n	8007360 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b04      	cmp	r3, #4
 8007156:	d003      	beq.n	8007160 <USBH_HandleControl+0xcc>
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b02      	cmp	r3, #2
 800715c:	f040 8100 	bne.w	8007360 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	220b      	movs	r2, #11
 8007164:	761a      	strb	r2, [r3, #24]
      break;
 8007166:	e0fb      	b.n	8007360 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6899      	ldr	r1, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	899a      	ldrh	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	791b      	ldrb	r3, [r3, #4]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f93a 	bl	80073fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2204      	movs	r2, #4
 800718a:	761a      	strb	r2, [r3, #24]
      break;
 800718c:	e0f1      	b.n	8007372 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	791b      	ldrb	r3, [r3, #4]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fc31 	bl	80079fc <USBH_LL_GetURBState>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d102      	bne.n	80071aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2209      	movs	r2, #9
 80071a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b05      	cmp	r3, #5
 80071ae:	d102      	bne.n	80071b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80071b0:	2303      	movs	r3, #3
 80071b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071b4:	e0d6      	b.n	8007364 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	f040 80d3 	bne.w	8007364 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	220b      	movs	r2, #11
 80071c2:	761a      	strb	r2, [r3, #24]
      break;
 80071c4:	e0ce      	b.n	8007364 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6899      	ldr	r1, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	899a      	ldrh	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	2001      	movs	r0, #1
 80071d4:	9000      	str	r0, [sp, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8ea 	bl	80073b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2206      	movs	r2, #6
 80071ec:	761a      	strb	r2, [r3, #24]
      break;
 80071ee:	e0c0      	b.n	8007372 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	795b      	ldrb	r3, [r3, #5]
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fc00 	bl	80079fc <USBH_LL_GetURBState>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d103      	bne.n	800720e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2207      	movs	r2, #7
 800720a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800720c:	e0ac      	b.n	8007368 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b05      	cmp	r3, #5
 8007212:	d105      	bne.n	8007220 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	220c      	movs	r2, #12
 8007218:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800721a:	2303      	movs	r3, #3
 800721c:	73fb      	strb	r3, [r7, #15]
      break;
 800721e:	e0a3      	b.n	8007368 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007220:	7bbb      	ldrb	r3, [r7, #14]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d103      	bne.n	800722e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2205      	movs	r2, #5
 800722a:	761a      	strb	r2, [r3, #24]
      break;
 800722c:	e09c      	b.n	8007368 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b04      	cmp	r3, #4
 8007232:	f040 8099 	bne.w	8007368 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	220b      	movs	r2, #11
 800723a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800723c:	2302      	movs	r3, #2
 800723e:	73fb      	strb	r3, [r7, #15]
      break;
 8007240:	e092      	b.n	8007368 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	791b      	ldrb	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8d5 	bl	80073fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2208      	movs	r2, #8
 8007260:	761a      	strb	r2, [r3, #24]

      break;
 8007262:	e086      	b.n	8007372 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fbc6 	bl	80079fc <USBH_LL_GetURBState>
 8007270:	4603      	mov	r3, r0
 8007272:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d105      	bne.n	8007286 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	220d      	movs	r2, #13
 800727e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007284:	e072      	b.n	800736c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007286:	7bbb      	ldrb	r3, [r7, #14]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d103      	bne.n	8007294 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	220b      	movs	r2, #11
 8007290:	761a      	strb	r2, [r3, #24]
      break;
 8007292:	e06b      	b.n	800736c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	2b05      	cmp	r3, #5
 8007298:	d168      	bne.n	800736c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800729a:	2303      	movs	r3, #3
 800729c:	73fb      	strb	r3, [r7, #15]
      break;
 800729e:	e065      	b.n	800736c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	795b      	ldrb	r3, [r3, #5]
 80072a4:	2201      	movs	r2, #1
 80072a6:	9200      	str	r2, [sp, #0]
 80072a8:	2200      	movs	r2, #0
 80072aa:	2100      	movs	r1, #0
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f87f 	bl	80073b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	220a      	movs	r2, #10
 80072c2:	761a      	strb	r2, [r3, #24]
      break;
 80072c4:	e055      	b.n	8007372 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	795b      	ldrb	r3, [r3, #5]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fb95 	bl	80079fc <USBH_LL_GetURBState>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d105      	bne.n	80072e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220d      	movs	r2, #13
 80072e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072e6:	e043      	b.n	8007370 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d103      	bne.n	80072f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2209      	movs	r2, #9
 80072f2:	761a      	strb	r2, [r3, #24]
      break;
 80072f4:	e03c      	b.n	8007370 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d139      	bne.n	8007370 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	220b      	movs	r2, #11
 8007300:	761a      	strb	r2, [r3, #24]
      break;
 8007302:	e035      	b.n	8007370 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	7e5b      	ldrb	r3, [r3, #25]
 8007308:	3301      	adds	r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	765a      	strb	r2, [r3, #25]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7e5b      	ldrb	r3, [r3, #25]
 8007314:	2b02      	cmp	r3, #2
 8007316:	d806      	bhi.n	8007326 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007324:	e025      	b.n	8007372 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800732c:	2106      	movs	r1, #6
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	795b      	ldrb	r3, [r3, #5]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f90c 	bl	800755c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	791b      	ldrb	r3, [r3, #4]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f906 	bl	800755c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007356:	2302      	movs	r3, #2
 8007358:	73fb      	strb	r3, [r7, #15]
      break;
 800735a:	e00a      	b.n	8007372 <USBH_HandleControl+0x2de>

    default:
      break;
 800735c:	bf00      	nop
 800735e:	e008      	b.n	8007372 <USBH_HandleControl+0x2de>
      break;
 8007360:	bf00      	nop
 8007362:	e006      	b.n	8007372 <USBH_HandleControl+0x2de>
      break;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <USBH_HandleControl+0x2de>
      break;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <USBH_HandleControl+0x2de>
      break;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <USBH_HandleControl+0x2de>
      break;
 8007370:	bf00      	nop
  }

  return status;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af04      	add	r7, sp, #16
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800738a:	79f9      	ldrb	r1, [r7, #7]
 800738c:	2300      	movs	r3, #0
 800738e:	9303      	str	r3, [sp, #12]
 8007390:	2308      	movs	r3, #8
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	2300      	movs	r3, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	2300      	movs	r3, #0
 800739e:	2200      	movs	r2, #0
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fafa 	bl	800799a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af04      	add	r7, sp, #16
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	460b      	mov	r3, r1
 80073c0:	80fb      	strh	r3, [r7, #6]
 80073c2:	4613      	mov	r3, r2
 80073c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80073d4:	7979      	ldrb	r1, [r7, #5]
 80073d6:	7e3b      	ldrb	r3, [r7, #24]
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	9302      	str	r3, [sp, #8]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	2301      	movs	r3, #1
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	2200      	movs	r2, #0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fad5 	bl	800799a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b088      	sub	sp, #32
 80073fe:	af04      	add	r7, sp, #16
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	60b9      	str	r1, [r7, #8]
 8007404:	4611      	mov	r1, r2
 8007406:	461a      	mov	r2, r3
 8007408:	460b      	mov	r3, r1
 800740a:	80fb      	strh	r3, [r7, #6]
 800740c:	4613      	mov	r3, r2
 800740e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007410:	7979      	ldrb	r1, [r7, #5]
 8007412:	2300      	movs	r3, #0
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	2301      	movs	r3, #1
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	2201      	movs	r2, #1
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fab7 	bl	800799a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800742c:	2300      	movs	r3, #0

}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b088      	sub	sp, #32
 800743a:	af04      	add	r7, sp, #16
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	4611      	mov	r1, r2
 8007442:	461a      	mov	r2, r3
 8007444:	460b      	mov	r3, r1
 8007446:	80fb      	strh	r3, [r7, #6]
 8007448:	4613      	mov	r3, r2
 800744a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800745a:	7979      	ldrb	r1, [r7, #5]
 800745c:	7e3b      	ldrb	r3, [r7, #24]
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	9302      	str	r3, [sp, #8]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	9301      	str	r3, [sp, #4]
 8007468:	2301      	movs	r3, #1
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	2302      	movs	r3, #2
 800746e:	2200      	movs	r2, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fa92 	bl	800799a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af04      	add	r7, sp, #16
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	460b      	mov	r3, r1
 8007490:	80fb      	strh	r3, [r7, #6]
 8007492:	4613      	mov	r3, r2
 8007494:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007496:	7979      	ldrb	r1, [r7, #5]
 8007498:	2300      	movs	r3, #0
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	88fb      	ldrh	r3, [r7, #6]
 800749e:	9302      	str	r3, [sp, #8]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	2301      	movs	r3, #1
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2302      	movs	r3, #2
 80074aa:	2201      	movs	r2, #1
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fa74 	bl	800799a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af04      	add	r7, sp, #16
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	461a      	mov	r2, r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	70fb      	strb	r3, [r7, #3]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70bb      	strb	r3, [r7, #2]
 80074d2:	4613      	mov	r3, r2
 80074d4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80074d6:	7878      	ldrb	r0, [r7, #1]
 80074d8:	78ba      	ldrb	r2, [r7, #2]
 80074da:	78f9      	ldrb	r1, [r7, #3]
 80074dc:	8b3b      	ldrh	r3, [r7, #24]
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	7d3b      	ldrb	r3, [r7, #20]
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	7c3b      	ldrb	r3, [r7, #16]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	4603      	mov	r3, r0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fa07 	bl	80078fe <USBH_LL_OpenPipe>

  return USBH_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fa26 	bl	800795c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f836 	bl	8007598 <USBH_GetFreePipe>
 800752c:	4603      	mov	r3, r0
 800752e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007536:	4293      	cmp	r3, r2
 8007538:	d00a      	beq.n	8007550 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800753a:	78fa      	ldrb	r2, [r7, #3]
 800753c:	89fb      	ldrh	r3, [r7, #14]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	33e0      	adds	r3, #224	; 0xe0
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007550:	89fb      	ldrh	r3, [r7, #14]
 8007552:	b2db      	uxtb	r3, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d80d      	bhi.n	800758a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	33e0      	adds	r3, #224	; 0xe0
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	33e0      	adds	r3, #224	; 0xe0
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
 80075a8:	e00f      	b.n	80075ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	33e0      	adds	r3, #224	; 0xe0
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d102      	bne.n	80075c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	e007      	b.n	80075d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	3301      	adds	r3, #1
 80075c8:	73fb      	strb	r3, [r7, #15]
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b0a      	cmp	r3, #10
 80075ce:	d9ec      	bls.n	80075aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80075d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80075e4:	2201      	movs	r2, #1
 80075e6:	490e      	ldr	r1, [pc, #56]	; (8007620 <MX_USB_HOST_Init+0x40>)
 80075e8:	480e      	ldr	r0, [pc, #56]	; (8007624 <MX_USB_HOST_Init+0x44>)
 80075ea:	f7ff fb37 	bl	8006c5c <USBH_Init>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80075f4:	f7f9 fa82 	bl	8000afc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80075f8:	490b      	ldr	r1, [pc, #44]	; (8007628 <MX_USB_HOST_Init+0x48>)
 80075fa:	480a      	ldr	r0, [pc, #40]	; (8007624 <MX_USB_HOST_Init+0x44>)
 80075fc:	f7ff fbbc 	bl	8006d78 <USBH_RegisterClass>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007606:	f7f9 fa79 	bl	8000afc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800760a:	4806      	ldr	r0, [pc, #24]	; (8007624 <MX_USB_HOST_Init+0x44>)
 800760c:	f7ff fc40 	bl	8006e90 <USBH_Start>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007616:	f7f9 fa71 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800761a:	bf00      	nop
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	0800762d 	.word	0x0800762d
 8007624:	200001fc 	.word	0x200001fc
 8007628:	2000000c 	.word	0x2000000c

0800762c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	3b01      	subs	r3, #1
 800763c:	2b04      	cmp	r3, #4
 800763e:	d819      	bhi.n	8007674 <USBH_UserProcess+0x48>
 8007640:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <USBH_UserProcess+0x1c>)
 8007642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007646:	bf00      	nop
 8007648:	08007675 	.word	0x08007675
 800764c:	08007665 	.word	0x08007665
 8007650:	08007675 	.word	0x08007675
 8007654:	0800766d 	.word	0x0800766d
 8007658:	0800765d 	.word	0x0800765d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800765c:	4b09      	ldr	r3, [pc, #36]	; (8007684 <USBH_UserProcess+0x58>)
 800765e:	2203      	movs	r2, #3
 8007660:	701a      	strb	r2, [r3, #0]
  break;
 8007662:	e008      	b.n	8007676 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <USBH_UserProcess+0x58>)
 8007666:	2202      	movs	r2, #2
 8007668:	701a      	strb	r2, [r3, #0]
  break;
 800766a:	e004      	b.n	8007676 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <USBH_UserProcess+0x58>)
 800766e:	2201      	movs	r2, #1
 8007670:	701a      	strb	r2, [r3, #0]
  break;
 8007672:	e000      	b.n	8007676 <USBH_UserProcess+0x4a>

  default:
  break;
 8007674:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	200000b0 	.word	0x200000b0

08007688 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	609a      	str	r2, [r3, #8]
 800769c:	60da      	str	r2, [r3, #12]
 800769e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076a8:	d147      	bne.n	800773a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	4b25      	ldr	r3, [pc, #148]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a24      	ldr	r2, [pc, #144]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 80076b4:	f043 0301 	orr.w	r3, r3, #1
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ba:	4b22      	ldr	r3, [pc, #136]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80076c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	4619      	mov	r1, r3
 80076da:	481b      	ldr	r0, [pc, #108]	; (8007748 <HAL_HCD_MspInit+0xc0>)
 80076dc:	f7f9 fdf6 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80076e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80076e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076e6:	2302      	movs	r3, #2
 80076e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ee:	2300      	movs	r3, #0
 80076f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80076f2:	230a      	movs	r3, #10
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076f6:	f107 0314 	add.w	r3, r7, #20
 80076fa:	4619      	mov	r1, r3
 80076fc:	4812      	ldr	r0, [pc, #72]	; (8007748 <HAL_HCD_MspInit+0xc0>)
 80076fe:	f7f9 fde5 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 8007704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007706:	4a0f      	ldr	r2, [pc, #60]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	6353      	str	r3, [r2, #52]	; 0x34
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 8007714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007716:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 8007718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800771c:	6453      	str	r3, [r2, #68]	; 0x44
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_HCD_MspInit+0xbc>)
 8007720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	2043      	movs	r0, #67	; 0x43
 8007730:	f7f9 fd95 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007734:	2043      	movs	r0, #67	; 0x43
 8007736:	f7f9 fdae 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800773a:	bf00      	nop
 800773c:	3728      	adds	r7, #40	; 0x28
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40023800 	.word	0x40023800
 8007748:	40020000 	.word	0x40020000

0800774c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff fbb7 	bl	8006ece <USBH_LL_IncTimer>
}
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff fbef 	bl	8006f5a <USBH_LL_Connect>
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff fbf8 	bl	8006f88 <USBH_LL_Disconnect>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
 80077ac:	4613      	mov	r3, r2
 80077ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fba9 	bl	8006f22 <USBH_LL_PortEnabled>
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fba9 	bl	8006f3e <USBH_LL_PortDisabled>
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007802:	2b01      	cmp	r3, #1
 8007804:	d12a      	bne.n	800785c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007806:	4a18      	ldr	r2, [pc, #96]	; (8007868 <USBH_LL_Init+0x74>)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a15      	ldr	r2, [pc, #84]	; (8007868 <USBH_LL_Init+0x74>)
 8007812:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007816:	4b14      	ldr	r3, [pc, #80]	; (8007868 <USBH_LL_Init+0x74>)
 8007818:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800781c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <USBH_LL_Init+0x74>)
 8007820:	2208      	movs	r2, #8
 8007822:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <USBH_LL_Init+0x74>)
 8007826:	2201      	movs	r2, #1
 8007828:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800782a:	4b0f      	ldr	r3, [pc, #60]	; (8007868 <USBH_LL_Init+0x74>)
 800782c:	2200      	movs	r2, #0
 800782e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <USBH_LL_Init+0x74>)
 8007832:	2202      	movs	r2, #2
 8007834:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007836:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <USBH_LL_Init+0x74>)
 8007838:	2200      	movs	r2, #0
 800783a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800783c:	480a      	ldr	r0, [pc, #40]	; (8007868 <USBH_LL_Init+0x74>)
 800783e:	f7f9 fefa 	bl	8001636 <HAL_HCD_Init>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007848:	f7f9 f958 	bl	8000afc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800784c:	4806      	ldr	r0, [pc, #24]	; (8007868 <USBH_LL_Init+0x74>)
 800784e:	f7fa fad0 	bl	8001df2 <HAL_HCD_GetCurrentFrame>
 8007852:	4603      	mov	r3, r0
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff fb2a 	bl	8006eb0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200005d4 	.word	0x200005d4

0800786c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007882:	4618      	mov	r0, r3
 8007884:	f7fa fa4d 	bl	8001d22 <HAL_HCD_Start>
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 f90e 	bl	8007ab0 <USBH_Get_USB_Status>
 8007894:	4603      	mov	r3, r0
 8007896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007898:	7bbb      	ldrb	r3, [r7, #14]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fa fa55 	bl	8001d68 <HAL_HCD_Stop>
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f8f3 	bl	8007ab0 <USBH_Get_USB_Status>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fa fa6b 	bl	8001dca <HAL_HCD_HC_GetXferCount>
 80078f4:	4603      	mov	r3, r0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b089      	sub	sp, #36	; 0x24
 8007902:	af04      	add	r7, sp, #16
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	4608      	mov	r0, r1
 8007908:	4611      	mov	r1, r2
 800790a:	461a      	mov	r2, r3
 800790c:	4603      	mov	r3, r0
 800790e:	70fb      	strb	r3, [r7, #3]
 8007910:	460b      	mov	r3, r1
 8007912:	70bb      	strb	r3, [r7, #2]
 8007914:	4613      	mov	r3, r2
 8007916:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007926:	787c      	ldrb	r4, [r7, #1]
 8007928:	78ba      	ldrb	r2, [r7, #2]
 800792a:	78f9      	ldrb	r1, [r7, #3]
 800792c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800792e:	9302      	str	r3, [sp, #8]
 8007930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4623      	mov	r3, r4
 800793e:	f7f9 fedc 	bl	80016fa <HAL_HCD_HC_Init>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8b1 	bl	8007ab0 <USBH_Get_USB_Status>
 800794e:	4603      	mov	r3, r0
 8007950:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007952:	7bbb      	ldrb	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	bd90      	pop	{r4, r7, pc}

0800795c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800796c:	2300      	movs	r3, #0
 800796e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7f9 ff4c 	bl	8001818 <HAL_HCD_HC_Halt>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f892 	bl	8007ab0 <USBH_Get_USB_Status>
 800798c:	4603      	mov	r3, r0
 800798e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800799a:	b590      	push	{r4, r7, lr}
 800799c:	b089      	sub	sp, #36	; 0x24
 800799e:	af04      	add	r7, sp, #16
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	461a      	mov	r2, r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	70fb      	strb	r3, [r7, #3]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70bb      	strb	r3, [r7, #2]
 80079b0:	4613      	mov	r3, r2
 80079b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80079c2:	787c      	ldrb	r4, [r7, #1]
 80079c4:	78ba      	ldrb	r2, [r7, #2]
 80079c6:	78f9      	ldrb	r1, [r7, #3]
 80079c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079d0:	9302      	str	r3, [sp, #8]
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4623      	mov	r3, r4
 80079de:	f7f9 ff3f 	bl	8001860 <HAL_HCD_HC_SubmitRequest>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 f861 	bl	8007ab0 <USBH_Get_USB_Status>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd90      	pop	{r4, r7, pc}

080079fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	4611      	mov	r1, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fa f9c5 	bl	8001da2 <HAL_HCD_HC_GetURBState>
 8007a18:	4603      	mov	r3, r0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d103      	bne.n	8007a40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f864 	bl	8007b08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007a40:	20c8      	movs	r0, #200	; 0xc8
 8007a42:	f7f9 fb0d 	bl	8001060 <HAL_Delay>
  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	212c      	movs	r1, #44	; 0x2c
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	333b      	adds	r3, #59	; 0x3b
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d009      	beq.n	8007a90 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	212c      	movs	r1, #44	; 0x2c
 8007a82:	fb01 f303 	mul.w	r3, r1, r3
 8007a86:	4413      	add	r3, r2
 8007a88:	3354      	adds	r3, #84	; 0x54
 8007a8a:	78ba      	ldrb	r2, [r7, #2]
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e008      	b.n	8007aa2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	212c      	movs	r1, #44	; 0x2c
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3355      	adds	r3, #85	; 0x55
 8007a9e:	78ba      	ldrb	r2, [r7, #2]
 8007aa0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d817      	bhi.n	8007af4 <USBH_Get_USB_Status+0x44>
 8007ac4:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <USBH_Get_USB_Status+0x1c>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007add 	.word	0x08007add
 8007ad0:	08007ae3 	.word	0x08007ae3
 8007ad4:	08007ae9 	.word	0x08007ae9
 8007ad8:	08007aef 	.word	0x08007aef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae0:	e00b      	b.n	8007afa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae6:	e008      	b.n	8007afa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
    break;
 8007aec:	e005      	b.n	8007afa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007aee:	2302      	movs	r3, #2
 8007af0:	73fb      	strb	r3, [r7, #15]
    break;
 8007af2:	e002      	b.n	8007afa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007af4:	2302      	movs	r3, #2
 8007af6:	73fb      	strb	r3, [r7, #15]
    break;
 8007af8:	bf00      	nop
  }
  return usb_status;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
 8007b20:	e001      	b.n	8007b26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4803      	ldr	r0, [pc, #12]	; (8007b3c <MX_DriverVbusFS+0x34>)
 8007b2e:	f7f9 fd69 	bl	8001604 <HAL_GPIO_WritePin>
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40020800 	.word	0x40020800

08007b40 <__errno>:
 8007b40:	4b01      	ldr	r3, [pc, #4]	; (8007b48 <__errno+0x8>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	2000002c 	.word	0x2000002c

08007b4c <__libc_init_array>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	4d0d      	ldr	r5, [pc, #52]	; (8007b84 <__libc_init_array+0x38>)
 8007b50:	4c0d      	ldr	r4, [pc, #52]	; (8007b88 <__libc_init_array+0x3c>)
 8007b52:	1b64      	subs	r4, r4, r5
 8007b54:	10a4      	asrs	r4, r4, #2
 8007b56:	2600      	movs	r6, #0
 8007b58:	42a6      	cmp	r6, r4
 8007b5a:	d109      	bne.n	8007b70 <__libc_init_array+0x24>
 8007b5c:	4d0b      	ldr	r5, [pc, #44]	; (8007b8c <__libc_init_array+0x40>)
 8007b5e:	4c0c      	ldr	r4, [pc, #48]	; (8007b90 <__libc_init_array+0x44>)
 8007b60:	f000 f8f8 	bl	8007d54 <_init>
 8007b64:	1b64      	subs	r4, r4, r5
 8007b66:	10a4      	asrs	r4, r4, #2
 8007b68:	2600      	movs	r6, #0
 8007b6a:	42a6      	cmp	r6, r4
 8007b6c:	d105      	bne.n	8007b7a <__libc_init_array+0x2e>
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b74:	4798      	blx	r3
 8007b76:	3601      	adds	r6, #1
 8007b78:	e7ee      	b.n	8007b58 <__libc_init_array+0xc>
 8007b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	e7f2      	b.n	8007b6a <__libc_init_array+0x1e>
 8007b84:	08007d90 	.word	0x08007d90
 8007b88:	08007d90 	.word	0x08007d90
 8007b8c:	08007d90 	.word	0x08007d90
 8007b90:	08007d94 	.word	0x08007d94

08007b94 <malloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	; (8007ba0 <malloc+0xc>)
 8007b96:	4601      	mov	r1, r0
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f000 b863 	b.w	8007c64 <_malloc_r>
 8007b9e:	bf00      	nop
 8007ba0:	2000002c 	.word	0x2000002c

08007ba4 <free>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <free+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f000 b80b 	b.w	8007bc4 <_free_r>
 8007bae:	bf00      	nop
 8007bb0:	2000002c 	.word	0x2000002c

08007bb4 <memset>:
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d100      	bne.n	8007bbe <memset+0xa>
 8007bbc:	4770      	bx	lr
 8007bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc2:	e7f9      	b.n	8007bb8 <memset+0x4>

08007bc4 <_free_r>:
 8007bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d048      	beq.n	8007c5c <_free_r+0x98>
 8007bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bce:	9001      	str	r0, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bd6:	bfb8      	it	lt
 8007bd8:	18e4      	addlt	r4, r4, r3
 8007bda:	f000 f8ad 	bl	8007d38 <__malloc_lock>
 8007bde:	4a20      	ldr	r2, [pc, #128]	; (8007c60 <_free_r+0x9c>)
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	4615      	mov	r5, r2
 8007be6:	b933      	cbnz	r3, 8007bf6 <_free_r+0x32>
 8007be8:	6063      	str	r3, [r4, #4]
 8007bea:	6014      	str	r4, [r2, #0]
 8007bec:	b003      	add	sp, #12
 8007bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf2:	f000 b8a7 	b.w	8007d44 <__malloc_unlock>
 8007bf6:	42a3      	cmp	r3, r4
 8007bf8:	d90b      	bls.n	8007c12 <_free_r+0x4e>
 8007bfa:	6821      	ldr	r1, [r4, #0]
 8007bfc:	1862      	adds	r2, r4, r1
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	bf04      	itt	eq
 8007c02:	681a      	ldreq	r2, [r3, #0]
 8007c04:	685b      	ldreq	r3, [r3, #4]
 8007c06:	6063      	str	r3, [r4, #4]
 8007c08:	bf04      	itt	eq
 8007c0a:	1852      	addeq	r2, r2, r1
 8007c0c:	6022      	streq	r2, [r4, #0]
 8007c0e:	602c      	str	r4, [r5, #0]
 8007c10:	e7ec      	b.n	8007bec <_free_r+0x28>
 8007c12:	461a      	mov	r2, r3
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b10b      	cbz	r3, 8007c1c <_free_r+0x58>
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	d9fa      	bls.n	8007c12 <_free_r+0x4e>
 8007c1c:	6811      	ldr	r1, [r2, #0]
 8007c1e:	1855      	adds	r5, r2, r1
 8007c20:	42a5      	cmp	r5, r4
 8007c22:	d10b      	bne.n	8007c3c <_free_r+0x78>
 8007c24:	6824      	ldr	r4, [r4, #0]
 8007c26:	4421      	add	r1, r4
 8007c28:	1854      	adds	r4, r2, r1
 8007c2a:	42a3      	cmp	r3, r4
 8007c2c:	6011      	str	r1, [r2, #0]
 8007c2e:	d1dd      	bne.n	8007bec <_free_r+0x28>
 8007c30:	681c      	ldr	r4, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	6053      	str	r3, [r2, #4]
 8007c36:	4421      	add	r1, r4
 8007c38:	6011      	str	r1, [r2, #0]
 8007c3a:	e7d7      	b.n	8007bec <_free_r+0x28>
 8007c3c:	d902      	bls.n	8007c44 <_free_r+0x80>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	6003      	str	r3, [r0, #0]
 8007c42:	e7d3      	b.n	8007bec <_free_r+0x28>
 8007c44:	6825      	ldr	r5, [r4, #0]
 8007c46:	1961      	adds	r1, r4, r5
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	bf04      	itt	eq
 8007c4c:	6819      	ldreq	r1, [r3, #0]
 8007c4e:	685b      	ldreq	r3, [r3, #4]
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	bf04      	itt	eq
 8007c54:	1949      	addeq	r1, r1, r5
 8007c56:	6021      	streq	r1, [r4, #0]
 8007c58:	6054      	str	r4, [r2, #4]
 8007c5a:	e7c7      	b.n	8007bec <_free_r+0x28>
 8007c5c:	b003      	add	sp, #12
 8007c5e:	bd30      	pop	{r4, r5, pc}
 8007c60:	200000b4 	.word	0x200000b4

08007c64 <_malloc_r>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	1ccd      	adds	r5, r1, #3
 8007c68:	f025 0503 	bic.w	r5, r5, #3
 8007c6c:	3508      	adds	r5, #8
 8007c6e:	2d0c      	cmp	r5, #12
 8007c70:	bf38      	it	cc
 8007c72:	250c      	movcc	r5, #12
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	4606      	mov	r6, r0
 8007c78:	db01      	blt.n	8007c7e <_malloc_r+0x1a>
 8007c7a:	42a9      	cmp	r1, r5
 8007c7c:	d903      	bls.n	8007c86 <_malloc_r+0x22>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	6033      	str	r3, [r6, #0]
 8007c82:	2000      	movs	r0, #0
 8007c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c86:	f000 f857 	bl	8007d38 <__malloc_lock>
 8007c8a:	4921      	ldr	r1, [pc, #132]	; (8007d10 <_malloc_r+0xac>)
 8007c8c:	680a      	ldr	r2, [r1, #0]
 8007c8e:	4614      	mov	r4, r2
 8007c90:	b99c      	cbnz	r4, 8007cba <_malloc_r+0x56>
 8007c92:	4f20      	ldr	r7, [pc, #128]	; (8007d14 <_malloc_r+0xb0>)
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	b923      	cbnz	r3, 8007ca2 <_malloc_r+0x3e>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f000 f83c 	bl	8007d18 <_sbrk_r>
 8007ca0:	6038      	str	r0, [r7, #0]
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 f837 	bl	8007d18 <_sbrk_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d123      	bne.n	8007cf6 <_malloc_r+0x92>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	6033      	str	r3, [r6, #0]
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f000 f846 	bl	8007d44 <__malloc_unlock>
 8007cb8:	e7e3      	b.n	8007c82 <_malloc_r+0x1e>
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	1b5b      	subs	r3, r3, r5
 8007cbe:	d417      	bmi.n	8007cf0 <_malloc_r+0x8c>
 8007cc0:	2b0b      	cmp	r3, #11
 8007cc2:	d903      	bls.n	8007ccc <_malloc_r+0x68>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	441c      	add	r4, r3
 8007cc8:	6025      	str	r5, [r4, #0]
 8007cca:	e004      	b.n	8007cd6 <_malloc_r+0x72>
 8007ccc:	6863      	ldr	r3, [r4, #4]
 8007cce:	42a2      	cmp	r2, r4
 8007cd0:	bf0c      	ite	eq
 8007cd2:	600b      	streq	r3, [r1, #0]
 8007cd4:	6053      	strne	r3, [r2, #4]
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f000 f834 	bl	8007d44 <__malloc_unlock>
 8007cdc:	f104 000b 	add.w	r0, r4, #11
 8007ce0:	1d23      	adds	r3, r4, #4
 8007ce2:	f020 0007 	bic.w	r0, r0, #7
 8007ce6:	1ac2      	subs	r2, r0, r3
 8007ce8:	d0cc      	beq.n	8007c84 <_malloc_r+0x20>
 8007cea:	1a1b      	subs	r3, r3, r0
 8007cec:	50a3      	str	r3, [r4, r2]
 8007cee:	e7c9      	b.n	8007c84 <_malloc_r+0x20>
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	6864      	ldr	r4, [r4, #4]
 8007cf4:	e7cc      	b.n	8007c90 <_malloc_r+0x2c>
 8007cf6:	1cc4      	adds	r4, r0, #3
 8007cf8:	f024 0403 	bic.w	r4, r4, #3
 8007cfc:	42a0      	cmp	r0, r4
 8007cfe:	d0e3      	beq.n	8007cc8 <_malloc_r+0x64>
 8007d00:	1a21      	subs	r1, r4, r0
 8007d02:	4630      	mov	r0, r6
 8007d04:	f000 f808 	bl	8007d18 <_sbrk_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d1dd      	bne.n	8007cc8 <_malloc_r+0x64>
 8007d0c:	e7cf      	b.n	8007cae <_malloc_r+0x4a>
 8007d0e:	bf00      	nop
 8007d10:	200000b4 	.word	0x200000b4
 8007d14:	200000b8 	.word	0x200000b8

08007d18 <_sbrk_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	; (8007d34 <_sbrk_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f9 f8b8 	bl	8000e98 <_sbrk>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_sbrk_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_sbrk_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	200008d8 	.word	0x200008d8

08007d38 <__malloc_lock>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__malloc_lock+0x8>)
 8007d3a:	f000 b809 	b.w	8007d50 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200008e0 	.word	0x200008e0

08007d44 <__malloc_unlock>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__malloc_unlock+0x8>)
 8007d46:	f000 b804 	b.w	8007d52 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200008e0 	.word	0x200008e0

08007d50 <__retarget_lock_acquire_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_release_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
